{
    "version": "https://jsonfeed.org/version/1",
    "title": "JustGo's 收纳盒",
    "subtitle": "a easy crypt0er",
    "icon": "https://justgo00.github.io/images/favicon.ico",
    "description": "A study crypto soon small chicken, hope big boss to give me advice.",
    "home_page_url": "https://justgo00.github.io",
    "items": [
        {
            "id": "https://justgo00.github.io/2024/02/06/L3HCTF%202024/",
            "url": "https://justgo00.github.io/2024/02/06/L3HCTF%202024/",
            "title": "L3HCTF 2024 -Cry方向",
            "date_published": "2024-02-06T08:03:17.853Z",
            "content_html": "<h2 id=\"babyspn\"><a class=\"anchor\" href=\"#babyspn\">#</a> <strong>babySPN</strong></h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">K = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure></p>\n<p>给了 k，按照代码逻辑直接跑，非预期。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">K = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">hash_value = sha256(long_to_bytes(list_to_int(K))).hexdigest()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(hash_value)</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://n0b8wz8yo3e.feishu.cn/space/api/box/stream/download/asynccode/?code=OTliYTE3YjJlNzIzNzhkZDQ0YjAyOGJlNjQxZmM3YTJfRWZFM0JFS05QSlRIVWlaS25SVWRqRG1BMWFuZ3JvVlNfVG9rZW46WUhSS2I2MEQxb2NqSFF4dFlXZ2NwYlMwbndjXzE3MDcyMDY1MjE6MTcwNzIxMDEyMV9WNA\" alt=\"img\" /></p>\n<h2 id=\"babyspn-revenge\"><a class=\"anchor\" href=\"#babyspn-revenge\">#</a> <strong>babySPN revenge</strong></h2>\n<p>中间相遇攻击，round_func 是线性的，可以反推，正向跑两轮需要知道 key 的前 20bit，由于 enc 中的</p>\n<p>for i in range(16):</p>\n<p>​     Y[i] ^= K[kstart+i]</p>\n<p>函数，逆向跑两轮需要 key 的后 24bit，先跑出正向两轮的所有结果，再跑逆向两轮，如果与正向相同，则输出。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha256</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> long_to_bytes</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bin_to_list</span>(<span class=\"params\">r, bit_len</span>):</span><br><span class=\"line\">    <span class=\"built_in\">list</span> = [r &gt;&gt; d &amp; <span class=\"number\">1</span> <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bit_len)][::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">list_to_int</span>(<span class=\"params\"><span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(<span class=\"string\">&quot;&quot;</span>.join(<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Pbox=[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">Sbox=[<span class=\"number\">14</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">15</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">round_func</span>(<span class=\"params\">X,r,K</span>):</span><br><span class=\"line\">    kstart=<span class=\"number\">4</span>*r - <span class=\"number\">4</span></span><br><span class=\"line\">    XX = [<span class=\"number\">0</span>] * <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        XX[i] = X[i] ^ K[kstart+i]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        value = list_to_int(XX[<span class=\"number\">4</span>*i:<span class=\"number\">4</span>*i+<span class=\"number\">4</span>])</span><br><span class=\"line\">        s_value = Sbox[value]</span><br><span class=\"line\">        s_list = bin_to_list(s_value, <span class=\"number\">4</span>)</span><br><span class=\"line\">        XX[<span class=\"number\">4</span>*i],XX[<span class=\"number\">4</span>*i+<span class=\"number\">1</span>],XX[<span class=\"number\">4</span>*i+<span class=\"number\">2</span>],XX[<span class=\"number\">4</span>*i+<span class=\"number\">3</span>] = s_list[<span class=\"number\">0</span>],s_list[<span class=\"number\">1</span>],s_list[<span class=\"number\">2</span>],s_list[<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    Y=[<span class=\"number\">0</span>] * <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        Y[Pbox[i]-<span class=\"number\">1</span>]=XX[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enc</span>(<span class=\"params\">X,K</span>):</span><br><span class=\"line\">    Y = round_func(X,<span class=\"number\">1</span>,K)</span><br><span class=\"line\">    Y = round_func(Y,<span class=\"number\">2</span>,K)</span><br><span class=\"line\">    <span class=\"comment\"># Y = round_func(Y,3,K)</span></span><br><span class=\"line\">    <span class=\"comment\"># Y = round_func(Y,4,K)</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># kstart=4*5 - 4</span></span><br><span class=\"line\">    <span class=\"comment\"># for i in range(16):</span></span><br><span class=\"line\">    <span class=\"comment\">#     Y[i] ^= K[kstart+i]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">re_round_func</span>(<span class=\"params\">Y,r,K</span>):</span><br><span class=\"line\">    XX = [<span class=\"number\">0</span>]*<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        XX[i] = Y[Pbox[i]-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        value = list_to_int(XX[<span class=\"number\">4</span> * i:<span class=\"number\">4</span> * i + <span class=\"number\">4</span>])</span><br><span class=\"line\">        s_value = Sbox.index(value)</span><br><span class=\"line\">        s_list = bin_to_list(s_value, <span class=\"number\">4</span>)</span><br><span class=\"line\">        XX[<span class=\"number\">4</span> * i], XX[<span class=\"number\">4</span> * i + <span class=\"number\">1</span>], XX[<span class=\"number\">4</span> * i + <span class=\"number\">2</span>], XX[<span class=\"number\">4</span> * i + <span class=\"number\">3</span>] = s_list[<span class=\"number\">0</span>], s_list[<span class=\"number\">1</span>], s_list[<span class=\"number\">2</span>], s_list[<span class=\"number\">3</span>]</span><br><span class=\"line\">    kstart = <span class=\"number\">4</span> * r - <span class=\"number\">4</span></span><br><span class=\"line\">    X = [<span class=\"number\">0</span>] * <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        X[i] = XX[i] ^ K[kstart+i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> X</span><br><span class=\"line\"></span><br><span class=\"line\">x1,x2,x3,x4 = [<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span></span><br><span class=\"line\">x1[<span class=\"number\">0</span>],x2[<span class=\"number\">4</span>],x3[<span class=\"number\">8</span>],x4[<span class=\"number\">12</span>] = <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span></span><br><span class=\"line\">forward = <span class=\"built_in\">set</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">2</span>**<span class=\"number\">20</span>)):</span><br><span class=\"line\">    K0 = bin_to_list(i,<span class=\"number\">20</span>)</span><br><span class=\"line\">    CC1,CC2,CC3,CC4 = enc(x1,K0),enc(x2,K0),enc(x3,K0),enc(x4,K0)</span><br><span class=\"line\">    num = list_to_int(CC1+CC2+CC3+CC4)</span><br><span class=\"line\">    forward.add(num)</span><br><span class=\"line\"></span><br><span class=\"line\">C_final0 = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">C_final1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">C_final2 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">C_final3 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">2</span>**<span class=\"number\">24</span>)):</span><br><span class=\"line\">    K1 = bin_to_list(i,<span class=\"number\">24</span>)</span><br><span class=\"line\">    c_final0,c_final1,c_final2,c_final3 = [<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i0 <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        c_final0[i0] = K1[<span class=\"number\">8</span>+i0]^C_final0[i0]</span><br><span class=\"line\">        c_final1[i0] = K1[<span class=\"number\">8</span>+i0]^C_final1[i0]</span><br><span class=\"line\">        c_final2[i0] = K1[<span class=\"number\">8</span>+i0]^C_final2[i0]</span><br><span class=\"line\">        c_final3[i0] = K1[<span class=\"number\">8</span>+i0]^C_final3[i0]</span><br><span class=\"line\">    C1,C2,C3,C4 = re_round_func(c_final0,<span class=\"number\">2</span>,K1),re_round_func(c_final1,<span class=\"number\">2</span>,K1),re_round_func(c_final2,<span class=\"number\">2</span>,K1),re_round_func(c_final3,<span class=\"number\">2</span>,K1)</span><br><span class=\"line\">    C1,C2,C3,C4 = re_round_func(C1,<span class=\"number\">1</span>,K1),re_round_func(C2,<span class=\"number\">1</span>,K1),re_round_func(C3,<span class=\"number\">1</span>,K1),re_round_func(C4,<span class=\"number\">1</span>,K1)</span><br><span class=\"line\">    num1 = list_to_int(C1+C2+C3+C4)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num1 <span class=\"keyword\">in</span> forward:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(K1)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://n0b8wz8yo3e.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDFjOTQ0MGM1NTQ2NmM5MjFjMTZiNjQ0NjNiN2QxZTFfSFFqc25zM1Z6b1V0TlZST0hPMTRsT0V6dXozUDU3OW5fVG9rZW46Tm5Kb2JFQmJMb1RKVUl4aEZtZ2NGRzJxbmNoXzE3MDcyMDY1MjE6MTcwNzIxMDEyMV9WNA\" alt=\"img\" /></p>\n<p>得到后 24bit 的 key，前八 bit 正向加密爆破。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha256</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> long_to_bytes</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bin_to_list</span>(<span class=\"params\">r, bit_len</span>):</span><br><span class=\"line\">    <span class=\"built_in\">list</span> = [r &gt;&gt; d &amp; <span class=\"number\">1</span> <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bit_len)][::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">list_to_int</span>(<span class=\"params\"><span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(<span class=\"string\">&quot;&quot;</span>.join(<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Pbox=[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">Sbox=[<span class=\"number\">14</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">15</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">round_func</span>(<span class=\"params\">X,r,K</span>):</span><br><span class=\"line\">    kstart=<span class=\"number\">4</span>*r - <span class=\"number\">4</span></span><br><span class=\"line\">    XX = [<span class=\"number\">0</span>] * <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        XX[i] = X[i] ^ K[kstart+i]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        value = list_to_int(XX[<span class=\"number\">4</span>*i:<span class=\"number\">4</span>*i+<span class=\"number\">4</span>])</span><br><span class=\"line\">        s_value = Sbox[value]</span><br><span class=\"line\">        s_list = bin_to_list(s_value, <span class=\"number\">4</span>)</span><br><span class=\"line\">        XX[<span class=\"number\">4</span>*i],XX[<span class=\"number\">4</span>*i+<span class=\"number\">1</span>],XX[<span class=\"number\">4</span>*i+<span class=\"number\">2</span>],XX[<span class=\"number\">4</span>*i+<span class=\"number\">3</span>] = s_list[<span class=\"number\">0</span>],s_list[<span class=\"number\">1</span>],s_list[<span class=\"number\">2</span>],s_list[<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    Y=[<span class=\"number\">0</span>] * <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        Y[Pbox[i]-<span class=\"number\">1</span>]=XX[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enc</span>(<span class=\"params\">X,K</span>):</span><br><span class=\"line\">    Y = round_func(X,<span class=\"number\">1</span>,K)</span><br><span class=\"line\">    Y = round_func(Y,<span class=\"number\">2</span>,K)</span><br><span class=\"line\">    Y = round_func(Y,<span class=\"number\">3</span>,K)</span><br><span class=\"line\">    Y = round_func(Y,<span class=\"number\">4</span>,K)</span><br><span class=\"line\"></span><br><span class=\"line\">    kstart=<span class=\"number\">4</span>*<span class=\"number\">5</span> - <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">16</span>):</span><br><span class=\"line\">        Y[i] ^= K[kstart+i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y</span><br><span class=\"line\">x1,x2,x3,x4 = [<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span>,[<span class=\"number\">0</span>]*<span class=\"number\">16</span></span><br><span class=\"line\">x1[<span class=\"number\">0</span>],x2[<span class=\"number\">4</span>],x3[<span class=\"number\">8</span>],x4[<span class=\"number\">12</span>] = <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">k = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>**<span class=\"number\">8</span>):</span><br><span class=\"line\">    key = bin_to_list(i,<span class=\"number\">8</span>) + k</span><br><span class=\"line\">    C1,C2,C3,C4 = enc(x1,key),enc(x2,key),enc(x3,key),enc(x4,key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> C1 ==  [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>] <span class=\"keyword\">and</span> C2 == [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(key)</span><br><span class=\"line\">        hash_value = sha256(long_to_bytes(list_to_int(key))).hexdigest()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(hash_value)</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://n0b8wz8yo3e.feishu.cn/space/api/box/stream/download/asynccode/?code=MGVjMzM5NDUyZjZmM2VhMjg3NDNjMzk5NDZlMmU5MTFfNXFhMjJJZlk1WHBzWGI1c2F1UEROMmlNY3FUa3N5R1RfVG9rZW46VFZPT2JFNm9Sb3Y1ek54VVA4Z2N3M2dqbnBnXzE3MDcyMDY1MjE6MTcwNzIxMDEyMV9WNA\" alt=\"img\" /></p>\n<h2 id=\"badrlwe\"><a class=\"anchor\" href=\"#badrlwe\">#</a> badrlwe</h2>\n<p>f = x^N - 1 上存在问题，f 可以分解为多个多项式相乘，可以找到 D^3CTF 2023 中的<strong> d3bdd</strong> 问题，f 可以分为多个因子，于是降低 degree 使用 LLL 算法求出 s 关于不同 f 因子的余数，再使用 crt 求解，由于 s 最大度数不超过 64，于是只需要求解 f 中度数小于 64 的因子即可。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> check_output</span><br><span class=\"line\"><span class=\"keyword\">from</span> re <span class=\"keyword\">import</span> findall</span><br><span class=\"line\"></span><br><span class=\"line\">q = <span class=\"number\">1219077173</span></span><br><span class=\"line\">F.&lt;x&gt; = Zmod(q)[]</span><br><span class=\"line\">N = <span class=\"number\">1024</span></span><br><span class=\"line\">x = F.gen()</span><br><span class=\"line\">f = x^N - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">216047404</span>*x^<span class=\"number\">1023</span> + <span class=\"number\">1008199117</span>*x^<span class=\"number\">1022</span> + <span class=\"number\">39562072</span>*x^<span class=\"number\">1021</span> + <span class=\"number\">189992355</span>*x^<span class=\"number\">1020</span> + <span class=\"number\">1087671639</span>*x^<span class=\"number\">1019</span> + <span class=\"number\">541371337</span>*x^<span class=\"number\">1018</span> + <span class=\"number\">1146044200</span>*x^<span class=\"number\">1017</span> + <span class=\"number\">212969175</span>*x^<span class=\"number\">1016</span> + <span class=\"number\">1114159572</span>*x^<span class=\"number\">1015</span> + <span class=\"number\">1112032860</span>*x^<span class=\"number\">1014</span> + <span class=\"number\">1204883609</span>*x^<span class=\"number\">1013</span> + <span class=\"number\">1181544913</span>*x^<span class=\"number\">1012</span> + <span class=\"number\">851496082</span>*x^<span class=\"number\">1011</span> + <span class=\"number\">222877006</span>*x^<span class=\"number\">1010</span> + <span class=\"number\">163176236</span>*x^<span class=\"number\">1009</span> + <span class=\"number\">268697504</span>*x^<span class=\"number\">1008</span> + <span class=\"number\">613151090</span>*x^<span class=\"number\">1007</span> + <span class=\"number\">1185245256</span>*x^<span class=\"number\">1006</span> + <span class=\"number\">215725010</span>*x^<span class=\"number\">1005</span> + <span class=\"number\">789898500</span>*x^<span class=\"number\">1004</span> + <span class=\"number\">1156619111</span>*x^<span class=\"number\">1003</span> + <span class=\"number\">610859911</span>*x^<span class=\"number\">1002</span> + <span class=\"number\">959814483</span>*x^<span class=\"number\">1001</span> + <span class=\"number\">684353251</span>*x^<span class=\"number\">1000</span> + <span class=\"number\">290850651</span>*x^<span class=\"number\">999</span> + <span class=\"number\">675880502</span>*x^<span class=\"number\">998</span> + <span class=\"number\">836239751</span>*x^<span class=\"number\">997</span> + <span class=\"number\">487296407</span>*x^<span class=\"number\">996</span> + <span class=\"number\">778816128</span>*x^<span class=\"number\">995</span> + <span class=\"number\">1013639221</span>*x^<span class=\"number\">994</span> + <span class=\"number\">189137575</span>*x^<span class=\"number\">993</span> + <span class=\"number\">172217836</span>*x^<span class=\"number\">992</span> + <span class=\"number\">572872008</span>*x^<span class=\"number\">991</span> + <span class=\"number\">865759581</span>*x^<span class=\"number\">990</span> + <span class=\"number\">399805736</span>*x^<span class=\"number\">989</span> + <span class=\"number\">394587004</span>*x^<span class=\"number\">988</span> + <span class=\"number\">633085719</span>*x^<span class=\"number\">987</span> + <span class=\"number\">15142893</span>*x^<span class=\"number\">986</span> + <span class=\"number\">461176831</span>*x^<span class=\"number\">985</span> + <span class=\"number\">1078060208</span>*x^<span class=\"number\">984</span> + <span class=\"number\">787396508</span>*x^<span class=\"number\">983</span> + <span class=\"number\">877420202</span>*x^<span class=\"number\">982</span> + <span class=\"number\">1121486845</span>*x^<span class=\"number\">981</span> + <span class=\"number\">146921816</span>*x^<span class=\"number\">980</span> + <span class=\"number\">670134387</span>*x^<span class=\"number\">979</span> + <span class=\"number\">574407635</span>*x^<span class=\"number\">978</span> + <span class=\"number\">1148395437</span>*x^<span class=\"number\">977</span> + <span class=\"number\">748514947</span>*x^<span class=\"number\">976</span> + <span class=\"number\">970442995</span>*x^<span class=\"number\">975</span> + <span class=\"number\">280085063</span>*x^<span class=\"number\">974</span> + <span class=\"number\">420670822</span>*x^<span class=\"number\">973</span> + <span class=\"number\">20159574</span>*x^<span class=\"number\">972</span> + <span class=\"number\">219680665</span>*x^<span class=\"number\">971</span> + <span class=\"number\">401202858</span>*x^<span class=\"number\">970</span> + <span class=\"number\">328444623</span>*x^<span class=\"number\">969</span> + <span class=\"number\">623312316</span>*x^<span class=\"number\">968</span> + <span class=\"number\">917712264</span>*x^<span class=\"number\">967</span> + <span class=\"number\">588061576</span>*x^<span class=\"number\">966</span> + <span class=\"number\">625482841</span>*x^<span class=\"number\">965</span> + <span class=\"number\">220929234</span>*x^<span class=\"number\">964</span> + <span class=\"number\">778461001</span>*x^<span class=\"number\">963</span> + <span class=\"number\">498203565</span>*x^<span class=\"number\">962</span> + <span class=\"number\">1055981771</span>*x^<span class=\"number\">961</span> + <span class=\"number\">70562147</span>*x^<span class=\"number\">960</span> + <span class=\"number\">931081750</span>*x^<span class=\"number\">959</span> + <span class=\"number\">93569863</span>*x^<span class=\"number\">958</span> + <span class=\"number\">314876311</span>*x^<span class=\"number\">957</span> + <span class=\"number\">932364613</span>*x^<span class=\"number\">956</span> + <span class=\"number\">1132016772</span>*x^<span class=\"number\">955</span> + <span class=\"number\">371703330</span>*x^<span class=\"number\">954</span> + <span class=\"number\">189301560</span>*x^<span class=\"number\">953</span> + <span class=\"number\">739232608</span>*x^<span class=\"number\">952</span> + <span class=\"number\">916695967</span>*x^<span class=\"number\">951</span> + <span class=\"number\">399818344</span>*x^<span class=\"number\">950</span> + <span class=\"number\">558604923</span>*x^<span class=\"number\">949</span> + <span class=\"number\">1092603913</span>*x^<span class=\"number\">948</span> + <span class=\"number\">987195616</span>*x^<span class=\"number\">947</span> + <span class=\"number\">665679589</span>*x^<span class=\"number\">946</span> + <span class=\"number\">1142632478</span>*x^<span class=\"number\">945</span> + <span class=\"number\">198797278</span>*x^<span class=\"number\">944</span> + <span class=\"number\">110832477</span>*x^<span class=\"number\">943</span> + <span class=\"number\">775688737</span>*x^<span class=\"number\">942</span> + <span class=\"number\">275416086</span>*x^<span class=\"number\">941</span> + <span class=\"number\">435656120</span>*x^<span class=\"number\">940</span> + <span class=\"number\">754150483</span>*x^<span class=\"number\">939</span> + <span class=\"number\">1024583186</span>*x^<span class=\"number\">938</span> + <span class=\"number\">972075461</span>*x^<span class=\"number\">937</span> + <span class=\"number\">1071060217</span>*x^<span class=\"number\">936</span> + <span class=\"number\">710789980</span>*x^<span class=\"number\">935</span> + <span class=\"number\">691361770</span>*x^<span class=\"number\">934</span> + <span class=\"number\">1097024307</span>*x^<span class=\"number\">933</span> + <span class=\"number\">862356288</span>*x^<span class=\"number\">932</span> + <span class=\"number\">354500195</span>*x^<span class=\"number\">931</span> + <span class=\"number\">158151296</span>*x^<span class=\"number\">930</span> + <span class=\"number\">733475281</span>*x^<span class=\"number\">929</span> + <span class=\"number\">215008492</span>*x^<span class=\"number\">928</span> + <span class=\"number\">151139272</span>*x^<span class=\"number\">927</span> + <span class=\"number\">1000425669</span>*x^<span class=\"number\">926</span> + <span class=\"number\">590964357</span>*x^<span class=\"number\">925</span> + <span class=\"number\">373950911</span>*x^<span class=\"number\">924</span> + <span class=\"number\">43038800</span>*x^<span class=\"number\">923</span> + <span class=\"number\">338044906</span>*x^<span class=\"number\">922</span> + <span class=\"number\">293954870</span>*x^<span class=\"number\">921</span> + <span class=\"number\">393479</span>*x^<span class=\"number\">920</span> + <span class=\"number\">555095359</span>*x^<span class=\"number\">919</span> + <span class=\"number\">418829106</span>*x^<span class=\"number\">918</span> + <span class=\"number\">95391760</span>*x^<span class=\"number\">917</span> + <span class=\"number\">897658305</span>*x^<span class=\"number\">916</span> + <span class=\"number\">1040609125</span>*x^<span class=\"number\">915</span> + <span class=\"number\">239948276</span>*x^<span class=\"number\">914</span> + <span class=\"number\">1190720461</span>*x^<span class=\"number\">913</span> + <span class=\"number\">160498737</span>*x^<span class=\"number\">912</span> + <span class=\"number\">394967890</span>*x^<span class=\"number\">911</span> + <span class=\"number\">104302686</span>*x^<span class=\"number\">910</span> + <span class=\"number\">48021969</span>*x^<span class=\"number\">909</span> + <span class=\"number\">761000569</span>*x^<span class=\"number\">908</span> + <span class=\"number\">356140410</span>*x^<span class=\"number\">907</span> + <span class=\"number\">225246587</span>*x^<span class=\"number\">906</span> + <span class=\"number\">79172445</span>*x^<span class=\"number\">905</span> + <span class=\"number\">975365689</span>*x^<span class=\"number\">904</span> + <span class=\"number\">1077396491</span>*x^<span class=\"number\">903</span> + <span class=\"number\">728717352</span>*x^<span class=\"number\">902</span> + <span class=\"number\">964273647</span>*x^<span class=\"number\">901</span> + <span class=\"number\">258781036</span>*x^<span class=\"number\">900</span> + <span class=\"number\">746930481</span>*x^<span class=\"number\">899</span> + <span class=\"number\">793742220</span>*x^<span class=\"number\">898</span> + <span class=\"number\">542128050</span>*x^<span class=\"number\">897</span> + <span class=\"number\">562413014</span>*x^<span class=\"number\">896</span> + <span class=\"number\">701216258</span>*x^<span class=\"number\">895</span> + <span class=\"number\">928704966</span>*x^<span class=\"number\">894</span> + <span class=\"number\">98656502</span>*x^<span class=\"number\">893</span> + <span class=\"number\">1016152774</span>*x^<span class=\"number\">892</span> + <span class=\"number\">140544845</span>*x^<span class=\"number\">891</span> + <span class=\"number\">226416702</span>*x^<span class=\"number\">890</span> + <span class=\"number\">309310359</span>*x^<span class=\"number\">889</span> + <span class=\"number\">519065123</span>*x^<span class=\"number\">888</span> + <span class=\"number\">346740110</span>*x^<span class=\"number\">887</span> + <span class=\"number\">116615122</span>*x^<span class=\"number\">886</span> + <span class=\"number\">990804519</span>*x^<span class=\"number\">885</span> + <span class=\"number\">208648062</span>*x^<span class=\"number\">884</span> + <span class=\"number\">605381435</span>*x^<span class=\"number\">883</span> + <span class=\"number\">821163414</span>*x^<span class=\"number\">882</span> + <span class=\"number\">864698754</span>*x^<span class=\"number\">881</span> + <span class=\"number\">424773230</span>*x^<span class=\"number\">880</span> + <span class=\"number\">1184139330</span>*x^<span class=\"number\">879</span> + <span class=\"number\">437390254</span>*x^<span class=\"number\">878</span> + <span class=\"number\">41435781</span>*x^<span class=\"number\">877</span> + <span class=\"number\">824197241</span>*x^<span class=\"number\">876</span> + <span class=\"number\">1181823353</span>*x^<span class=\"number\">875</span> + <span class=\"number\">354135255</span>*x^<span class=\"number\">874</span> + <span class=\"number\">921600154</span>*x^<span class=\"number\">873</span> + <span class=\"number\">972782404</span>*x^<span class=\"number\">872</span> + <span class=\"number\">304175744</span>*x^<span class=\"number\">871</span> + <span class=\"number\">976950586</span>*x^<span class=\"number\">870</span> + <span class=\"number\">561195955</span>*x^<span class=\"number\">869</span> + <span class=\"number\">840601911</span>*x^<span class=\"number\">868</span> + <span class=\"number\">848362310</span>*x^<span class=\"number\">867</span> + <span class=\"number\">698380233</span>*x^<span class=\"number\">866</span> + <span class=\"number\">703722831</span>*x^<span class=\"number\">865</span> + <span class=\"number\">527081934</span>*x^<span class=\"number\">864</span> + <span class=\"number\">996708932</span>*x^<span class=\"number\">863</span> + <span class=\"number\">926257884</span>*x^<span class=\"number\">862</span> + <span class=\"number\">113808466</span>*x^<span class=\"number\">861</span> + <span class=\"number\">111022399</span>*x^<span class=\"number\">860</span> + <span class=\"number\">336240881</span>*x^<span class=\"number\">859</span> + <span class=\"number\">281602555</span>*x^<span class=\"number\">858</span> + <span class=\"number\">456022351</span>*x^<span class=\"number\">857</span> + <span class=\"number\">303940681</span>*x^<span class=\"number\">856</span> + <span class=\"number\">1152960332</span>*x^<span class=\"number\">855</span> + <span class=\"number\">762827305</span>*x^<span class=\"number\">854</span> + <span class=\"number\">1097893502</span>*x^<span class=\"number\">853</span> + <span class=\"number\">1159492861</span>*x^<span class=\"number\">852</span> + <span class=\"number\">791288185</span>*x^<span class=\"number\">851</span> + <span class=\"number\">552596428</span>*x^<span class=\"number\">850</span> + <span class=\"number\">1160303133</span>*x^<span class=\"number\">849</span> + <span class=\"number\">855459983</span>*x^<span class=\"number\">848</span> + <span class=\"number\">870046128</span>*x^<span class=\"number\">847</span> + <span class=\"number\">412042730</span>*x^<span class=\"number\">846</span> + <span class=\"number\">527317697</span>*x^<span class=\"number\">845</span> + <span class=\"number\">118258027</span>*x^<span class=\"number\">844</span> + <span class=\"number\">1156090191</span>*x^<span class=\"number\">843</span> + <span class=\"number\">1184418516</span>*x^<span class=\"number\">842</span> + <span class=\"number\">736914609</span>*x^<span class=\"number\">841</span> + <span class=\"number\">1042440949</span>*x^<span class=\"number\">840</span> + <span class=\"number\">1118336201</span>*x^<span class=\"number\">839</span> + <span class=\"number\">692314475</span>*x^<span class=\"number\">838</span> + <span class=\"number\">888141647</span>*x^<span class=\"number\">837</span> + <span class=\"number\">611975215</span>*x^<span class=\"number\">836</span> + <span class=\"number\">112482309</span>*x^<span class=\"number\">835</span> + <span class=\"number\">774541929</span>*x^<span class=\"number\">834</span> + <span class=\"number\">877613260</span>*x^<span class=\"number\">833</span> + <span class=\"number\">218484596</span>*x^<span class=\"number\">832</span> + <span class=\"number\">744043072</span>*x^<span class=\"number\">831</span> + <span class=\"number\">1149426359</span>*x^<span class=\"number\">830</span> + <span class=\"number\">1086732941</span>*x^<span class=\"number\">829</span> + <span class=\"number\">218727414</span>*x^<span class=\"number\">828</span> + <span class=\"number\">111004493</span>*x^<span class=\"number\">827</span> + <span class=\"number\">48035668</span>*x^<span class=\"number\">826</span> + <span class=\"number\">1129753198</span>*x^<span class=\"number\">825</span> + <span class=\"number\">410088959</span>*x^<span class=\"number\">824</span> + <span class=\"number\">1186919074</span>*x^<span class=\"number\">823</span> + <span class=\"number\">291266088</span>*x^<span class=\"number\">822</span> + <span class=\"number\">622780685</span>*x^<span class=\"number\">821</span> + <span class=\"number\">908030149</span>*x^<span class=\"number\">820</span> + <span class=\"number\">152548456</span>*x^<span class=\"number\">819</span> + <span class=\"number\">970996704</span>*x^<span class=\"number\">818</span> + <span class=\"number\">643233117</span>*x^<span class=\"number\">817</span> + <span class=\"number\">97648457</span>*x^<span class=\"number\">816</span> + <span class=\"number\">167039372</span>*x^<span class=\"number\">815</span> + <span class=\"number\">451159004</span>*x^<span class=\"number\">814</span> + <span class=\"number\">21522258</span>*x^<span class=\"number\">813</span> + <span class=\"number\">446568222</span>*x^<span class=\"number\">812</span> + <span class=\"number\">97236135</span>*x^<span class=\"number\">811</span> + <span class=\"number\">601480363</span>*x^<span class=\"number\">810</span> + <span class=\"number\">896523050</span>*x^<span class=\"number\">809</span> + <span class=\"number\">635312918</span>*x^<span class=\"number\">808</span> + <span class=\"number\">771155729</span>*x^<span class=\"number\">807</span> + <span class=\"number\">727217487</span>*x^<span class=\"number\">806</span> + <span class=\"number\">1103325662</span>*x^<span class=\"number\">805</span> + <span class=\"number\">1145702253</span>*x^<span class=\"number\">804</span> + <span class=\"number\">111451279</span>*x^<span class=\"number\">803</span> + <span class=\"number\">709647761</span>*x^<span class=\"number\">802</span> + <span class=\"number\">155865734</span>*x^<span class=\"number\">801</span> + <span class=\"number\">788861657</span>*x^<span class=\"number\">800</span> + <span class=\"number\">25328658</span>*x^<span class=\"number\">799</span> + <span class=\"number\">387592047</span>*x^<span class=\"number\">798</span> + <span class=\"number\">631380316</span>*x^<span class=\"number\">797</span> + <span class=\"number\">195654331</span>*x^<span class=\"number\">796</span> + <span class=\"number\">379901017</span>*x^<span class=\"number\">795</span> + <span class=\"number\">110746571</span>*x^<span class=\"number\">794</span> + <span class=\"number\">821639667</span>*x^<span class=\"number\">793</span> + <span class=\"number\">1196705497</span>*x^<span class=\"number\">792</span> + <span class=\"number\">926725497</span>*x^<span class=\"number\">791</span> + <span class=\"number\">752090468</span>*x^<span class=\"number\">790</span> + <span class=\"number\">565928514</span>*x^<span class=\"number\">789</span> + <span class=\"number\">107924077</span>*x^<span class=\"number\">788</span> + <span class=\"number\">1035444397</span>*x^<span class=\"number\">787</span> + <span class=\"number\">389590222</span>*x^<span class=\"number\">786</span> + <span class=\"number\">746022468</span>*x^<span class=\"number\">785</span> + <span class=\"number\">1152494936</span>*x^<span class=\"number\">784</span> + <span class=\"number\">1047183126</span>*x^<span class=\"number\">783</span> + <span class=\"number\">935173423</span>*x^<span class=\"number\">782</span> + <span class=\"number\">237022259</span>*x^<span class=\"number\">781</span> + <span class=\"number\">68211471</span>*x^<span class=\"number\">780</span> + <span class=\"number\">682392084</span>*x^<span class=\"number\">779</span> + <span class=\"number\">900610142</span>*x^<span class=\"number\">778</span> + <span class=\"number\">659697118</span>*x^<span class=\"number\">777</span> + <span class=\"number\">381789469</span>*x^<span class=\"number\">776</span> + <span class=\"number\">895479393</span>*x^<span class=\"number\">775</span> + <span class=\"number\">342674862</span>*x^<span class=\"number\">774</span> + <span class=\"number\">1034152415</span>*x^<span class=\"number\">773</span> + <span class=\"number\">736863278</span>*x^<span class=\"number\">772</span> + <span class=\"number\">233824501</span>*x^<span class=\"number\">771</span> + <span class=\"number\">511543257</span>*x^<span class=\"number\">770</span> + <span class=\"number\">43539547</span>*x^<span class=\"number\">769</span> + <span class=\"number\">871109943</span>*x^<span class=\"number\">768</span> + <span class=\"number\">234226499</span>*x^<span class=\"number\">767</span> + <span class=\"number\">958639125</span>*x^<span class=\"number\">766</span> + <span class=\"number\">913885377</span>*x^<span class=\"number\">765</span> + <span class=\"number\">757234386</span>*x^<span class=\"number\">764</span> + <span class=\"number\">330354514</span>*x^<span class=\"number\">763</span> + <span class=\"number\">693659124</span>*x^<span class=\"number\">762</span> + <span class=\"number\">46757147</span>*x^<span class=\"number\">761</span> + <span class=\"number\">24910108</span>*x^<span class=\"number\">760</span> + <span class=\"number\">263754046</span>*x^<span class=\"number\">759</span> + <span class=\"number\">1007999117</span>*x^<span class=\"number\">758</span> + <span class=\"number\">569158879</span>*x^<span class=\"number\">757</span> + <span class=\"number\">781185896</span>*x^<span class=\"number\">756</span> + <span class=\"number\">328234792</span>*x^<span class=\"number\">755</span> + <span class=\"number\">1166796778</span>*x^<span class=\"number\">754</span> + <span class=\"number\">1023882729</span>*x^<span class=\"number\">753</span> + <span class=\"number\">1126014838</span>*x^<span class=\"number\">752</span> + <span class=\"number\">412948341</span>*x^<span class=\"number\">751</span> + <span class=\"number\">745762031</span>*x^<span class=\"number\">750</span> + <span class=\"number\">184601330</span>*x^<span class=\"number\">749</span> + <span class=\"number\">1195686854</span>*x^<span class=\"number\">748</span> + <span class=\"number\">226180761</span>*x^<span class=\"number\">747</span> + <span class=\"number\">813440273</span>*x^<span class=\"number\">746</span> + <span class=\"number\">198496604</span>*x^<span class=\"number\">745</span> + <span class=\"number\">646284299</span>*x^<span class=\"number\">744</span> + <span class=\"number\">775658802</span>*x^<span class=\"number\">743</span> + <span class=\"number\">1051631440</span>*x^<span class=\"number\">742</span> + <span class=\"number\">382010443</span>*x^<span class=\"number\">741</span> + <span class=\"number\">884529292</span>*x^<span class=\"number\">740</span> + <span class=\"number\">1171509241</span>*x^<span class=\"number\">739</span> + <span class=\"number\">148470016</span>*x^<span class=\"number\">738</span> + <span class=\"number\">545551560</span>*x^<span class=\"number\">737</span> + <span class=\"number\">895321797</span>*x^<span class=\"number\">736</span> + <span class=\"number\">990533556</span>*x^<span class=\"number\">735</span> + <span class=\"number\">1006826878</span>*x^<span class=\"number\">734</span> + <span class=\"number\">444425261</span>*x^<span class=\"number\">733</span> + <span class=\"number\">538658289</span>*x^<span class=\"number\">732</span> + <span class=\"number\">1201448839</span>*x^<span class=\"number\">731</span> + <span class=\"number\">813543244</span>*x^<span class=\"number\">730</span> + <span class=\"number\">866138640</span>*x^<span class=\"number\">729</span> + <span class=\"number\">992484781</span>*x^<span class=\"number\">728</span> + <span class=\"number\">797592952</span>*x^<span class=\"number\">727</span> + <span class=\"number\">5350520</span>*x^<span class=\"number\">726</span> + <span class=\"number\">1088776239</span>*x^<span class=\"number\">725</span> + <span class=\"number\">1011384293</span>*x^<span class=\"number\">724</span> + <span class=\"number\">202279961</span>*x^<span class=\"number\">723</span> + <span class=\"number\">580990742</span>*x^<span class=\"number\">722</span> + <span class=\"number\">608736084</span>*x^<span class=\"number\">721</span> + <span class=\"number\">592191483</span>*x^<span class=\"number\">720</span> + <span class=\"number\">603821965</span>*x^<span class=\"number\">719</span> + <span class=\"number\">686032966</span>*x^<span class=\"number\">718</span> + <span class=\"number\">309449994</span>*x^<span class=\"number\">717</span> + <span class=\"number\">997796743</span>*x^<span class=\"number\">716</span> + <span class=\"number\">323694959</span>*x^<span class=\"number\">715</span> + <span class=\"number\">404631321</span>*x^<span class=\"number\">714</span> + <span class=\"number\">684041814</span>*x^<span class=\"number\">713</span> + <span class=\"number\">954922509</span>*x^<span class=\"number\">712</span> + <span class=\"number\">17334061</span>*x^<span class=\"number\">711</span> + <span class=\"number\">1038027065</span>*x^<span class=\"number\">710</span> + <span class=\"number\">189030167</span>*x^<span class=\"number\">709</span> + <span class=\"number\">238786122</span>*x^<span class=\"number\">708</span> + <span class=\"number\">854157242</span>*x^<span class=\"number\">707</span> + <span class=\"number\">857322405</span>*x^<span class=\"number\">706</span> + <span class=\"number\">847505723</span>*x^<span class=\"number\">705</span> + <span class=\"number\">531600098</span>*x^<span class=\"number\">704</span> + <span class=\"number\">413144959</span>*x^<span class=\"number\">703</span> + <span class=\"number\">150862275</span>*x^<span class=\"number\">702</span> + <span class=\"number\">176120020</span>*x^<span class=\"number\">701</span> + <span class=\"number\">147651128</span>*x^<span class=\"number\">700</span> + <span class=\"number\">20961937</span>*x^<span class=\"number\">699</span> + <span class=\"number\">924892688</span>*x^<span class=\"number\">698</span> + <span class=\"number\">207889399</span>*x^<span class=\"number\">697</span> + <span class=\"number\">506289209</span>*x^<span class=\"number\">696</span> + <span class=\"number\">201657090</span>*x^<span class=\"number\">695</span> + <span class=\"number\">866897606</span>*x^<span class=\"number\">694</span> + <span class=\"number\">282950189</span>*x^<span class=\"number\">693</span> + <span class=\"number\">484625027</span>*x^<span class=\"number\">692</span> + <span class=\"number\">720969770</span>*x^<span class=\"number\">691</span> + <span class=\"number\">557487808</span>*x^<span class=\"number\">690</span> + <span class=\"number\">664292309</span>*x^<span class=\"number\">689</span> + <span class=\"number\">667236796</span>*x^<span class=\"number\">688</span> + <span class=\"number\">505039446</span>*x^<span class=\"number\">687</span> + <span class=\"number\">636507041</span>*x^<span class=\"number\">686</span> + <span class=\"number\">717904854</span>*x^<span class=\"number\">685</span> + <span class=\"number\">742491214</span>*x^<span class=\"number\">684</span> + <span class=\"number\">235380401</span>*x^<span class=\"number\">683</span> + <span class=\"number\">885103138</span>*x^<span class=\"number\">682</span> + <span class=\"number\">227708439</span>*x^<span class=\"number\">681</span> + <span class=\"number\">195450351</span>*x^<span class=\"number\">680</span> + <span class=\"number\">914408549</span>*x^<span class=\"number\">679</span> + <span class=\"number\">890140153</span>*x^<span class=\"number\">678</span> + <span class=\"number\">959662247</span>*x^<span class=\"number\">677</span> + <span class=\"number\">655663410</span>*x^<span class=\"number\">676</span> + <span class=\"number\">682768547</span>*x^<span class=\"number\">675</span> + <span class=\"number\">1063757282</span>*x^<span class=\"number\">674</span> + <span class=\"number\">776284911</span>*x^<span class=\"number\">673</span> + <span class=\"number\">1114588219</span>*x^<span class=\"number\">672</span> + <span class=\"number\">689022198</span>*x^<span class=\"number\">671</span> + <span class=\"number\">1160585767</span>*x^<span class=\"number\">670</span> + <span class=\"number\">784564493</span>*x^<span class=\"number\">669</span> + <span class=\"number\">599804982</span>*x^<span class=\"number\">668</span> + <span class=\"number\">954265199</span>*x^<span class=\"number\">667</span> + <span class=\"number\">1160092910</span>*x^<span class=\"number\">666</span> + <span class=\"number\">1178991310</span>*x^<span class=\"number\">665</span> + <span class=\"number\">610146522</span>*x^<span class=\"number\">664</span> + <span class=\"number\">589028938</span>*x^<span class=\"number\">663</span> + <span class=\"number\">972903553</span>*x^<span class=\"number\">662</span> + <span class=\"number\">933544074</span>*x^<span class=\"number\">661</span> + <span class=\"number\">910101746</span>*x^<span class=\"number\">660</span> + <span class=\"number\">1199479046</span>*x^<span class=\"number\">659</span> + <span class=\"number\">129564572</span>*x^<span class=\"number\">658</span> + <span class=\"number\">16630574</span>*x^<span class=\"number\">657</span> + <span class=\"number\">604268174</span>*x^<span class=\"number\">656</span> + <span class=\"number\">905616984</span>*x^<span class=\"number\">655</span> + <span class=\"number\">229755095</span>*x^<span class=\"number\">654</span> + <span class=\"number\">543777663</span>*x^<span class=\"number\">653</span> + <span class=\"number\">880642044</span>*x^<span class=\"number\">652</span> + <span class=\"number\">750742780</span>*x^<span class=\"number\">651</span> + <span class=\"number\">801027824</span>*x^<span class=\"number\">650</span> + <span class=\"number\">59869899</span>*x^<span class=\"number\">649</span> + <span class=\"number\">178293151</span>*x^<span class=\"number\">648</span> + <span class=\"number\">413473523</span>*x^<span class=\"number\">647</span> + <span class=\"number\">790966353</span>*x^<span class=\"number\">646</span> + <span class=\"number\">36947608</span>*x^<span class=\"number\">645</span> + <span class=\"number\">215402931</span>*x^<span class=\"number\">644</span> + <span class=\"number\">198271237</span>*x^<span class=\"number\">643</span> + <span class=\"number\">394503398</span>*x^<span class=\"number\">642</span> + <span class=\"number\">933396244</span>*x^<span class=\"number\">641</span> + <span class=\"number\">764498758</span>*x^<span class=\"number\">640</span> + <span class=\"number\">960831635</span>*x^<span class=\"number\">639</span> + <span class=\"number\">710558646</span>*x^<span class=\"number\">638</span> + <span class=\"number\">160491214</span>*x^<span class=\"number\">637</span> + <span class=\"number\">161213508</span>*x^<span class=\"number\">636</span> + <span class=\"number\">932611994</span>*x^<span class=\"number\">635</span> + <span class=\"number\">226519192</span>*x^<span class=\"number\">634</span> + <span class=\"number\">554464756</span>*x^<span class=\"number\">633</span> + <span class=\"number\">82595536</span>*x^<span class=\"number\">632</span> + <span class=\"number\">1144714763</span>*x^<span class=\"number\">631</span> + <span class=\"number\">361090580</span>*x^<span class=\"number\">630</span> + <span class=\"number\">747809061</span>*x^<span class=\"number\">629</span> + <span class=\"number\">114293244</span>*x^<span class=\"number\">628</span> + <span class=\"number\">253349999</span>*x^<span class=\"number\">627</span> + <span class=\"number\">1051279816</span>*x^<span class=\"number\">626</span> + <span class=\"number\">1079507344</span>*x^<span class=\"number\">625</span> + <span class=\"number\">864605458</span>*x^<span class=\"number\">624</span> + <span class=\"number\">1100098300</span>*x^<span class=\"number\">623</span> + <span class=\"number\">323233106</span>*x^<span class=\"number\">622</span> + <span class=\"number\">1070769430</span>*x^<span class=\"number\">621</span> + <span class=\"number\">1048471132</span>*x^<span class=\"number\">620</span> + <span class=\"number\">23281664</span>*x^<span class=\"number\">619</span> + <span class=\"number\">1099148878</span>*x^<span class=\"number\">618</span> + <span class=\"number\">812556000</span>*x^<span class=\"number\">617</span> + <span class=\"number\">452606567</span>*x^<span class=\"number\">616</span> + <span class=\"number\">892217880</span>*x^<span class=\"number\">615</span> + <span class=\"number\">741556204</span>*x^<span class=\"number\">614</span> + <span class=\"number\">37168552</span>*x^<span class=\"number\">613</span> + <span class=\"number\">286980867</span>*x^<span class=\"number\">612</span> + <span class=\"number\">1125383508</span>*x^<span class=\"number\">611</span> + <span class=\"number\">782814488</span>*x^<span class=\"number\">610</span> + <span class=\"number\">1214851511</span>*x^<span class=\"number\">609</span> + <span class=\"number\">270577673</span>*x^<span class=\"number\">608</span> + <span class=\"number\">364433480</span>*x^<span class=\"number\">607</span> + <span class=\"number\">825553809</span>*x^<span class=\"number\">606</span> + <span class=\"number\">589475297</span>*x^<span class=\"number\">605</span> + <span class=\"number\">293114041</span>*x^<span class=\"number\">604</span> + <span class=\"number\">1115978872</span>*x^<span class=\"number\">603</span> + <span class=\"number\">21831218</span>*x^<span class=\"number\">602</span> + <span class=\"number\">856821602</span>*x^<span class=\"number\">601</span> + <span class=\"number\">213782489</span>*x^<span class=\"number\">600</span> + <span class=\"number\">287159884</span>*x^<span class=\"number\">599</span> + <span class=\"number\">1015101950</span>*x^<span class=\"number\">598</span> + <span class=\"number\">494211644</span>*x^<span class=\"number\">597</span> + <span class=\"number\">38143731</span>*x^<span class=\"number\">596</span> + <span class=\"number\">882805771</span>*x^<span class=\"number\">595</span> + <span class=\"number\">721674528</span>*x^<span class=\"number\">594</span> + <span class=\"number\">120092153</span>*x^<span class=\"number\">593</span> + <span class=\"number\">636819567</span>*x^<span class=\"number\">592</span> + <span class=\"number\">365557574</span>*x^<span class=\"number\">591</span> + <span class=\"number\">619653423</span>*x^<span class=\"number\">590</span> + <span class=\"number\">1207892829</span>*x^<span class=\"number\">589</span> + <span class=\"number\">971282528</span>*x^<span class=\"number\">588</span> + <span class=\"number\">379459809</span>*x^<span class=\"number\">587</span> + <span class=\"number\">507124241</span>*x^<span class=\"number\">586</span> + <span class=\"number\">1050378769</span>*x^<span class=\"number\">585</span> + <span class=\"number\">113715629</span>*x^<span class=\"number\">584</span> + <span class=\"number\">841835564</span>*x^<span class=\"number\">583</span> + <span class=\"number\">1055649818</span>*x^<span class=\"number\">582</span> + <span class=\"number\">904319486</span>*x^<span class=\"number\">581</span> + <span class=\"number\">83232231</span>*x^<span class=\"number\">580</span> + <span class=\"number\">282044435</span>*x^<span class=\"number\">579</span> + <span class=\"number\">11563226</span>*x^<span class=\"number\">578</span> + <span class=\"number\">283283452</span>*x^<span class=\"number\">577</span> + <span class=\"number\">515932154</span>*x^<span class=\"number\">576</span> + <span class=\"number\">415242679</span>*x^<span class=\"number\">575</span> + <span class=\"number\">686396058</span>*x^<span class=\"number\">574</span> + <span class=\"number\">414011723</span>*x^<span class=\"number\">573</span> + <span class=\"number\">22692318</span>*x^<span class=\"number\">572</span> + <span class=\"number\">593039855</span>*x^<span class=\"number\">571</span> + <span class=\"number\">42054428</span>*x^<span class=\"number\">570</span> + <span class=\"number\">242713788</span>*x^<span class=\"number\">569</span> + <span class=\"number\">756543053</span>*x^<span class=\"number\">568</span> + <span class=\"number\">297264974</span>*x^<span class=\"number\">567</span> + <span class=\"number\">656668981</span>*x^<span class=\"number\">566</span> + <span class=\"number\">103185189</span>*x^<span class=\"number\">565</span> + <span class=\"number\">279211827</span>*x^<span class=\"number\">564</span> + <span class=\"number\">66472175</span>*x^<span class=\"number\">563</span> + <span class=\"number\">221289056</span>*x^<span class=\"number\">562</span> + <span class=\"number\">418547255</span>*x^<span class=\"number\">561</span> + <span class=\"number\">587378319</span>*x^<span class=\"number\">560</span> + <span class=\"number\">781217899</span>*x^<span class=\"number\">559</span> + <span class=\"number\">828907515</span>*x^<span class=\"number\">558</span> + <span class=\"number\">1026785730</span>*x^<span class=\"number\">557</span> + <span class=\"number\">936576598</span>*x^<span class=\"number\">556</span> + <span class=\"number\">914519864</span>*x^<span class=\"number\">555</span> + <span class=\"number\">458326840</span>*x^<span class=\"number\">554</span> + <span class=\"number\">846364356</span>*x^<span class=\"number\">553</span> + <span class=\"number\">1048948157</span>*x^<span class=\"number\">552</span> + <span class=\"number\">276890468</span>*x^<span class=\"number\">551</span> + <span class=\"number\">211463242</span>*x^<span class=\"number\">550</span> + <span class=\"number\">611009955</span>*x^<span class=\"number\">549</span> + <span class=\"number\">41350370</span>*x^<span class=\"number\">548</span> + <span class=\"number\">1120260432</span>*x^<span class=\"number\">547</span> + <span class=\"number\">1217213406</span>*x^<span class=\"number\">546</span> + <span class=\"number\">1096884636</span>*x^<span class=\"number\">545</span> + <span class=\"number\">107298827</span>*x^<span class=\"number\">544</span> + <span class=\"number\">556646889</span>*x^<span class=\"number\">543</span> + <span class=\"number\">514714957</span>*x^<span class=\"number\">542</span> + <span class=\"number\">592531623</span>*x^<span class=\"number\">541</span> + <span class=\"number\">1185635127</span>*x^<span class=\"number\">540</span> + <span class=\"number\">866796164</span>*x^<span class=\"number\">539</span> + <span class=\"number\">1199009440</span>*x^<span class=\"number\">538</span> + <span class=\"number\">760543377</span>*x^<span class=\"number\">537</span> + <span class=\"number\">135043128</span>*x^<span class=\"number\">536</span> + <span class=\"number\">1184521976</span>*x^<span class=\"number\">535</span> + <span class=\"number\">53368352</span>*x^<span class=\"number\">534</span> + <span class=\"number\">614063947</span>*x^<span class=\"number\">533</span> + <span class=\"number\">117184488</span>*x^<span class=\"number\">532</span> + <span class=\"number\">1090625549</span>*x^<span class=\"number\">531</span> + <span class=\"number\">928160285</span>*x^<span class=\"number\">530</span> + <span class=\"number\">1065640157</span>*x^<span class=\"number\">529</span> + <span class=\"number\">307397590</span>*x^<span class=\"number\">528</span> + <span class=\"number\">383318068</span>*x^<span class=\"number\">527</span> + <span class=\"number\">890835908</span>*x^<span class=\"number\">526</span> + <span class=\"number\">416986540</span>*x^<span class=\"number\">525</span> + <span class=\"number\">222852700</span>*x^<span class=\"number\">524</span> + <span class=\"number\">965323537</span>*x^<span class=\"number\">523</span> + <span class=\"number\">151764017</span>*x^<span class=\"number\">522</span> + <span class=\"number\">193722745</span>*x^<span class=\"number\">521</span> + <span class=\"number\">439803983</span>*x^<span class=\"number\">520</span> + <span class=\"number\">942882901</span>*x^<span class=\"number\">519</span> + <span class=\"number\">56286764</span>*x^<span class=\"number\">518</span> + <span class=\"number\">824204572</span>*x^<span class=\"number\">517</span> + <span class=\"number\">478793274</span>*x^<span class=\"number\">516</span> + <span class=\"number\">183238303</span>*x^<span class=\"number\">515</span> + <span class=\"number\">922253103</span>*x^<span class=\"number\">514</span> + <span class=\"number\">5444136</span>*x^<span class=\"number\">513</span> + <span class=\"number\">402856270</span>*x^<span class=\"number\">512</span> + <span class=\"number\">508652113</span>*x^<span class=\"number\">511</span> + <span class=\"number\">898341402</span>*x^<span class=\"number\">510</span> + <span class=\"number\">56743140</span>*x^<span class=\"number\">509</span> + <span class=\"number\">179078829</span>*x^<span class=\"number\">508</span> + <span class=\"number\">360574641</span>*x^<span class=\"number\">507</span> + <span class=\"number\">691533190</span>*x^<span class=\"number\">506</span> + <span class=\"number\">982373838</span>*x^<span class=\"number\">505</span> + <span class=\"number\">719429684</span>*x^<span class=\"number\">504</span> + <span class=\"number\">962339948</span>*x^<span class=\"number\">503</span> + <span class=\"number\">1097706834</span>*x^<span class=\"number\">502</span> + <span class=\"number\">682588935</span>*x^<span class=\"number\">501</span> + <span class=\"number\">1193566532</span>*x^<span class=\"number\">500</span> + <span class=\"number\">1140505780</span>*x^<span class=\"number\">499</span> + <span class=\"number\">1167874911</span>*x^<span class=\"number\">498</span> + <span class=\"number\">669408623</span>*x^<span class=\"number\">497</span> + <span class=\"number\">15348570</span>*x^<span class=\"number\">496</span> + <span class=\"number\">896129486</span>*x^<span class=\"number\">495</span> + <span class=\"number\">100671957</span>*x^<span class=\"number\">494</span> + <span class=\"number\">1015786650</span>*x^<span class=\"number\">493</span> + <span class=\"number\">605094306</span>*x^<span class=\"number\">492</span> + <span class=\"number\">704959137</span>*x^<span class=\"number\">491</span> + <span class=\"number\">503877361</span>*x^<span class=\"number\">490</span> + <span class=\"number\">546763047</span>*x^<span class=\"number\">489</span> + <span class=\"number\">281625173</span>*x^<span class=\"number\">488</span> + <span class=\"number\">874599768</span>*x^<span class=\"number\">487</span> + <span class=\"number\">187483443</span>*x^<span class=\"number\">486</span> + <span class=\"number\">791213383</span>*x^<span class=\"number\">485</span> + <span class=\"number\">670376251</span>*x^<span class=\"number\">484</span> + <span class=\"number\">484751013</span>*x^<span class=\"number\">483</span> + <span class=\"number\">519454749</span>*x^<span class=\"number\">482</span> + <span class=\"number\">898655062</span>*x^<span class=\"number\">481</span> + <span class=\"number\">1088862155</span>*x^<span class=\"number\">480</span> + <span class=\"number\">843442957</span>*x^<span class=\"number\">479</span> + <span class=\"number\">429341712</span>*x^<span class=\"number\">478</span> + <span class=\"number\">869408179</span>*x^<span class=\"number\">477</span> + <span class=\"number\">921648096</span>*x^<span class=\"number\">476</span> + <span class=\"number\">526019939</span>*x^<span class=\"number\">475</span> + <span class=\"number\">856290375</span>*x^<span class=\"number\">474</span> + <span class=\"number\">531710459</span>*x^<span class=\"number\">473</span> + <span class=\"number\">1135323038</span>*x^<span class=\"number\">472</span> + <span class=\"number\">222776023</span>*x^<span class=\"number\">471</span> + <span class=\"number\">223826994</span>*x^<span class=\"number\">470</span> + <span class=\"number\">782612384</span>*x^<span class=\"number\">469</span> + <span class=\"number\">208579370</span>*x^<span class=\"number\">468</span> + <span class=\"number\">809908930</span>*x^<span class=\"number\">467</span> + <span class=\"number\">802818642</span>*x^<span class=\"number\">466</span> + <span class=\"number\">1182584545</span>*x^<span class=\"number\">465</span> + <span class=\"number\">245518705</span>*x^<span class=\"number\">464</span> + <span class=\"number\">114792460</span>*x^<span class=\"number\">463</span> + <span class=\"number\">646248449</span>*x^<span class=\"number\">462</span> + <span class=\"number\">63969962</span>*x^<span class=\"number\">461</span> + <span class=\"number\">761908644</span>*x^<span class=\"number\">460</span> + <span class=\"number\">523665668</span>*x^<span class=\"number\">459</span> + <span class=\"number\">1131060959</span>*x^<span class=\"number\">458</span> + <span class=\"number\">507746193</span>*x^<span class=\"number\">457</span> + <span class=\"number\">215968166</span>*x^<span class=\"number\">456</span> + <span class=\"number\">186113215</span>*x^<span class=\"number\">455</span> + <span class=\"number\">1117740378</span>*x^<span class=\"number\">454</span> + <span class=\"number\">649175082</span>*x^<span class=\"number\">453</span> + <span class=\"number\">396834257</span>*x^<span class=\"number\">452</span> + <span class=\"number\">274002774</span>*x^<span class=\"number\">451</span> + <span class=\"number\">626055138</span>*x^<span class=\"number\">450</span> + <span class=\"number\">924423066</span>*x^<span class=\"number\">449</span> + <span class=\"number\">81357715</span>*x^<span class=\"number\">448</span> + <span class=\"number\">1042994674</span>*x^<span class=\"number\">447</span> + <span class=\"number\">380053163</span>*x^<span class=\"number\">446</span> + <span class=\"number\">687766657</span>*x^<span class=\"number\">445</span> + <span class=\"number\">414805559</span>*x^<span class=\"number\">444</span> + <span class=\"number\">1118153385</span>*x^<span class=\"number\">443</span> + <span class=\"number\">1196507975</span>*x^<span class=\"number\">442</span> + <span class=\"number\">223759358</span>*x^<span class=\"number\">441</span> + <span class=\"number\">808836890</span>*x^<span class=\"number\">440</span> + <span class=\"number\">558230978</span>*x^<span class=\"number\">439</span> + <span class=\"number\">470920831</span>*x^<span class=\"number\">438</span> + <span class=\"number\">313868031</span>*x^<span class=\"number\">437</span> + <span class=\"number\">696317665</span>*x^<span class=\"number\">436</span> + <span class=\"number\">38725962</span>*x^<span class=\"number\">435</span> + <span class=\"number\">722983488</span>*x^<span class=\"number\">434</span> + <span class=\"number\">982704221</span>*x^<span class=\"number\">433</span> + <span class=\"number\">931470025</span>*x^<span class=\"number\">432</span> + <span class=\"number\">658261117</span>*x^<span class=\"number\">431</span> + <span class=\"number\">1043739465</span>*x^<span class=\"number\">430</span> + <span class=\"number\">422603501</span>*x^<span class=\"number\">429</span> + <span class=\"number\">879856656</span>*x^<span class=\"number\">428</span> + <span class=\"number\">977082068</span>*x^<span class=\"number\">427</span> + <span class=\"number\">593021461</span>*x^<span class=\"number\">426</span> + <span class=\"number\">955543544</span>*x^<span class=\"number\">425</span> + <span class=\"number\">194004912</span>*x^<span class=\"number\">424</span> + <span class=\"number\">1057355064</span>*x^<span class=\"number\">423</span> + <span class=\"number\">1153279801</span>*x^<span class=\"number\">422</span> + <span class=\"number\">1104874965</span>*x^<span class=\"number\">421</span> + <span class=\"number\">1157109085</span>*x^<span class=\"number\">420</span> + <span class=\"number\">54358054</span>*x^<span class=\"number\">419</span> + <span class=\"number\">802241073</span>*x^<span class=\"number\">418</span> + <span class=\"number\">489376522</span>*x^<span class=\"number\">417</span> + <span class=\"number\">250441773</span>*x^<span class=\"number\">416</span> + <span class=\"number\">740903923</span>*x^<span class=\"number\">415</span> + <span class=\"number\">81493461</span>*x^<span class=\"number\">414</span> + <span class=\"number\">966046559</span>*x^<span class=\"number\">413</span> + <span class=\"number\">295086523</span>*x^<span class=\"number\">412</span> + <span class=\"number\">1192114766</span>*x^<span class=\"number\">411</span> + <span class=\"number\">1186654005</span>*x^<span class=\"number\">410</span> + <span class=\"number\">768853461</span>*x^<span class=\"number\">409</span> + <span class=\"number\">302013033</span>*x^<span class=\"number\">408</span> + <span class=\"number\">1127093874</span>*x^<span class=\"number\">407</span> + <span class=\"number\">401944628</span>*x^<span class=\"number\">406</span> + <span class=\"number\">463364841</span>*x^<span class=\"number\">405</span> + <span class=\"number\">277324527</span>*x^<span class=\"number\">404</span> + <span class=\"number\">357826211</span>*x^<span class=\"number\">403</span> + <span class=\"number\">302642912</span>*x^<span class=\"number\">402</span> + <span class=\"number\">785232813</span>*x^<span class=\"number\">401</span> + <span class=\"number\">1155455395</span>*x^<span class=\"number\">400</span> + <span class=\"number\">240939622</span>*x^<span class=\"number\">399</span> + <span class=\"number\">1090741169</span>*x^<span class=\"number\">398</span> + <span class=\"number\">941697407</span>*x^<span class=\"number\">397</span> + <span class=\"number\">1108935255</span>*x^<span class=\"number\">396</span> + <span class=\"number\">63027943</span>*x^<span class=\"number\">395</span> + <span class=\"number\">415750779</span>*x^<span class=\"number\">394</span> + <span class=\"number\">36046273</span>*x^<span class=\"number\">393</span> + <span class=\"number\">172429619</span>*x^<span class=\"number\">392</span> + <span class=\"number\">563533800</span>*x^<span class=\"number\">391</span> + <span class=\"number\">961503349</span>*x^<span class=\"number\">390</span> + <span class=\"number\">356454474</span>*x^<span class=\"number\">389</span> + <span class=\"number\">586712431</span>*x^<span class=\"number\">388</span> + <span class=\"number\">572728001</span>*x^<span class=\"number\">387</span> + <span class=\"number\">670855384</span>*x^<span class=\"number\">386</span> + <span class=\"number\">268877633</span>*x^<span class=\"number\">385</span> + <span class=\"number\">51139525</span>*x^<span class=\"number\">384</span> + <span class=\"number\">806328542</span>*x^<span class=\"number\">383</span> + <span class=\"number\">790061093</span>*x^<span class=\"number\">382</span> + <span class=\"number\">140256246</span>*x^<span class=\"number\">381</span> + <span class=\"number\">430118720</span>*x^<span class=\"number\">380</span> + <span class=\"number\">924612224</span>*x^<span class=\"number\">379</span> + <span class=\"number\">923573107</span>*x^<span class=\"number\">378</span> + <span class=\"number\">1124645882</span>*x^<span class=\"number\">377</span> + <span class=\"number\">1044890409</span>*x^<span class=\"number\">376</span> + <span class=\"number\">509180566</span>*x^<span class=\"number\">375</span> + <span class=\"number\">371227114</span>*x^<span class=\"number\">374</span> + <span class=\"number\">161843486</span>*x^<span class=\"number\">373</span> + <span class=\"number\">296514161</span>*x^<span class=\"number\">372</span> + <span class=\"number\">454272518</span>*x^<span class=\"number\">371</span> + <span class=\"number\">755779732</span>*x^<span class=\"number\">370</span> + <span class=\"number\">295567281</span>*x^<span class=\"number\">369</span> + <span class=\"number\">1063635155</span>*x^<span class=\"number\">368</span> + <span class=\"number\">46603670</span>*x^<span class=\"number\">367</span> + <span class=\"number\">112353112</span>*x^<span class=\"number\">366</span> + <span class=\"number\">571920305</span>*x^<span class=\"number\">365</span> + <span class=\"number\">484055586</span>*x^<span class=\"number\">364</span> + <span class=\"number\">148075787</span>*x^<span class=\"number\">363</span> + <span class=\"number\">700140701</span>*x^<span class=\"number\">362</span> + <span class=\"number\">922814151</span>*x^<span class=\"number\">361</span> + <span class=\"number\">198283677</span>*x^<span class=\"number\">360</span> + <span class=\"number\">806078101</span>*x^<span class=\"number\">359</span> + <span class=\"number\">1218701262</span>*x^<span class=\"number\">358</span> + <span class=\"number\">679274064</span>*x^<span class=\"number\">357</span> + <span class=\"number\">408382456</span>*x^<span class=\"number\">356</span> + <span class=\"number\">284971608</span>*x^<span class=\"number\">355</span> + <span class=\"number\">1072737570</span>*x^<span class=\"number\">354</span> + <span class=\"number\">999420946</span>*x^<span class=\"number\">353</span> + <span class=\"number\">704897365</span>*x^<span class=\"number\">352</span> + <span class=\"number\">1147239838</span>*x^<span class=\"number\">351</span> + <span class=\"number\">1148707218</span>*x^<span class=\"number\">350</span> + <span class=\"number\">119677974</span>*x^<span class=\"number\">349</span> + <span class=\"number\">139766009</span>*x^<span class=\"number\">348</span> + <span class=\"number\">289899118</span>*x^<span class=\"number\">347</span> + <span class=\"number\">3099746</span>*x^<span class=\"number\">346</span> + <span class=\"number\">478334394</span>*x^<span class=\"number\">345</span> + <span class=\"number\">671867092</span>*x^<span class=\"number\">344</span> + <span class=\"number\">1123276962</span>*x^<span class=\"number\">343</span> + <span class=\"number\">1053910974</span>*x^<span class=\"number\">342</span> + <span class=\"number\">776016929</span>*x^<span class=\"number\">341</span> + <span class=\"number\">408840884</span>*x^<span class=\"number\">340</span> + <span class=\"number\">702734268</span>*x^<span class=\"number\">339</span> + <span class=\"number\">101137143</span>*x^<span class=\"number\">338</span> + <span class=\"number\">157330682</span>*x^<span class=\"number\">337</span> + <span class=\"number\">608473559</span>*x^<span class=\"number\">336</span> + <span class=\"number\">355406102</span>*x^<span class=\"number\">335</span> + <span class=\"number\">1189624142</span>*x^<span class=\"number\">334</span> + <span class=\"number\">87874850</span>*x^<span class=\"number\">333</span> + <span class=\"number\">1097033743</span>*x^<span class=\"number\">332</span> + <span class=\"number\">984835279</span>*x^<span class=\"number\">331</span> + <span class=\"number\">133446104</span>*x^<span class=\"number\">330</span> + <span class=\"number\">990221835</span>*x^<span class=\"number\">329</span> + <span class=\"number\">34152703</span>*x^<span class=\"number\">328</span> + <span class=\"number\">902602955</span>*x^<span class=\"number\">327</span> + <span class=\"number\">564227604</span>*x^<span class=\"number\">326</span> + <span class=\"number\">378045277</span>*x^<span class=\"number\">325</span> + <span class=\"number\">330935315</span>*x^<span class=\"number\">324</span> + <span class=\"number\">300442927</span>*x^<span class=\"number\">323</span> + <span class=\"number\">504016276</span>*x^<span class=\"number\">322</span> + <span class=\"number\">592727454</span>*x^<span class=\"number\">321</span> + <span class=\"number\">1075766200</span>*x^<span class=\"number\">320</span> + <span class=\"number\">718996149</span>*x^<span class=\"number\">319</span> + <span class=\"number\">823573424</span>*x^<span class=\"number\">318</span> + <span class=\"number\">834215705</span>*x^<span class=\"number\">317</span> + <span class=\"number\">430497892</span>*x^<span class=\"number\">316</span> + <span class=\"number\">879722938</span>*x^<span class=\"number\">315</span> + <span class=\"number\">968236501</span>*x^<span class=\"number\">314</span> + <span class=\"number\">262764692</span>*x^<span class=\"number\">313</span> + <span class=\"number\">37503817</span>*x^<span class=\"number\">312</span> + <span class=\"number\">607855810</span>*x^<span class=\"number\">311</span> + <span class=\"number\">1173289902</span>*x^<span class=\"number\">310</span> + <span class=\"number\">906609932</span>*x^<span class=\"number\">309</span> + <span class=\"number\">11948749</span>*x^<span class=\"number\">308</span> + <span class=\"number\">948969610</span>*x^<span class=\"number\">307</span> + <span class=\"number\">1130417155</span>*x^<span class=\"number\">306</span> + <span class=\"number\">892108695</span>*x^<span class=\"number\">305</span> + <span class=\"number\">1040897188</span>*x^<span class=\"number\">304</span> + <span class=\"number\">174698274</span>*x^<span class=\"number\">303</span> + <span class=\"number\">85414336</span>*x^<span class=\"number\">302</span> + <span class=\"number\">758730292</span>*x^<span class=\"number\">301</span> + <span class=\"number\">615781943</span>*x^<span class=\"number\">300</span> + <span class=\"number\">1215130735</span>*x^<span class=\"number\">299</span> + <span class=\"number\">1168693743</span>*x^<span class=\"number\">298</span> + <span class=\"number\">1070287857</span>*x^<span class=\"number\">297</span> + <span class=\"number\">501559848</span>*x^<span class=\"number\">296</span> + <span class=\"number\">485147924</span>*x^<span class=\"number\">295</span> + <span class=\"number\">1218893131</span>*x^<span class=\"number\">294</span> + <span class=\"number\">923876087</span>*x^<span class=\"number\">293</span> + <span class=\"number\">565056561</span>*x^<span class=\"number\">292</span> + <span class=\"number\">282754375</span>*x^<span class=\"number\">291</span> + <span class=\"number\">794028720</span>*x^<span class=\"number\">290</span> + <span class=\"number\">288419549</span>*x^<span class=\"number\">289</span> + <span class=\"number\">688387454</span>*x^<span class=\"number\">288</span> + <span class=\"number\">40339086</span>*x^<span class=\"number\">287</span> + <span class=\"number\">659115548</span>*x^<span class=\"number\">286</span> + <span class=\"number\">614342861</span>*x^<span class=\"number\">285</span> + <span class=\"number\">391568544</span>*x^<span class=\"number\">284</span> + <span class=\"number\">464738754</span>*x^<span class=\"number\">283</span> + <span class=\"number\">28669498</span>*x^<span class=\"number\">282</span> + <span class=\"number\">1115640335</span>*x^<span class=\"number\">281</span> + <span class=\"number\">870635325</span>*x^<span class=\"number\">280</span> + <span class=\"number\">126237247</span>*x^<span class=\"number\">279</span> + <span class=\"number\">1111165998</span>*x^<span class=\"number\">278</span> + <span class=\"number\">205027579</span>*x^<span class=\"number\">277</span> + <span class=\"number\">911218811</span>*x^<span class=\"number\">276</span> + <span class=\"number\">208748481</span>*x^<span class=\"number\">275</span> + <span class=\"number\">725176545</span>*x^<span class=\"number\">274</span> + <span class=\"number\">765151044</span>*x^<span class=\"number\">273</span> + <span class=\"number\">939495648</span>*x^<span class=\"number\">272</span> + <span class=\"number\">550038893</span>*x^<span class=\"number\">271</span> + <span class=\"number\">905707993</span>*x^<span class=\"number\">270</span> + <span class=\"number\">267107699</span>*x^<span class=\"number\">269</span> + <span class=\"number\">477779883</span>*x^<span class=\"number\">268</span> + <span class=\"number\">251985659</span>*x^<span class=\"number\">267</span> + <span class=\"number\">754082836</span>*x^<span class=\"number\">266</span> + <span class=\"number\">159569451</span>*x^<span class=\"number\">265</span> + <span class=\"number\">781616103</span>*x^<span class=\"number\">264</span> + <span class=\"number\">1098961576</span>*x^<span class=\"number\">263</span> + <span class=\"number\">1139687026</span>*x^<span class=\"number\">262</span> + <span class=\"number\">473401848</span>*x^<span class=\"number\">261</span> + <span class=\"number\">623689501</span>*x^<span class=\"number\">260</span> + <span class=\"number\">1012676202</span>*x^<span class=\"number\">259</span> + <span class=\"number\">76777202</span>*x^<span class=\"number\">258</span> + <span class=\"number\">170602576</span>*x^<span class=\"number\">257</span> + <span class=\"number\">266093330</span>*x^<span class=\"number\">256</span> + <span class=\"number\">732274753</span>*x^<span class=\"number\">255</span> + <span class=\"number\">193219366</span>*x^<span class=\"number\">254</span> + <span class=\"number\">610602682</span>*x^<span class=\"number\">253</span> + <span class=\"number\">749761392</span>*x^<span class=\"number\">252</span> + <span class=\"number\">536911921</span>*x^<span class=\"number\">251</span> + <span class=\"number\">1052883954</span>*x^<span class=\"number\">250</span> + <span class=\"number\">1139729422</span>*x^<span class=\"number\">249</span> + <span class=\"number\">617278363</span>*x^<span class=\"number\">248</span> + <span class=\"number\">603450863</span>*x^<span class=\"number\">247</span> + <span class=\"number\">877968049</span>*x^<span class=\"number\">246</span> + <span class=\"number\">1078543204</span>*x^<span class=\"number\">245</span> + <span class=\"number\">441578327</span>*x^<span class=\"number\">244</span> + <span class=\"number\">821469144</span>*x^<span class=\"number\">243</span> + <span class=\"number\">1083268726</span>*x^<span class=\"number\">242</span> + <span class=\"number\">592074734</span>*x^<span class=\"number\">241</span> + <span class=\"number\">431251183</span>*x^<span class=\"number\">240</span> + <span class=\"number\">1151073027</span>*x^<span class=\"number\">239</span> + <span class=\"number\">596034003</span>*x^<span class=\"number\">238</span> + <span class=\"number\">507176703</span>*x^<span class=\"number\">237</span> + <span class=\"number\">638155464</span>*x^<span class=\"number\">236</span> + <span class=\"number\">820097610</span>*x^<span class=\"number\">235</span> + <span class=\"number\">69713965</span>*x^<span class=\"number\">234</span> + <span class=\"number\">111089281</span>*x^<span class=\"number\">233</span> + <span class=\"number\">403306683</span>*x^<span class=\"number\">232</span> + <span class=\"number\">417322569</span>*x^<span class=\"number\">231</span> + <span class=\"number\">510992488</span>*x^<span class=\"number\">230</span> + <span class=\"number\">406068742</span>*x^<span class=\"number\">229</span> + <span class=\"number\">487323397</span>*x^<span class=\"number\">228</span> + <span class=\"number\">1105866147</span>*x^<span class=\"number\">227</span> + <span class=\"number\">126043214</span>*x^<span class=\"number\">226</span> + <span class=\"number\">565379393</span>*x^<span class=\"number\">225</span> + <span class=\"number\">774566507</span>*x^<span class=\"number\">224</span> + <span class=\"number\">94477834</span>*x^<span class=\"number\">223</span> + <span class=\"number\">301787901</span>*x^<span class=\"number\">222</span> + <span class=\"number\">891557978</span>*x^<span class=\"number\">221</span> + <span class=\"number\">246179873</span>*x^<span class=\"number\">220</span> + <span class=\"number\">76065360</span>*x^<span class=\"number\">219</span> + <span class=\"number\">632831219</span>*x^<span class=\"number\">218</span> + <span class=\"number\">967852970</span>*x^<span class=\"number\">217</span> + <span class=\"number\">982932236</span>*x^<span class=\"number\">216</span> + <span class=\"number\">457056482</span>*x^<span class=\"number\">215</span> + <span class=\"number\">611696056</span>*x^<span class=\"number\">214</span> + <span class=\"number\">187879254</span>*x^<span class=\"number\">213</span> + <span class=\"number\">919970751</span>*x^<span class=\"number\">212</span> + <span class=\"number\">726626422</span>*x^<span class=\"number\">211</span> + <span class=\"number\">744906999</span>*x^<span class=\"number\">210</span> + <span class=\"number\">514152204</span>*x^<span class=\"number\">209</span> + <span class=\"number\">400846913</span>*x^<span class=\"number\">208</span> + <span class=\"number\">1057213516</span>*x^<span class=\"number\">207</span> + <span class=\"number\">458393393</span>*x^<span class=\"number\">206</span> + <span class=\"number\">39867352</span>*x^<span class=\"number\">205</span> + <span class=\"number\">482474421</span>*x^<span class=\"number\">204</span> + <span class=\"number\">1017159775</span>*x^<span class=\"number\">203</span> + <span class=\"number\">1127386440</span>*x^<span class=\"number\">202</span> + <span class=\"number\">186890818</span>*x^<span class=\"number\">201</span> + <span class=\"number\">297371952</span>*x^<span class=\"number\">200</span> + <span class=\"number\">827010510</span>*x^<span class=\"number\">199</span> + <span class=\"number\">457757189</span>*x^<span class=\"number\">198</span> + <span class=\"number\">120047360</span>*x^<span class=\"number\">197</span> + <span class=\"number\">403406161</span>*x^<span class=\"number\">196</span> + <span class=\"number\">561776540</span>*x^<span class=\"number\">195</span> + <span class=\"number\">269984973</span>*x^<span class=\"number\">194</span> + <span class=\"number\">1105865523</span>*x^<span class=\"number\">193</span> + <span class=\"number\">356682370</span>*x^<span class=\"number\">192</span> + <span class=\"number\">521018201</span>*x^<span class=\"number\">191</span> + <span class=\"number\">714326305</span>*x^<span class=\"number\">190</span> + <span class=\"number\">230112489</span>*x^<span class=\"number\">189</span> + <span class=\"number\">468954949</span>*x^<span class=\"number\">188</span> + <span class=\"number\">428412182</span>*x^<span class=\"number\">187</span> + <span class=\"number\">418097923</span>*x^<span class=\"number\">186</span> + <span class=\"number\">648421330</span>*x^<span class=\"number\">185</span> + <span class=\"number\">119412602</span>*x^<span class=\"number\">184</span> + <span class=\"number\">1029175202</span>*x^<span class=\"number\">183</span> + <span class=\"number\">961854350</span>*x^<span class=\"number\">182</span> + <span class=\"number\">359274957</span>*x^<span class=\"number\">181</span> + <span class=\"number\">918516748</span>*x^<span class=\"number\">180</span> + <span class=\"number\">393392054</span>*x^<span class=\"number\">179</span> + <span class=\"number\">998769881</span>*x^<span class=\"number\">178</span> + <span class=\"number\">713880369</span>*x^<span class=\"number\">177</span> + <span class=\"number\">23918875</span>*x^<span class=\"number\">176</span> + <span class=\"number\">19140072</span>*x^<span class=\"number\">175</span> + <span class=\"number\">296443203</span>*x^<span class=\"number\">174</span> + <span class=\"number\">1036511543</span>*x^<span class=\"number\">173</span> + <span class=\"number\">208417465</span>*x^<span class=\"number\">172</span> + <span class=\"number\">856221174</span>*x^<span class=\"number\">171</span> + <span class=\"number\">724608949</span>*x^<span class=\"number\">170</span> + <span class=\"number\">1148614286</span>*x^<span class=\"number\">169</span> + <span class=\"number\">605394185</span>*x^<span class=\"number\">168</span> + <span class=\"number\">1037184954</span>*x^<span class=\"number\">167</span> + <span class=\"number\">1149508482</span>*x^<span class=\"number\">166</span> + <span class=\"number\">748219008</span>*x^<span class=\"number\">165</span> + <span class=\"number\">762595570</span>*x^<span class=\"number\">164</span> + <span class=\"number\">240812860</span>*x^<span class=\"number\">163</span> + <span class=\"number\">221590855</span>*x^<span class=\"number\">162</span> + <span class=\"number\">921277317</span>*x^<span class=\"number\">161</span> + <span class=\"number\">666749995</span>*x^<span class=\"number\">160</span> + <span class=\"number\">270085731</span>*x^<span class=\"number\">159</span> + <span class=\"number\">719780654</span>*x^<span class=\"number\">158</span> + <span class=\"number\">1023109552</span>*x^<span class=\"number\">157</span> + <span class=\"number\">948736441</span>*x^<span class=\"number\">156</span> + <span class=\"number\">942460534</span>*x^<span class=\"number\">155</span> + <span class=\"number\">1190076672</span>*x^<span class=\"number\">154</span> + <span class=\"number\">298412436</span>*x^<span class=\"number\">153</span> + <span class=\"number\">146236637</span>*x^<span class=\"number\">152</span> + <span class=\"number\">136974417</span>*x^<span class=\"number\">151</span> + <span class=\"number\">247369427</span>*x^<span class=\"number\">150</span> + <span class=\"number\">1164600849</span>*x^<span class=\"number\">149</span> + <span class=\"number\">80725190</span>*x^<span class=\"number\">148</span> + <span class=\"number\">563971590</span>*x^<span class=\"number\">147</span> + <span class=\"number\">838975230</span>*x^<span class=\"number\">146</span> + <span class=\"number\">605884308</span>*x^<span class=\"number\">145</span> + <span class=\"number\">695738052</span>*x^<span class=\"number\">144</span> + <span class=\"number\">457993644</span>*x^<span class=\"number\">143</span> + <span class=\"number\">608089160</span>*x^<span class=\"number\">142</span> + <span class=\"number\">279768415</span>*x^<span class=\"number\">141</span> + <span class=\"number\">167776427</span>*x^<span class=\"number\">140</span> + <span class=\"number\">99830319</span>*x^<span class=\"number\">139</span> + <span class=\"number\">724761513</span>*x^<span class=\"number\">138</span> + <span class=\"number\">838344856</span>*x^<span class=\"number\">137</span> + <span class=\"number\">349705095</span>*x^<span class=\"number\">136</span> + <span class=\"number\">700591961</span>*x^<span class=\"number\">135</span> + <span class=\"number\">495192008</span>*x^<span class=\"number\">134</span> + <span class=\"number\">166834844</span>*x^<span class=\"number\">133</span> + <span class=\"number\">829383641</span>*x^<span class=\"number\">132</span> + <span class=\"number\">689577635</span>*x^<span class=\"number\">131</span> + <span class=\"number\">1063098370</span>*x^<span class=\"number\">130</span> + <span class=\"number\">1217658142</span>*x^<span class=\"number\">129</span> + <span class=\"number\">210005674</span>*x^<span class=\"number\">128</span> + <span class=\"number\">709445493</span>*x^<span class=\"number\">127</span> + <span class=\"number\">890260692</span>*x^<span class=\"number\">126</span> + <span class=\"number\">11818873</span>*x^<span class=\"number\">125</span> + <span class=\"number\">356866298</span>*x^<span class=\"number\">124</span> + <span class=\"number\">657354178</span>*x^<span class=\"number\">123</span> + <span class=\"number\">1083325742</span>*x^<span class=\"number\">122</span> + <span class=\"number\">256937537</span>*x^<span class=\"number\">121</span> + <span class=\"number\">832141251</span>*x^<span class=\"number\">120</span> + <span class=\"number\">738779202</span>*x^<span class=\"number\">119</span> + <span class=\"number\">531375449</span>*x^<span class=\"number\">118</span> + <span class=\"number\">570407521</span>*x^<span class=\"number\">117</span> + <span class=\"number\">253499493</span>*x^<span class=\"number\">116</span> + <span class=\"number\">936295735</span>*x^<span class=\"number\">115</span> + <span class=\"number\">840539077</span>*x^<span class=\"number\">114</span> + <span class=\"number\">1108243632</span>*x^<span class=\"number\">113</span> + <span class=\"number\">518037787</span>*x^<span class=\"number\">112</span> + <span class=\"number\">512681158</span>*x^<span class=\"number\">111</span> + <span class=\"number\">659791034</span>*x^<span class=\"number\">110</span> + <span class=\"number\">615039004</span>*x^<span class=\"number\">109</span> + <span class=\"number\">6475754</span>*x^<span class=\"number\">108</span> + <span class=\"number\">112655504</span>*x^<span class=\"number\">107</span> + <span class=\"number\">135513268</span>*x^<span class=\"number\">106</span> + <span class=\"number\">814830817</span>*x^<span class=\"number\">105</span> + <span class=\"number\">312451349</span>*x^<span class=\"number\">104</span> + <span class=\"number\">459204360</span>*x^<span class=\"number\">103</span> + <span class=\"number\">536270797</span>*x^<span class=\"number\">102</span> + <span class=\"number\">487599107</span>*x^<span class=\"number\">101</span> + <span class=\"number\">995873996</span>*x^<span class=\"number\">100</span> + <span class=\"number\">947176358</span>*x^<span class=\"number\">99</span> + <span class=\"number\">161110841</span>*x^<span class=\"number\">98</span> + <span class=\"number\">1215850742</span>*x^<span class=\"number\">97</span> + <span class=\"number\">828031021</span>*x^<span class=\"number\">96</span> + <span class=\"number\">393857015</span>*x^<span class=\"number\">95</span> + <span class=\"number\">483165571</span>*x^<span class=\"number\">94</span> + <span class=\"number\">1169422374</span>*x^<span class=\"number\">93</span> + <span class=\"number\">185485308</span>*x^<span class=\"number\">92</span> + <span class=\"number\">1113820447</span>*x^<span class=\"number\">91</span> + <span class=\"number\">1217012548</span>*x^<span class=\"number\">90</span> + <span class=\"number\">591690262</span>*x^<span class=\"number\">89</span> + <span class=\"number\">230984245</span>*x^<span class=\"number\">88</span> + <span class=\"number\">1183186281</span>*x^<span class=\"number\">87</span> + <span class=\"number\">984746087</span>*x^<span class=\"number\">86</span> + <span class=\"number\">321334226</span>*x^<span class=\"number\">85</span> + <span class=\"number\">356396152</span>*x^<span class=\"number\">84</span> + <span class=\"number\">812358214</span>*x^<span class=\"number\">83</span> + <span class=\"number\">652862462</span>*x^<span class=\"number\">82</span> + <span class=\"number\">1159946831</span>*x^<span class=\"number\">81</span> + <span class=\"number\">1185692555</span>*x^<span class=\"number\">80</span> + <span class=\"number\">1101691161</span>*x^<span class=\"number\">79</span> + <span class=\"number\">1162783803</span>*x^<span class=\"number\">78</span> + <span class=\"number\">592033894</span>*x^<span class=\"number\">77</span> + <span class=\"number\">545367197</span>*x^<span class=\"number\">76</span> + <span class=\"number\">441688164</span>*x^<span class=\"number\">75</span> + <span class=\"number\">169491076</span>*x^<span class=\"number\">74</span> + <span class=\"number\">181297517</span>*x^<span class=\"number\">73</span> + <span class=\"number\">590332818</span>*x^<span class=\"number\">72</span> + <span class=\"number\">814337101</span>*x^<span class=\"number\">71</span> + <span class=\"number\">1148316386</span>*x^<span class=\"number\">70</span> + <span class=\"number\">700258144</span>*x^<span class=\"number\">69</span> + <span class=\"number\">719201877</span>*x^<span class=\"number\">68</span> + <span class=\"number\">1160695934</span>*x^<span class=\"number\">67</span> + <span class=\"number\">1186868159</span>*x^<span class=\"number\">66</span> + <span class=\"number\">508542038</span>*x^<span class=\"number\">65</span> + <span class=\"number\">1113702100</span>*x^<span class=\"number\">64</span> + <span class=\"number\">921032142</span>*x^<span class=\"number\">63</span> + <span class=\"number\">758636144</span>*x^<span class=\"number\">62</span> + <span class=\"number\">890540800</span>*x^<span class=\"number\">61</span> + <span class=\"number\">136808203</span>*x^<span class=\"number\">60</span> + <span class=\"number\">74886413</span>*x^<span class=\"number\">59</span> + <span class=\"number\">156077420</span>*x^<span class=\"number\">58</span> + <span class=\"number\">925473910</span>*x^<span class=\"number\">57</span> + <span class=\"number\">111404286</span>*x^<span class=\"number\">56</span> + <span class=\"number\">355116767</span>*x^<span class=\"number\">55</span> + <span class=\"number\">468038980</span>*x^<span class=\"number\">54</span> + <span class=\"number\">89708844</span>*x^<span class=\"number\">53</span> + <span class=\"number\">878616521</span>*x^<span class=\"number\">52</span> + <span class=\"number\">1154657871</span>*x^<span class=\"number\">51</span> + <span class=\"number\">677831135</span>*x^<span class=\"number\">50</span> + <span class=\"number\">903468800</span>*x^<span class=\"number\">49</span> + <span class=\"number\">890557208</span>*x^<span class=\"number\">48</span> + <span class=\"number\">1035114476</span>*x^<span class=\"number\">47</span> + <span class=\"number\">198189399</span>*x^<span class=\"number\">46</span> + <span class=\"number\">864375452</span>*x^<span class=\"number\">45</span> + <span class=\"number\">1164916963</span>*x^<span class=\"number\">44</span> + <span class=\"number\">929627324</span>*x^<span class=\"number\">43</span> + <span class=\"number\">418711325</span>*x^<span class=\"number\">42</span> + <span class=\"number\">97430691</span>*x^<span class=\"number\">41</span> + <span class=\"number\">1172413774</span>*x^<span class=\"number\">40</span> + <span class=\"number\">760600756</span>*x^<span class=\"number\">39</span> + <span class=\"number\">943281805</span>*x^<span class=\"number\">38</span> + <span class=\"number\">53033182</span>*x^<span class=\"number\">37</span> + <span class=\"number\">123566782</span>*x^<span class=\"number\">36</span> + <span class=\"number\">665472336</span>*x^<span class=\"number\">35</span> + <span class=\"number\">521103310</span>*x^<span class=\"number\">34</span> + <span class=\"number\">892876972</span>*x^<span class=\"number\">33</span> + <span class=\"number\">169828417</span>*x^<span class=\"number\">32</span> + <span class=\"number\">315862403</span>*x^<span class=\"number\">31</span> + <span class=\"number\">973295601</span>*x^<span class=\"number\">30</span> + <span class=\"number\">1036868940</span>*x^<span class=\"number\">29</span> + <span class=\"number\">469235131</span>*x^<span class=\"number\">28</span> + <span class=\"number\">1097609240</span>*x^<span class=\"number\">27</span> + <span class=\"number\">446027303</span>*x^<span class=\"number\">26</span> + <span class=\"number\">356219098</span>*x^<span class=\"number\">25</span> + <span class=\"number\">480790123</span>*x^<span class=\"number\">24</span> + <span class=\"number\">94742566</span>*x^<span class=\"number\">23</span> + <span class=\"number\">691728720</span>*x^<span class=\"number\">22</span> + <span class=\"number\">922852954</span>*x^<span class=\"number\">21</span> + <span class=\"number\">21648854</span>*x^<span class=\"number\">20</span> + <span class=\"number\">903452116</span>*x^<span class=\"number\">19</span> + <span class=\"number\">1043050543</span>*x^<span class=\"number\">18</span> + <span class=\"number\">867501915</span>*x^<span class=\"number\">17</span> + <span class=\"number\">402312961</span>*x^<span class=\"number\">16</span> + <span class=\"number\">772349320</span>*x^<span class=\"number\">15</span> + <span class=\"number\">806410607</span>*x^<span class=\"number\">14</span> + <span class=\"number\">573402289</span>*x^<span class=\"number\">13</span> + <span class=\"number\">103888540</span>*x^<span class=\"number\">12</span> + <span class=\"number\">147927873</span>*x^<span class=\"number\">11</span> + <span class=\"number\">1005161156</span>*x^<span class=\"number\">10</span> + <span class=\"number\">988774771</span>*x^<span class=\"number\">9</span> + <span class=\"number\">682875980</span>*x^<span class=\"number\">8</span> + <span class=\"number\">54946232</span>*x^<span class=\"number\">7</span> + <span class=\"number\">717143945</span>*x^<span class=\"number\">6</span> + <span class=\"number\">323577100</span>*x^<span class=\"number\">5</span> + <span class=\"number\">803064428</span>*x^<span class=\"number\">4</span> + <span class=\"number\">598462622</span>*x^<span class=\"number\">3</span> + <span class=\"number\">1110253556</span>*x^<span class=\"number\">2</span> + <span class=\"number\">764371182</span>*x + <span class=\"number\">634648371</span></span><br><span class=\"line\">b = <span class=\"number\">735531500</span>*x^<span class=\"number\">1023</span> + <span class=\"number\">684755229</span>*x^<span class=\"number\">1022</span> + <span class=\"number\">978579144</span>*x^<span class=\"number\">1021</span> + <span class=\"number\">560225565</span>*x^<span class=\"number\">1020</span> + <span class=\"number\">758090578</span>*x^<span class=\"number\">1019</span> + <span class=\"number\">367477932</span>*x^<span class=\"number\">1018</span> + <span class=\"number\">326779415</span>*x^<span class=\"number\">1017</span> + <span class=\"number\">26800946</span>*x^<span class=\"number\">1016</span> + <span class=\"number\">199017905</span>*x^<span class=\"number\">1015</span> + <span class=\"number\">1156874439</span>*x^<span class=\"number\">1014</span> + <span class=\"number\">673969262</span>*x^<span class=\"number\">1013</span> + <span class=\"number\">617169647</span>*x^<span class=\"number\">1012</span> + <span class=\"number\">462256026</span>*x^<span class=\"number\">1011</span> + <span class=\"number\">303059784</span>*x^<span class=\"number\">1010</span> + <span class=\"number\">663728970</span>*x^<span class=\"number\">1009</span> + <span class=\"number\">376865711</span>*x^<span class=\"number\">1008</span> + <span class=\"number\">830705685</span>*x^<span class=\"number\">1007</span> + <span class=\"number\">573964358</span>*x^<span class=\"number\">1006</span> + <span class=\"number\">1210202059</span>*x^<span class=\"number\">1005</span> + <span class=\"number\">269197755</span>*x^<span class=\"number\">1004</span> + <span class=\"number\">586236496</span>*x^<span class=\"number\">1003</span> + <span class=\"number\">621987820</span>*x^<span class=\"number\">1002</span> + <span class=\"number\">485567868</span>*x^<span class=\"number\">1001</span> + <span class=\"number\">305700227</span>*x^<span class=\"number\">1000</span> + <span class=\"number\">1052698462</span>*x^<span class=\"number\">999</span> + <span class=\"number\">86861550</span>*x^<span class=\"number\">998</span> + <span class=\"number\">44767901</span>*x^<span class=\"number\">997</span> + <span class=\"number\">410897986</span>*x^<span class=\"number\">996</span> + <span class=\"number\">212344404</span>*x^<span class=\"number\">995</span> + <span class=\"number\">336381747</span>*x^<span class=\"number\">994</span> + <span class=\"number\">398182335</span>*x^<span class=\"number\">993</span> + <span class=\"number\">660275371</span>*x^<span class=\"number\">992</span> + <span class=\"number\">52728322</span>*x^<span class=\"number\">991</span> + <span class=\"number\">1193103469</span>*x^<span class=\"number\">990</span> + <span class=\"number\">684295535</span>*x^<span class=\"number\">989</span> + <span class=\"number\">1029981794</span>*x^<span class=\"number\">988</span> + <span class=\"number\">1051866415</span>*x^<span class=\"number\">987</span> + <span class=\"number\">418681909</span>*x^<span class=\"number\">986</span> + <span class=\"number\">976794520</span>*x^<span class=\"number\">985</span> + <span class=\"number\">1180496804</span>*x^<span class=\"number\">984</span> + <span class=\"number\">438513041</span>*x^<span class=\"number\">983</span> + <span class=\"number\">822843942</span>*x^<span class=\"number\">982</span> + <span class=\"number\">1119264881</span>*x^<span class=\"number\">981</span> + <span class=\"number\">790873853</span>*x^<span class=\"number\">980</span> + <span class=\"number\">1146506838</span>*x^<span class=\"number\">979</span> + <span class=\"number\">27016797</span>*x^<span class=\"number\">978</span> + <span class=\"number\">1149126201</span>*x^<span class=\"number\">977</span> + <span class=\"number\">967895459</span>*x^<span class=\"number\">976</span> + <span class=\"number\">1201841165</span>*x^<span class=\"number\">975</span> + <span class=\"number\">264216641</span>*x^<span class=\"number\">974</span> + <span class=\"number\">751855165</span>*x^<span class=\"number\">973</span> + <span class=\"number\">277480010</span>*x^<span class=\"number\">972</span> + <span class=\"number\">955969328</span>*x^<span class=\"number\">971</span> + <span class=\"number\">784721168</span>*x^<span class=\"number\">970</span> + <span class=\"number\">696371212</span>*x^<span class=\"number\">969</span> + <span class=\"number\">401164998</span>*x^<span class=\"number\">968</span> + <span class=\"number\">654719011</span>*x^<span class=\"number\">967</span> + <span class=\"number\">785183205</span>*x^<span class=\"number\">966</span> + <span class=\"number\">79070435</span>*x^<span class=\"number\">965</span> + <span class=\"number\">1140562925</span>*x^<span class=\"number\">964</span> + <span class=\"number\">1025154340</span>*x^<span class=\"number\">963</span> + <span class=\"number\">1044315421</span>*x^<span class=\"number\">962</span> + <span class=\"number\">392734282</span>*x^<span class=\"number\">961</span> + <span class=\"number\">234286141</span>*x^<span class=\"number\">960</span> + <span class=\"number\">962551866</span>*x^<span class=\"number\">959</span> + <span class=\"number\">133742245</span>*x^<span class=\"number\">958</span> + <span class=\"number\">998056106</span>*x^<span class=\"number\">957</span> + <span class=\"number\">781318236</span>*x^<span class=\"number\">956</span> + <span class=\"number\">23528574</span>*x^<span class=\"number\">955</span> + <span class=\"number\">1214036424</span>*x^<span class=\"number\">954</span> + <span class=\"number\">296666931</span>*x^<span class=\"number\">953</span> + <span class=\"number\">1211729921</span>*x^<span class=\"number\">952</span> + <span class=\"number\">561550286</span>*x^<span class=\"number\">951</span> + <span class=\"number\">634392845</span>*x^<span class=\"number\">950</span> + <span class=\"number\">422332555</span>*x^<span class=\"number\">949</span> + <span class=\"number\">765556851</span>*x^<span class=\"number\">948</span> + <span class=\"number\">1151849524</span>*x^<span class=\"number\">947</span> + <span class=\"number\">305981530</span>*x^<span class=\"number\">946</span> + <span class=\"number\">246290056</span>*x^<span class=\"number\">945</span> + <span class=\"number\">24304550</span>*x^<span class=\"number\">944</span> + <span class=\"number\">477073522</span>*x^<span class=\"number\">943</span> + <span class=\"number\">416104453</span>*x^<span class=\"number\">942</span> + <span class=\"number\">898162013</span>*x^<span class=\"number\">941</span> + <span class=\"number\">611609496</span>*x^<span class=\"number\">940</span> + <span class=\"number\">445765799</span>*x^<span class=\"number\">939</span> + <span class=\"number\">430180169</span>*x^<span class=\"number\">938</span> + <span class=\"number\">1151421310</span>*x^<span class=\"number\">937</span> + <span class=\"number\">439515367</span>*x^<span class=\"number\">936</span> + <span class=\"number\">795257572</span>*x^<span class=\"number\">935</span> + <span class=\"number\">578106992</span>*x^<span class=\"number\">934</span> + <span class=\"number\">929259980</span>*x^<span class=\"number\">933</span> + <span class=\"number\">550407102</span>*x^<span class=\"number\">932</span> + <span class=\"number\">1219047347</span>*x^<span class=\"number\">931</span> + <span class=\"number\">15972593</span>*x^<span class=\"number\">930</span> + <span class=\"number\">515513177</span>*x^<span class=\"number\">929</span> + <span class=\"number\">679675449</span>*x^<span class=\"number\">928</span> + <span class=\"number\">914537835</span>*x^<span class=\"number\">927</span> + <span class=\"number\">156230965</span>*x^<span class=\"number\">926</span> + <span class=\"number\">385558312</span>*x^<span class=\"number\">925</span> + <span class=\"number\">1036365654</span>*x^<span class=\"number\">924</span> + <span class=\"number\">1098274877</span>*x^<span class=\"number\">923</span> + <span class=\"number\">348628203</span>*x^<span class=\"number\">922</span> + <span class=\"number\">1093802915</span>*x^<span class=\"number\">921</span> + <span class=\"number\">1162728002</span>*x^<span class=\"number\">920</span> + <span class=\"number\">200502246</span>*x^<span class=\"number\">919</span> + <span class=\"number\">551049082</span>*x^<span class=\"number\">918</span> + <span class=\"number\">969116717</span>*x^<span class=\"number\">917</span> + <span class=\"number\">1127382445</span>*x^<span class=\"number\">916</span> + <span class=\"number\">968172543</span>*x^<span class=\"number\">915</span> + <span class=\"number\">346881523</span>*x^<span class=\"number\">914</span> + <span class=\"number\">41744706</span>*x^<span class=\"number\">913</span> + <span class=\"number\">335042561</span>*x^<span class=\"number\">912</span> + <span class=\"number\">593895276</span>*x^<span class=\"number\">911</span> + <span class=\"number\">15888292</span>*x^<span class=\"number\">910</span> + <span class=\"number\">324866127</span>*x^<span class=\"number\">909</span> + <span class=\"number\">937351605</span>*x^<span class=\"number\">908</span> + <span class=\"number\">347255852</span>*x^<span class=\"number\">907</span> + <span class=\"number\">1120419679</span>*x^<span class=\"number\">906</span> + <span class=\"number\">249832197</span>*x^<span class=\"number\">905</span> + <span class=\"number\">896923860</span>*x^<span class=\"number\">904</span> + <span class=\"number\">129801128</span>*x^<span class=\"number\">903</span> + <span class=\"number\">207849052</span>*x^<span class=\"number\">902</span> + <span class=\"number\">386825059</span>*x^<span class=\"number\">901</span> + <span class=\"number\">823406098</span>*x^<span class=\"number\">900</span> + <span class=\"number\">977635408</span>*x^<span class=\"number\">899</span> + <span class=\"number\">108813100</span>*x^<span class=\"number\">898</span> + <span class=\"number\">561865827</span>*x^<span class=\"number\">897</span> + <span class=\"number\">718000532</span>*x^<span class=\"number\">896</span> + <span class=\"number\">48090035</span>*x^<span class=\"number\">895</span> + <span class=\"number\">832337939</span>*x^<span class=\"number\">894</span> + <span class=\"number\">1084389292</span>*x^<span class=\"number\">893</span> + <span class=\"number\">793335438</span>*x^<span class=\"number\">892</span> + <span class=\"number\">1095245016</span>*x^<span class=\"number\">891</span> + <span class=\"number\">1080787282</span>*x^<span class=\"number\">890</span> + <span class=\"number\">122666287</span>*x^<span class=\"number\">889</span> + <span class=\"number\">937313249</span>*x^<span class=\"number\">888</span> + <span class=\"number\">62818846</span>*x^<span class=\"number\">887</span> + <span class=\"number\">1170462486</span>*x^<span class=\"number\">886</span> + <span class=\"number\">182439366</span>*x^<span class=\"number\">885</span> + <span class=\"number\">792906343</span>*x^<span class=\"number\">884</span> + <span class=\"number\">1205386767</span>*x^<span class=\"number\">883</span> + <span class=\"number\">310389549</span>*x^<span class=\"number\">882</span> + <span class=\"number\">603676058</span>*x^<span class=\"number\">881</span> + <span class=\"number\">671251954</span>*x^<span class=\"number\">880</span> + <span class=\"number\">640345010</span>*x^<span class=\"number\">879</span> + <span class=\"number\">1087374504</span>*x^<span class=\"number\">878</span> + <span class=\"number\">119769446</span>*x^<span class=\"number\">877</span> + <span class=\"number\">135989573</span>*x^<span class=\"number\">876</span> + <span class=\"number\">880703983</span>*x^<span class=\"number\">875</span> + <span class=\"number\">613578242</span>*x^<span class=\"number\">874</span> + <span class=\"number\">1207874966</span>*x^<span class=\"number\">873</span> + <span class=\"number\">972002390</span>*x^<span class=\"number\">872</span> + <span class=\"number\">644470053</span>*x^<span class=\"number\">871</span> + <span class=\"number\">335762119</span>*x^<span class=\"number\">870</span> + <span class=\"number\">1079917808</span>*x^<span class=\"number\">869</span> + <span class=\"number\">1023711373</span>*x^<span class=\"number\">868</span> + <span class=\"number\">861485470</span>*x^<span class=\"number\">867</span> + <span class=\"number\">230979333</span>*x^<span class=\"number\">866</span> + <span class=\"number\">683284149</span>*x^<span class=\"number\">865</span> + <span class=\"number\">645804102</span>*x^<span class=\"number\">864</span> + <span class=\"number\">577971621</span>*x^<span class=\"number\">863</span> + <span class=\"number\">33779989</span>*x^<span class=\"number\">862</span> + <span class=\"number\">915467237</span>*x^<span class=\"number\">861</span> + <span class=\"number\">834966216</span>*x^<span class=\"number\">860</span> + <span class=\"number\">445758874</span>*x^<span class=\"number\">859</span> + <span class=\"number\">685228217</span>*x^<span class=\"number\">858</span> + <span class=\"number\">979609284</span>*x^<span class=\"number\">857</span> + <span class=\"number\">842509205</span>*x^<span class=\"number\">856</span> + <span class=\"number\">221373358</span>*x^<span class=\"number\">855</span> + <span class=\"number\">150166201</span>*x^<span class=\"number\">854</span> + <span class=\"number\">927937340</span>*x^<span class=\"number\">853</span> + <span class=\"number\">995054125</span>*x^<span class=\"number\">852</span> + <span class=\"number\">704623324</span>*x^<span class=\"number\">851</span> + <span class=\"number\">1112892592</span>*x^<span class=\"number\">850</span> + <span class=\"number\">782816865</span>*x^<span class=\"number\">849</span> + <span class=\"number\">878518510</span>*x^<span class=\"number\">848</span> + <span class=\"number\">391872241</span>*x^<span class=\"number\">847</span> + <span class=\"number\">30062686</span>*x^<span class=\"number\">846</span> + <span class=\"number\">108900016</span>*x^<span class=\"number\">845</span> + <span class=\"number\">1034780269</span>*x^<span class=\"number\">844</span> + <span class=\"number\">1190084541</span>*x^<span class=\"number\">843</span> + <span class=\"number\">441686497</span>*x^<span class=\"number\">842</span> + <span class=\"number\">117953957</span>*x^<span class=\"number\">841</span> + <span class=\"number\">840802549</span>*x^<span class=\"number\">840</span> + <span class=\"number\">903238790</span>*x^<span class=\"number\">839</span> + <span class=\"number\">551715093</span>*x^<span class=\"number\">838</span> + <span class=\"number\">539420097</span>*x^<span class=\"number\">837</span> + <span class=\"number\">1007110444</span>*x^<span class=\"number\">836</span> + <span class=\"number\">673864283</span>*x^<span class=\"number\">835</span> + <span class=\"number\">756402005</span>*x^<span class=\"number\">834</span> + <span class=\"number\">197892310</span>*x^<span class=\"number\">833</span> + <span class=\"number\">981720851</span>*x^<span class=\"number\">832</span> + <span class=\"number\">798897509</span>*x^<span class=\"number\">831</span> + <span class=\"number\">1127242378</span>*x^<span class=\"number\">830</span> + <span class=\"number\">666754217</span>*x^<span class=\"number\">829</span> + <span class=\"number\">685248618</span>*x^<span class=\"number\">828</span> + <span class=\"number\">327773092</span>*x^<span class=\"number\">827</span> + <span class=\"number\">390697118</span>*x^<span class=\"number\">826</span> + <span class=\"number\">912223373</span>*x^<span class=\"number\">825</span> + <span class=\"number\">482947333</span>*x^<span class=\"number\">824</span> + <span class=\"number\">1110169857</span>*x^<span class=\"number\">823</span> + <span class=\"number\">780612147</span>*x^<span class=\"number\">822</span> + <span class=\"number\">194698743</span>*x^<span class=\"number\">821</span> + <span class=\"number\">716386043</span>*x^<span class=\"number\">820</span> + <span class=\"number\">424946693</span>*x^<span class=\"number\">819</span> + <span class=\"number\">22701975</span>*x^<span class=\"number\">818</span> + <span class=\"number\">293011366</span>*x^<span class=\"number\">817</span> + <span class=\"number\">947695756</span>*x^<span class=\"number\">816</span> + <span class=\"number\">1188483932</span>*x^<span class=\"number\">815</span> + <span class=\"number\">1002073886</span>*x^<span class=\"number\">814</span> + <span class=\"number\">1078210750</span>*x^<span class=\"number\">813</span> + <span class=\"number\">1127684166</span>*x^<span class=\"number\">812</span> + <span class=\"number\">719332394</span>*x^<span class=\"number\">811</span> + <span class=\"number\">1072532713</span>*x^<span class=\"number\">810</span> + <span class=\"number\">550629553</span>*x^<span class=\"number\">809</span> + <span class=\"number\">188195613</span>*x^<span class=\"number\">808</span> + <span class=\"number\">614412704</span>*x^<span class=\"number\">807</span> + <span class=\"number\">649960359</span>*x^<span class=\"number\">806</span> + <span class=\"number\">1010011298</span>*x^<span class=\"number\">805</span> + <span class=\"number\">824975518</span>*x^<span class=\"number\">804</span> + <span class=\"number\">311757403</span>*x^<span class=\"number\">803</span> + <span class=\"number\">93674481</span>*x^<span class=\"number\">802</span> + <span class=\"number\">380323800</span>*x^<span class=\"number\">801</span> + <span class=\"number\">1086623904</span>*x^<span class=\"number\">800</span> + <span class=\"number\">240170088</span>*x^<span class=\"number\">799</span> + <span class=\"number\">956396081</span>*x^<span class=\"number\">798</span> + <span class=\"number\">939969890</span>*x^<span class=\"number\">797</span> + <span class=\"number\">131843464</span>*x^<span class=\"number\">796</span> + <span class=\"number\">1045744996</span>*x^<span class=\"number\">795</span> + <span class=\"number\">424359277</span>*x^<span class=\"number\">794</span> + <span class=\"number\">550616456</span>*x^<span class=\"number\">793</span> + <span class=\"number\">1061637035</span>*x^<span class=\"number\">792</span> + <span class=\"number\">444548551</span>*x^<span class=\"number\">791</span> + <span class=\"number\">677546521</span>*x^<span class=\"number\">790</span> + <span class=\"number\">149605032</span>*x^<span class=\"number\">789</span> + <span class=\"number\">829567560</span>*x^<span class=\"number\">788</span> + <span class=\"number\">516053142</span>*x^<span class=\"number\">787</span> + <span class=\"number\">1191529914</span>*x^<span class=\"number\">786</span> + <span class=\"number\">294270928</span>*x^<span class=\"number\">785</span> + <span class=\"number\">142024389</span>*x^<span class=\"number\">784</span> + <span class=\"number\">584911191</span>*x^<span class=\"number\">783</span> + <span class=\"number\">307856659</span>*x^<span class=\"number\">782</span> + <span class=\"number\">81514660</span>*x^<span class=\"number\">781</span> + <span class=\"number\">543784156</span>*x^<span class=\"number\">780</span> + <span class=\"number\">108008163</span>*x^<span class=\"number\">779</span> + <span class=\"number\">13154295</span>*x^<span class=\"number\">778</span> + <span class=\"number\">155266054</span>*x^<span class=\"number\">777</span> + <span class=\"number\">663702892</span>*x^<span class=\"number\">776</span> + <span class=\"number\">782494602</span>*x^<span class=\"number\">775</span> + <span class=\"number\">747547833</span>*x^<span class=\"number\">774</span> + <span class=\"number\">242456376</span>*x^<span class=\"number\">773</span> + <span class=\"number\">669844220</span>*x^<span class=\"number\">772</span> + <span class=\"number\">552894098</span>*x^<span class=\"number\">771</span> + <span class=\"number\">1036366706</span>*x^<span class=\"number\">770</span> + <span class=\"number\">1074841665</span>*x^<span class=\"number\">769</span> + <span class=\"number\">720745418</span>*x^<span class=\"number\">768</span> + <span class=\"number\">1137936670</span>*x^<span class=\"number\">767</span> + <span class=\"number\">840875363</span>*x^<span class=\"number\">766</span> + <span class=\"number\">476498840</span>*x^<span class=\"number\">765</span> + <span class=\"number\">1088669461</span>*x^<span class=\"number\">764</span> + <span class=\"number\">1249649</span>*x^<span class=\"number\">763</span> + <span class=\"number\">882277578</span>*x^<span class=\"number\">762</span> + <span class=\"number\">37842126</span>*x^<span class=\"number\">761</span> + <span class=\"number\">398977801</span>*x^<span class=\"number\">760</span> + <span class=\"number\">328296234</span>*x^<span class=\"number\">759</span> + <span class=\"number\">536342859</span>*x^<span class=\"number\">758</span> + <span class=\"number\">608139240</span>*x^<span class=\"number\">757</span> + <span class=\"number\">897424944</span>*x^<span class=\"number\">756</span> + <span class=\"number\">76562916</span>*x^<span class=\"number\">755</span> + <span class=\"number\">428081420</span>*x^<span class=\"number\">754</span> + <span class=\"number\">627420927</span>*x^<span class=\"number\">753</span> + <span class=\"number\">265131678</span>*x^<span class=\"number\">752</span> + <span class=\"number\">1034443577</span>*x^<span class=\"number\">751</span> + <span class=\"number\">177902661</span>*x^<span class=\"number\">750</span> + <span class=\"number\">490977141</span>*x^<span class=\"number\">749</span> + <span class=\"number\">1084536775</span>*x^<span class=\"number\">748</span> + <span class=\"number\">1189221123</span>*x^<span class=\"number\">747</span> + <span class=\"number\">854191429</span>*x^<span class=\"number\">746</span> + <span class=\"number\">952038058</span>*x^<span class=\"number\">745</span> + <span class=\"number\">891288300</span>*x^<span class=\"number\">744</span> + <span class=\"number\">929356576</span>*x^<span class=\"number\">743</span> + <span class=\"number\">223874272</span>*x^<span class=\"number\">742</span> + <span class=\"number\">220297702</span>*x^<span class=\"number\">741</span> + <span class=\"number\">1099283305</span>*x^<span class=\"number\">740</span> + <span class=\"number\">1008574448</span>*x^<span class=\"number\">739</span> + <span class=\"number\">619949004</span>*x^<span class=\"number\">738</span> + <span class=\"number\">747199791</span>*x^<span class=\"number\">737</span> + <span class=\"number\">760703880</span>*x^<span class=\"number\">736</span> + <span class=\"number\">7682727</span>*x^<span class=\"number\">735</span> + <span class=\"number\">88566484</span>*x^<span class=\"number\">734</span> + <span class=\"number\">733742620</span>*x^<span class=\"number\">733</span> + <span class=\"number\">381443925</span>*x^<span class=\"number\">732</span> + <span class=\"number\">799269923</span>*x^<span class=\"number\">731</span> + <span class=\"number\">233342676</span>*x^<span class=\"number\">730</span> + <span class=\"number\">1205696983</span>*x^<span class=\"number\">729</span> + <span class=\"number\">765306727</span>*x^<span class=\"number\">728</span> + <span class=\"number\">29342855</span>*x^<span class=\"number\">727</span> + <span class=\"number\">287728251</span>*x^<span class=\"number\">726</span> + <span class=\"number\">214358216</span>*x^<span class=\"number\">725</span> + <span class=\"number\">355991367</span>*x^<span class=\"number\">724</span> + <span class=\"number\">344973841</span>*x^<span class=\"number\">723</span> + <span class=\"number\">436344093</span>*x^<span class=\"number\">722</span> + <span class=\"number\">547944829</span>*x^<span class=\"number\">721</span> + <span class=\"number\">1041405031</span>*x^<span class=\"number\">720</span> + <span class=\"number\">368771692</span>*x^<span class=\"number\">719</span> + <span class=\"number\">37426577</span>*x^<span class=\"number\">718</span> + <span class=\"number\">502936636</span>*x^<span class=\"number\">717</span> + <span class=\"number\">732825913</span>*x^<span class=\"number\">716</span> + <span class=\"number\">518778589</span>*x^<span class=\"number\">715</span> + <span class=\"number\">561797784</span>*x^<span class=\"number\">714</span> + <span class=\"number\">773068766</span>*x^<span class=\"number\">713</span> + <span class=\"number\">75615306</span>*x^<span class=\"number\">712</span> + <span class=\"number\">668933267</span>*x^<span class=\"number\">711</span> + <span class=\"number\">628975723</span>*x^<span class=\"number\">710</span> + <span class=\"number\">1140697439</span>*x^<span class=\"number\">709</span> + <span class=\"number\">108807342</span>*x^<span class=\"number\">708</span> + <span class=\"number\">283945737</span>*x^<span class=\"number\">707</span> + <span class=\"number\">701674528</span>*x^<span class=\"number\">706</span> + <span class=\"number\">1120373548</span>*x^<span class=\"number\">705</span> + <span class=\"number\">421627231</span>*x^<span class=\"number\">704</span> + <span class=\"number\">260846853</span>*x^<span class=\"number\">703</span> + <span class=\"number\">292537012</span>*x^<span class=\"number\">702</span> + <span class=\"number\">583513440</span>*x^<span class=\"number\">701</span> + <span class=\"number\">609720259</span>*x^<span class=\"number\">700</span> + <span class=\"number\">831373721</span>*x^<span class=\"number\">699</span> + <span class=\"number\">1126099385</span>*x^<span class=\"number\">698</span> + <span class=\"number\">431095431</span>*x^<span class=\"number\">697</span> + <span class=\"number\">296863241</span>*x^<span class=\"number\">696</span> + <span class=\"number\">371013827</span>*x^<span class=\"number\">695</span> + <span class=\"number\">549980853</span>*x^<span class=\"number\">694</span> + <span class=\"number\">550174635</span>*x^<span class=\"number\">693</span> + <span class=\"number\">620963563</span>*x^<span class=\"number\">692</span> + <span class=\"number\">952040422</span>*x^<span class=\"number\">691</span> + <span class=\"number\">1150044500</span>*x^<span class=\"number\">690</span> + <span class=\"number\">893175261</span>*x^<span class=\"number\">689</span> + <span class=\"number\">1139857784</span>*x^<span class=\"number\">688</span> + <span class=\"number\">972717568</span>*x^<span class=\"number\">687</span> + <span class=\"number\">735672517</span>*x^<span class=\"number\">686</span> + <span class=\"number\">1177501026</span>*x^<span class=\"number\">685</span> + <span class=\"number\">765934764</span>*x^<span class=\"number\">684</span> + <span class=\"number\">710762091</span>*x^<span class=\"number\">683</span> + <span class=\"number\">871268519</span>*x^<span class=\"number\">682</span> + <span class=\"number\">969318271</span>*x^<span class=\"number\">681</span> + <span class=\"number\">286261161</span>*x^<span class=\"number\">680</span> + <span class=\"number\">65128931</span>*x^<span class=\"number\">679</span> + <span class=\"number\">1100922672</span>*x^<span class=\"number\">678</span> + <span class=\"number\">47619662</span>*x^<span class=\"number\">677</span> + <span class=\"number\">981578224</span>*x^<span class=\"number\">676</span> + <span class=\"number\">67232154</span>*x^<span class=\"number\">675</span> + <span class=\"number\">1928142</span>*x^<span class=\"number\">674</span> + <span class=\"number\">817643007</span>*x^<span class=\"number\">673</span> + <span class=\"number\">675713298</span>*x^<span class=\"number\">672</span> + <span class=\"number\">185236805</span>*x^<span class=\"number\">671</span> + <span class=\"number\">331446457</span>*x^<span class=\"number\">670</span> + <span class=\"number\">129023118</span>*x^<span class=\"number\">669</span> + <span class=\"number\">431426370</span>*x^<span class=\"number\">668</span> + <span class=\"number\">1154277684</span>*x^<span class=\"number\">667</span> + <span class=\"number\">723182950</span>*x^<span class=\"number\">666</span> + <span class=\"number\">1144823093</span>*x^<span class=\"number\">665</span> + <span class=\"number\">822001162</span>*x^<span class=\"number\">664</span> + <span class=\"number\">356099532</span>*x^<span class=\"number\">663</span> + <span class=\"number\">705989193</span>*x^<span class=\"number\">662</span> + <span class=\"number\">878712048</span>*x^<span class=\"number\">661</span> + <span class=\"number\">1095044481</span>*x^<span class=\"number\">660</span> + <span class=\"number\">332193401</span>*x^<span class=\"number\">659</span> + <span class=\"number\">613329359</span>*x^<span class=\"number\">658</span> + <span class=\"number\">673744151</span>*x^<span class=\"number\">657</span> + <span class=\"number\">808080280</span>*x^<span class=\"number\">656</span> + <span class=\"number\">225562949</span>*x^<span class=\"number\">655</span> + <span class=\"number\">185686220</span>*x^<span class=\"number\">654</span> + <span class=\"number\">742469973</span>*x^<span class=\"number\">653</span> + <span class=\"number\">986152315</span>*x^<span class=\"number\">652</span> + <span class=\"number\">13611550</span>*x^<span class=\"number\">651</span> + <span class=\"number\">535747170</span>*x^<span class=\"number\">650</span> + <span class=\"number\">233786507</span>*x^<span class=\"number\">649</span> + <span class=\"number\">27955348</span>*x^<span class=\"number\">648</span> + <span class=\"number\">1004446959</span>*x^<span class=\"number\">647</span> + <span class=\"number\">1071164149</span>*x^<span class=\"number\">646</span> + <span class=\"number\">265258708</span>*x^<span class=\"number\">645</span> + <span class=\"number\">63221383</span>*x^<span class=\"number\">644</span> + <span class=\"number\">682228580</span>*x^<span class=\"number\">643</span> + <span class=\"number\">867131152</span>*x^<span class=\"number\">642</span> + <span class=\"number\">997600620</span>*x^<span class=\"number\">641</span> + <span class=\"number\">993922001</span>*x^<span class=\"number\">640</span> + <span class=\"number\">693252545</span>*x^<span class=\"number\">639</span> + <span class=\"number\">865655581</span>*x^<span class=\"number\">638</span> + <span class=\"number\">518295141</span>*x^<span class=\"number\">637</span> + <span class=\"number\">902072633</span>*x^<span class=\"number\">636</span> + <span class=\"number\">704953646</span>*x^<span class=\"number\">635</span> + <span class=\"number\">587251157</span>*x^<span class=\"number\">634</span> + <span class=\"number\">99168972</span>*x^<span class=\"number\">633</span> + <span class=\"number\">1105480730</span>*x^<span class=\"number\">632</span> + <span class=\"number\">1040404159</span>*x^<span class=\"number\">631</span> + <span class=\"number\">436113220</span>*x^<span class=\"number\">630</span> + <span class=\"number\">152714904</span>*x^<span class=\"number\">629</span> + <span class=\"number\">697469981</span>*x^<span class=\"number\">628</span> + <span class=\"number\">1185372838</span>*x^<span class=\"number\">627</span> + <span class=\"number\">216027999</span>*x^<span class=\"number\">626</span> + <span class=\"number\">616083931</span>*x^<span class=\"number\">625</span> + <span class=\"number\">399419685</span>*x^<span class=\"number\">624</span> + <span class=\"number\">23193568</span>*x^<span class=\"number\">623</span> + <span class=\"number\">1174129641</span>*x^<span class=\"number\">622</span> + <span class=\"number\">75724376</span>*x^<span class=\"number\">621</span> + <span class=\"number\">570399858</span>*x^<span class=\"number\">620</span> + <span class=\"number\">754947446</span>*x^<span class=\"number\">619</span> + <span class=\"number\">1037864447</span>*x^<span class=\"number\">618</span> + <span class=\"number\">794730343</span>*x^<span class=\"number\">617</span> + <span class=\"number\">60369472</span>*x^<span class=\"number\">616</span> + <span class=\"number\">750769016</span>*x^<span class=\"number\">615</span> + <span class=\"number\">61444481</span>*x^<span class=\"number\">614</span> + <span class=\"number\">333194445</span>*x^<span class=\"number\">613</span> + <span class=\"number\">1109236037</span>*x^<span class=\"number\">612</span> + <span class=\"number\">513379869</span>*x^<span class=\"number\">611</span> + <span class=\"number\">706807998</span>*x^<span class=\"number\">610</span> + <span class=\"number\">999669914</span>*x^<span class=\"number\">609</span> + <span class=\"number\">1198194959</span>*x^<span class=\"number\">608</span> + <span class=\"number\">336044172</span>*x^<span class=\"number\">607</span> + <span class=\"number\">402719207</span>*x^<span class=\"number\">606</span> + <span class=\"number\">1050007981</span>*x^<span class=\"number\">605</span> + <span class=\"number\">429464593</span>*x^<span class=\"number\">604</span> + <span class=\"number\">679293134</span>*x^<span class=\"number\">603</span> + <span class=\"number\">734513317</span>*x^<span class=\"number\">602</span> + <span class=\"number\">838385265</span>*x^<span class=\"number\">601</span> + <span class=\"number\">990800608</span>*x^<span class=\"number\">600</span> + <span class=\"number\">1162093896</span>*x^<span class=\"number\">599</span> + <span class=\"number\">173467508</span>*x^<span class=\"number\">598</span> + <span class=\"number\">123947890</span>*x^<span class=\"number\">597</span> + <span class=\"number\">325712596</span>*x^<span class=\"number\">596</span> + <span class=\"number\">1049522320</span>*x^<span class=\"number\">595</span> + <span class=\"number\">1072653958</span>*x^<span class=\"number\">594</span> + <span class=\"number\">565759817</span>*x^<span class=\"number\">593</span> + <span class=\"number\">549918485</span>*x^<span class=\"number\">592</span> + <span class=\"number\">574268523</span>*x^<span class=\"number\">591</span> + <span class=\"number\">1052593520</span>*x^<span class=\"number\">590</span> + <span class=\"number\">474323970</span>*x^<span class=\"number\">589</span> + <span class=\"number\">262787725</span>*x^<span class=\"number\">588</span> + <span class=\"number\">1091470590</span>*x^<span class=\"number\">587</span> + <span class=\"number\">782664905</span>*x^<span class=\"number\">586</span> + <span class=\"number\">1201833996</span>*x^<span class=\"number\">585</span> + <span class=\"number\">808712564</span>*x^<span class=\"number\">584</span> + <span class=\"number\">619522329</span>*x^<span class=\"number\">583</span> + <span class=\"number\">233329446</span>*x^<span class=\"number\">582</span> + <span class=\"number\">730502283</span>*x^<span class=\"number\">581</span> + <span class=\"number\">1017501853</span>*x^<span class=\"number\">580</span> + <span class=\"number\">306080194</span>*x^<span class=\"number\">579</span> + <span class=\"number\">283641594</span>*x^<span class=\"number\">578</span> + <span class=\"number\">195324593</span>*x^<span class=\"number\">577</span> + <span class=\"number\">1116741123</span>*x^<span class=\"number\">576</span> + <span class=\"number\">289439631</span>*x^<span class=\"number\">575</span> + <span class=\"number\">206064600</span>*x^<span class=\"number\">574</span> + <span class=\"number\">280021778</span>*x^<span class=\"number\">573</span> + <span class=\"number\">425409216</span>*x^<span class=\"number\">572</span> + <span class=\"number\">1107952582</span>*x^<span class=\"number\">571</span> + <span class=\"number\">131800177</span>*x^<span class=\"number\">570</span> + <span class=\"number\">106903346</span>*x^<span class=\"number\">569</span> + <span class=\"number\">72306234</span>*x^<span class=\"number\">568</span> + <span class=\"number\">934072451</span>*x^<span class=\"number\">567</span> + <span class=\"number\">242740893</span>*x^<span class=\"number\">566</span> + <span class=\"number\">106611451</span>*x^<span class=\"number\">565</span> + <span class=\"number\">429378634</span>*x^<span class=\"number\">564</span> + <span class=\"number\">127624569</span>*x^<span class=\"number\">563</span> + <span class=\"number\">587315789</span>*x^<span class=\"number\">562</span> + <span class=\"number\">932709753</span>*x^<span class=\"number\">561</span> + <span class=\"number\">523886142</span>*x^<span class=\"number\">560</span> + <span class=\"number\">110330665</span>*x^<span class=\"number\">559</span> + <span class=\"number\">963244036</span>*x^<span class=\"number\">558</span> + <span class=\"number\">227339325</span>*x^<span class=\"number\">557</span> + <span class=\"number\">185882207</span>*x^<span class=\"number\">556</span> + <span class=\"number\">987833442</span>*x^<span class=\"number\">555</span> + <span class=\"number\">981380006</span>*x^<span class=\"number\">554</span> + <span class=\"number\">1140813804</span>*x^<span class=\"number\">553</span> + <span class=\"number\">538704418</span>*x^<span class=\"number\">552</span> + <span class=\"number\">842520362</span>*x^<span class=\"number\">551</span> + <span class=\"number\">597627400</span>*x^<span class=\"number\">550</span> + <span class=\"number\">165232274</span>*x^<span class=\"number\">549</span> + <span class=\"number\">900076209</span>*x^<span class=\"number\">548</span> + <span class=\"number\">311342603</span>*x^<span class=\"number\">547</span> + <span class=\"number\">477271753</span>*x^<span class=\"number\">546</span> + <span class=\"number\">1072907066</span>*x^<span class=\"number\">545</span> + <span class=\"number\">1066126181</span>*x^<span class=\"number\">544</span> + <span class=\"number\">791702251</span>*x^<span class=\"number\">543</span> + <span class=\"number\">623246063</span>*x^<span class=\"number\">542</span> + <span class=\"number\">1082681410</span>*x^<span class=\"number\">541</span> + <span class=\"number\">759396967</span>*x^<span class=\"number\">540</span> + <span class=\"number\">878108937</span>*x^<span class=\"number\">539</span> + <span class=\"number\">724607060</span>*x^<span class=\"number\">538</span> + <span class=\"number\">79223685</span>*x^<span class=\"number\">537</span> + <span class=\"number\">307312027</span>*x^<span class=\"number\">536</span> + <span class=\"number\">234246571</span>*x^<span class=\"number\">535</span> + <span class=\"number\">330319932</span>*x^<span class=\"number\">534</span> + <span class=\"number\">274254378</span>*x^<span class=\"number\">533</span> + <span class=\"number\">1082820468</span>*x^<span class=\"number\">532</span> + <span class=\"number\">68920838</span>*x^<span class=\"number\">531</span> + <span class=\"number\">1195376541</span>*x^<span class=\"number\">530</span> + <span class=\"number\">170971307</span>*x^<span class=\"number\">529</span> + <span class=\"number\">399525324</span>*x^<span class=\"number\">528</span> + <span class=\"number\">238798853</span>*x^<span class=\"number\">527</span> + <span class=\"number\">664426862</span>*x^<span class=\"number\">526</span> + <span class=\"number\">269949285</span>*x^<span class=\"number\">525</span> + <span class=\"number\">698202786</span>*x^<span class=\"number\">524</span> + <span class=\"number\">88964561</span>*x^<span class=\"number\">523</span> + <span class=\"number\">635539315</span>*x^<span class=\"number\">522</span> + <span class=\"number\">1016514687</span>*x^<span class=\"number\">521</span> + <span class=\"number\">122364467</span>*x^<span class=\"number\">520</span> + <span class=\"number\">1095096646</span>*x^<span class=\"number\">519</span> + <span class=\"number\">513834099</span>*x^<span class=\"number\">518</span> + <span class=\"number\">672478524</span>*x^<span class=\"number\">517</span> + <span class=\"number\">47526709</span>*x^<span class=\"number\">516</span> + <span class=\"number\">48782616</span>*x^<span class=\"number\">515</span> + <span class=\"number\">166225959</span>*x^<span class=\"number\">514</span> + <span class=\"number\">810099682</span>*x^<span class=\"number\">513</span> + <span class=\"number\">168540411</span>*x^<span class=\"number\">512</span> + <span class=\"number\">30055377</span>*x^<span class=\"number\">511</span> + <span class=\"number\">817325819</span>*x^<span class=\"number\">510</span> + <span class=\"number\">202717189</span>*x^<span class=\"number\">509</span> + <span class=\"number\">739906349</span>*x^<span class=\"number\">508</span> + <span class=\"number\">186072589</span>*x^<span class=\"number\">507</span> + <span class=\"number\">451966755</span>*x^<span class=\"number\">506</span> + <span class=\"number\">684027658</span>*x^<span class=\"number\">505</span> + <span class=\"number\">251331059</span>*x^<span class=\"number\">504</span> + <span class=\"number\">591972494</span>*x^<span class=\"number\">503</span> + <span class=\"number\">289197098</span>*x^<span class=\"number\">502</span> + <span class=\"number\">829928406</span>*x^<span class=\"number\">501</span> + <span class=\"number\">160528626</span>*x^<span class=\"number\">500</span> + <span class=\"number\">90951219</span>*x^<span class=\"number\">499</span> + <span class=\"number\">496118642</span>*x^<span class=\"number\">498</span> + <span class=\"number\">117818178</span>*x^<span class=\"number\">497</span> + <span class=\"number\">215417436</span>*x^<span class=\"number\">496</span> + <span class=\"number\">937904122</span>*x^<span class=\"number\">495</span> + <span class=\"number\">962080493</span>*x^<span class=\"number\">494</span> + <span class=\"number\">423647737</span>*x^<span class=\"number\">493</span> + <span class=\"number\">1094089608</span>*x^<span class=\"number\">492</span> + <span class=\"number\">97559711</span>*x^<span class=\"number\">491</span> + <span class=\"number\">412409151</span>*x^<span class=\"number\">490</span> + <span class=\"number\">1039695658</span>*x^<span class=\"number\">489</span> + <span class=\"number\">461079746</span>*x^<span class=\"number\">488</span> + <span class=\"number\">564664118</span>*x^<span class=\"number\">487</span> + <span class=\"number\">2231630</span>*x^<span class=\"number\">486</span> + <span class=\"number\">667569567</span>*x^<span class=\"number\">485</span> + <span class=\"number\">471400483</span>*x^<span class=\"number\">484</span> + <span class=\"number\">691739455</span>*x^<span class=\"number\">483</span> + <span class=\"number\">146641223</span>*x^<span class=\"number\">482</span> + <span class=\"number\">445509678</span>*x^<span class=\"number\">481</span> + <span class=\"number\">788647561</span>*x^<span class=\"number\">480</span> + <span class=\"number\">100316571</span>*x^<span class=\"number\">479</span> + <span class=\"number\">927803124</span>*x^<span class=\"number\">478</span> + <span class=\"number\">225739054</span>*x^<span class=\"number\">477</span> + <span class=\"number\">339283562</span>*x^<span class=\"number\">476</span> + <span class=\"number\">741552554</span>*x^<span class=\"number\">475</span> + <span class=\"number\">674303545</span>*x^<span class=\"number\">474</span> + <span class=\"number\">610706793</span>*x^<span class=\"number\">473</span> + <span class=\"number\">1045437706</span>*x^<span class=\"number\">472</span> + <span class=\"number\">758427998</span>*x^<span class=\"number\">471</span> + <span class=\"number\">518677374</span>*x^<span class=\"number\">470</span> + <span class=\"number\">1020530386</span>*x^<span class=\"number\">469</span> + <span class=\"number\">81672436</span>*x^<span class=\"number\">468</span> + <span class=\"number\">684553666</span>*x^<span class=\"number\">467</span> + <span class=\"number\">36416557</span>*x^<span class=\"number\">466</span> + <span class=\"number\">1083076029</span>*x^<span class=\"number\">465</span> + <span class=\"number\">63903696</span>*x^<span class=\"number\">464</span> + <span class=\"number\">655765095</span>*x^<span class=\"number\">463</span> + <span class=\"number\">464055997</span>*x^<span class=\"number\">462</span> + <span class=\"number\">874368360</span>*x^<span class=\"number\">461</span> + <span class=\"number\">909538282</span>*x^<span class=\"number\">460</span> + <span class=\"number\">1084815716</span>*x^<span class=\"number\">459</span> + <span class=\"number\">971305398</span>*x^<span class=\"number\">458</span> + <span class=\"number\">504958756</span>*x^<span class=\"number\">457</span> + <span class=\"number\">941782746</span>*x^<span class=\"number\">456</span> + <span class=\"number\">410981017</span>*x^<span class=\"number\">455</span> + <span class=\"number\">44463213</span>*x^<span class=\"number\">454</span> + <span class=\"number\">57796260</span>*x^<span class=\"number\">453</span> + <span class=\"number\">633624768</span>*x^<span class=\"number\">452</span> + <span class=\"number\">902476625</span>*x^<span class=\"number\">451</span> + <span class=\"number\">1190884714</span>*x^<span class=\"number\">450</span> + <span class=\"number\">30960289</span>*x^<span class=\"number\">449</span> + <span class=\"number\">698111360</span>*x^<span class=\"number\">448</span> + <span class=\"number\">507015564</span>*x^<span class=\"number\">447</span> + <span class=\"number\">595305556</span>*x^<span class=\"number\">446</span> + <span class=\"number\">1170147546</span>*x^<span class=\"number\">445</span> + <span class=\"number\">595449153</span>*x^<span class=\"number\">444</span> + <span class=\"number\">1132050715</span>*x^<span class=\"number\">443</span> + <span class=\"number\">566093951</span>*x^<span class=\"number\">442</span> + <span class=\"number\">1125890381</span>*x^<span class=\"number\">441</span> + <span class=\"number\">864044563</span>*x^<span class=\"number\">440</span> + <span class=\"number\">608408253</span>*x^<span class=\"number\">439</span> + <span class=\"number\">128031905</span>*x^<span class=\"number\">438</span> + <span class=\"number\">951152598</span>*x^<span class=\"number\">437</span> + <span class=\"number\">41054884</span>*x^<span class=\"number\">436</span> + <span class=\"number\">1012755213</span>*x^<span class=\"number\">435</span> + <span class=\"number\">1091670374</span>*x^<span class=\"number\">434</span> + <span class=\"number\">481898210</span>*x^<span class=\"number\">433</span> + <span class=\"number\">1007980179</span>*x^<span class=\"number\">432</span> + <span class=\"number\">43301236</span>*x^<span class=\"number\">431</span> + <span class=\"number\">6478999</span>*x^<span class=\"number\">430</span> + <span class=\"number\">1175215424</span>*x^<span class=\"number\">429</span> + <span class=\"number\">597862715</span>*x^<span class=\"number\">428</span> + <span class=\"number\">441537430</span>*x^<span class=\"number\">427</span> + <span class=\"number\">339705054</span>*x^<span class=\"number\">426</span> + <span class=\"number\">289227345</span>*x^<span class=\"number\">425</span> + <span class=\"number\">795113772</span>*x^<span class=\"number\">424</span> + <span class=\"number\">404870950</span>*x^<span class=\"number\">423</span> + <span class=\"number\">997272819</span>*x^<span class=\"number\">422</span> + <span class=\"number\">634256255</span>*x^<span class=\"number\">421</span> + <span class=\"number\">453060086</span>*x^<span class=\"number\">420</span> + <span class=\"number\">821493547</span>*x^<span class=\"number\">419</span> + <span class=\"number\">842289852</span>*x^<span class=\"number\">418</span> + <span class=\"number\">223251279</span>*x^<span class=\"number\">417</span> + <span class=\"number\">929721613</span>*x^<span class=\"number\">416</span> + <span class=\"number\">63980045</span>*x^<span class=\"number\">415</span> + <span class=\"number\">298369623</span>*x^<span class=\"number\">414</span> + <span class=\"number\">1026287144</span>*x^<span class=\"number\">413</span> + <span class=\"number\">979092254</span>*x^<span class=\"number\">412</span> + <span class=\"number\">1182904024</span>*x^<span class=\"number\">411</span> + <span class=\"number\">298048453</span>*x^<span class=\"number\">410</span> + <span class=\"number\">653297794</span>*x^<span class=\"number\">409</span> + <span class=\"number\">365769179</span>*x^<span class=\"number\">408</span> + <span class=\"number\">45373617</span>*x^<span class=\"number\">407</span> + <span class=\"number\">7228243</span>*x^<span class=\"number\">406</span> + <span class=\"number\">1086374067</span>*x^<span class=\"number\">405</span> + <span class=\"number\">389455721</span>*x^<span class=\"number\">404</span> + <span class=\"number\">992518297</span>*x^<span class=\"number\">403</span> + <span class=\"number\">433929335</span>*x^<span class=\"number\">402</span> + <span class=\"number\">1149626197</span>*x^<span class=\"number\">401</span> + <span class=\"number\">90006250</span>*x^<span class=\"number\">400</span> + <span class=\"number\">1011632630</span>*x^<span class=\"number\">399</span> + <span class=\"number\">940906615</span>*x^<span class=\"number\">398</span> + <span class=\"number\">564772117</span>*x^<span class=\"number\">397</span> + <span class=\"number\">692974220</span>*x^<span class=\"number\">396</span> + <span class=\"number\">561321375</span>*x^<span class=\"number\">395</span> + <span class=\"number\">1095715303</span>*x^<span class=\"number\">394</span> + <span class=\"number\">1006114558</span>*x^<span class=\"number\">393</span> + <span class=\"number\">95516055</span>*x^<span class=\"number\">392</span> + <span class=\"number\">640816811</span>*x^<span class=\"number\">391</span> + <span class=\"number\">869737844</span>*x^<span class=\"number\">390</span> + <span class=\"number\">248741996</span>*x^<span class=\"number\">389</span> + <span class=\"number\">101754352</span>*x^<span class=\"number\">388</span> + <span class=\"number\">253268107</span>*x^<span class=\"number\">387</span> + <span class=\"number\">593472036</span>*x^<span class=\"number\">386</span> + <span class=\"number\">627778298</span>*x^<span class=\"number\">385</span> + <span class=\"number\">801877646</span>*x^<span class=\"number\">384</span> + <span class=\"number\">286581226</span>*x^<span class=\"number\">383</span> + <span class=\"number\">645931883</span>*x^<span class=\"number\">382</span> + <span class=\"number\">373119745</span>*x^<span class=\"number\">381</span> + <span class=\"number\">461109006</span>*x^<span class=\"number\">380</span> + <span class=\"number\">594214135</span>*x^<span class=\"number\">379</span> + <span class=\"number\">751634451</span>*x^<span class=\"number\">378</span> + <span class=\"number\">706229440</span>*x^<span class=\"number\">377</span> + <span class=\"number\">247985412</span>*x^<span class=\"number\">376</span> + <span class=\"number\">993987710</span>*x^<span class=\"number\">375</span> + <span class=\"number\">618989435</span>*x^<span class=\"number\">374</span> + <span class=\"number\">600506682</span>*x^<span class=\"number\">373</span> + <span class=\"number\">179955505</span>*x^<span class=\"number\">372</span> + <span class=\"number\">956234357</span>*x^<span class=\"number\">371</span> + <span class=\"number\">1049030902</span>*x^<span class=\"number\">370</span> + <span class=\"number\">727597507</span>*x^<span class=\"number\">369</span> + <span class=\"number\">1196607714</span>*x^<span class=\"number\">368</span> + <span class=\"number\">610634244</span>*x^<span class=\"number\">367</span> + <span class=\"number\">619865634</span>*x^<span class=\"number\">366</span> + <span class=\"number\">849131167</span>*x^<span class=\"number\">365</span> + <span class=\"number\">1094185730</span>*x^<span class=\"number\">364</span> + <span class=\"number\">685353152</span>*x^<span class=\"number\">363</span> + <span class=\"number\">299082549</span>*x^<span class=\"number\">362</span> + <span class=\"number\">1076769237</span>*x^<span class=\"number\">361</span> + <span class=\"number\">792938001</span>*x^<span class=\"number\">360</span> + <span class=\"number\">885082721</span>*x^<span class=\"number\">359</span> + <span class=\"number\">1198739364</span>*x^<span class=\"number\">358</span> + <span class=\"number\">273154602</span>*x^<span class=\"number\">357</span> + <span class=\"number\">597517874</span>*x^<span class=\"number\">356</span> + <span class=\"number\">351418158</span>*x^<span class=\"number\">355</span> + <span class=\"number\">621945565</span>*x^<span class=\"number\">354</span> + <span class=\"number\">949756104</span>*x^<span class=\"number\">353</span> + <span class=\"number\">1020290901</span>*x^<span class=\"number\">352</span> + <span class=\"number\">315372660</span>*x^<span class=\"number\">351</span> + <span class=\"number\">291246927</span>*x^<span class=\"number\">350</span> + <span class=\"number\">1016861207</span>*x^<span class=\"number\">349</span> + <span class=\"number\">171467993</span>*x^<span class=\"number\">348</span> + <span class=\"number\">1074074496</span>*x^<span class=\"number\">347</span> + <span class=\"number\">660775696</span>*x^<span class=\"number\">346</span> + <span class=\"number\">562891589</span>*x^<span class=\"number\">345</span> + <span class=\"number\">258618000</span>*x^<span class=\"number\">344</span> + <span class=\"number\">521058831</span>*x^<span class=\"number\">343</span> + <span class=\"number\">152819838</span>*x^<span class=\"number\">342</span> + <span class=\"number\">1141330990</span>*x^<span class=\"number\">341</span> + <span class=\"number\">383408903</span>*x^<span class=\"number\">340</span> + <span class=\"number\">677850803</span>*x^<span class=\"number\">339</span> + <span class=\"number\">165908062</span>*x^<span class=\"number\">338</span> + <span class=\"number\">66975904</span>*x^<span class=\"number\">337</span> + <span class=\"number\">510786934</span>*x^<span class=\"number\">336</span> + <span class=\"number\">32306220</span>*x^<span class=\"number\">335</span> + <span class=\"number\">708115806</span>*x^<span class=\"number\">334</span> + <span class=\"number\">474352780</span>*x^<span class=\"number\">333</span> + <span class=\"number\">963188335</span>*x^<span class=\"number\">332</span> + <span class=\"number\">151844162</span>*x^<span class=\"number\">331</span> + <span class=\"number\">907339624</span>*x^<span class=\"number\">330</span> + <span class=\"number\">456166118</span>*x^<span class=\"number\">329</span> + <span class=\"number\">111742252</span>*x^<span class=\"number\">328</span> + <span class=\"number\">318018829</span>*x^<span class=\"number\">327</span> + <span class=\"number\">624012970</span>*x^<span class=\"number\">326</span> + <span class=\"number\">255354390</span>*x^<span class=\"number\">325</span> + <span class=\"number\">1218329311</span>*x^<span class=\"number\">324</span> + <span class=\"number\">375000855</span>*x^<span class=\"number\">323</span> + <span class=\"number\">54956044</span>*x^<span class=\"number\">322</span> + <span class=\"number\">13543809</span>*x^<span class=\"number\">321</span> + <span class=\"number\">671163260</span>*x^<span class=\"number\">320</span> + <span class=\"number\">226676913</span>*x^<span class=\"number\">319</span> + <span class=\"number\">1193470867</span>*x^<span class=\"number\">318</span> + <span class=\"number\">477161216</span>*x^<span class=\"number\">317</span> + <span class=\"number\">519506783</span>*x^<span class=\"number\">316</span> + <span class=\"number\">748987057</span>*x^<span class=\"number\">315</span> + <span class=\"number\">768531367</span>*x^<span class=\"number\">314</span> + <span class=\"number\">327816599</span>*x^<span class=\"number\">313</span> + <span class=\"number\">59056092</span>*x^<span class=\"number\">312</span> + <span class=\"number\">520958252</span>*x^<span class=\"number\">311</span> + <span class=\"number\">243337260</span>*x^<span class=\"number\">310</span> + <span class=\"number\">608632530</span>*x^<span class=\"number\">309</span> + <span class=\"number\">65258636</span>*x^<span class=\"number\">308</span> + <span class=\"number\">1012579720</span>*x^<span class=\"number\">307</span> + <span class=\"number\">400176357</span>*x^<span class=\"number\">306</span> + <span class=\"number\">104583966</span>*x^<span class=\"number\">305</span> + <span class=\"number\">1114827176</span>*x^<span class=\"number\">304</span> + <span class=\"number\">70705682</span>*x^<span class=\"number\">303</span> + <span class=\"number\">5320656</span>*x^<span class=\"number\">302</span> + <span class=\"number\">1207465008</span>*x^<span class=\"number\">301</span> + <span class=\"number\">1211372826</span>*x^<span class=\"number\">300</span> + <span class=\"number\">886104873</span>*x^<span class=\"number\">299</span> + <span class=\"number\">747144635</span>*x^<span class=\"number\">298</span> + <span class=\"number\">227753814</span>*x^<span class=\"number\">297</span> + <span class=\"number\">427912588</span>*x^<span class=\"number\">296</span> + <span class=\"number\">425232985</span>*x^<span class=\"number\">295</span> + <span class=\"number\">135219277</span>*x^<span class=\"number\">294</span> + <span class=\"number\">541439233</span>*x^<span class=\"number\">293</span> + <span class=\"number\">82586191</span>*x^<span class=\"number\">292</span> + <span class=\"number\">1024575564</span>*x^<span class=\"number\">291</span> + <span class=\"number\">408418547</span>*x^<span class=\"number\">290</span> + <span class=\"number\">1076407665</span>*x^<span class=\"number\">289</span> + <span class=\"number\">184646604</span>*x^<span class=\"number\">288</span> + <span class=\"number\">894569780</span>*x^<span class=\"number\">287</span> + <span class=\"number\">730742386</span>*x^<span class=\"number\">286</span> + <span class=\"number\">473643018</span>*x^<span class=\"number\">285</span> + <span class=\"number\">561906151</span>*x^<span class=\"number\">284</span> + <span class=\"number\">582231889</span>*x^<span class=\"number\">283</span> + <span class=\"number\">928617667</span>*x^<span class=\"number\">282</span> + <span class=\"number\">460594931</span>*x^<span class=\"number\">281</span> + <span class=\"number\">946340582</span>*x^<span class=\"number\">280</span> + <span class=\"number\">881007408</span>*x^<span class=\"number\">279</span> + <span class=\"number\">655553538</span>*x^<span class=\"number\">278</span> + <span class=\"number\">107738502</span>*x^<span class=\"number\">277</span> + <span class=\"number\">958107338</span>*x^<span class=\"number\">276</span> + <span class=\"number\">874269820</span>*x^<span class=\"number\">275</span> + <span class=\"number\">689734430</span>*x^<span class=\"number\">274</span> + <span class=\"number\">1025286771</span>*x^<span class=\"number\">273</span> + <span class=\"number\">809509338</span>*x^<span class=\"number\">272</span> + <span class=\"number\">126580761</span>*x^<span class=\"number\">271</span> + <span class=\"number\">425724981</span>*x^<span class=\"number\">270</span> + <span class=\"number\">91398446</span>*x^<span class=\"number\">269</span> + <span class=\"number\">915486182</span>*x^<span class=\"number\">268</span> + <span class=\"number\">750598785</span>*x^<span class=\"number\">267</span> + <span class=\"number\">331692120</span>*x^<span class=\"number\">266</span> + <span class=\"number\">266239686</span>*x^<span class=\"number\">265</span> + <span class=\"number\">41813860</span>*x^<span class=\"number\">264</span> + <span class=\"number\">1003196915</span>*x^<span class=\"number\">263</span> + <span class=\"number\">1006275694</span>*x^<span class=\"number\">262</span> + <span class=\"number\">958171508</span>*x^<span class=\"number\">261</span> + <span class=\"number\">387655573</span>*x^<span class=\"number\">260</span> + <span class=\"number\">529686749</span>*x^<span class=\"number\">259</span> + <span class=\"number\">2533683</span>*x^<span class=\"number\">258</span> + <span class=\"number\">851532040</span>*x^<span class=\"number\">257</span> + <span class=\"number\">515865631</span>*x^<span class=\"number\">256</span> + <span class=\"number\">331149910</span>*x^<span class=\"number\">255</span> + <span class=\"number\">1058283457</span>*x^<span class=\"number\">254</span> + <span class=\"number\">478391568</span>*x^<span class=\"number\">253</span> + <span class=\"number\">1020601120</span>*x^<span class=\"number\">252</span> + <span class=\"number\">193954604</span>*x^<span class=\"number\">251</span> + <span class=\"number\">125558467</span>*x^<span class=\"number\">250</span> + <span class=\"number\">916367669</span>*x^<span class=\"number\">249</span> + <span class=\"number\">965664721</span>*x^<span class=\"number\">248</span> + <span class=\"number\">737411958</span>*x^<span class=\"number\">247</span> + <span class=\"number\">145954639</span>*x^<span class=\"number\">246</span> + <span class=\"number\">787702411</span>*x^<span class=\"number\">245</span> + <span class=\"number\">256023548</span>*x^<span class=\"number\">244</span> + <span class=\"number\">831752864</span>*x^<span class=\"number\">243</span> + <span class=\"number\">637799028</span>*x^<span class=\"number\">242</span> + <span class=\"number\">202325459</span>*x^<span class=\"number\">241</span> + <span class=\"number\">189858829</span>*x^<span class=\"number\">240</span> + <span class=\"number\">221236168</span>*x^<span class=\"number\">239</span> + <span class=\"number\">276967229</span>*x^<span class=\"number\">238</span> + <span class=\"number\">732958371</span>*x^<span class=\"number\">237</span> + <span class=\"number\">31622618</span>*x^<span class=\"number\">236</span> + <span class=\"number\">558911372</span>*x^<span class=\"number\">235</span> + <span class=\"number\">257580689</span>*x^<span class=\"number\">234</span> + <span class=\"number\">490167674</span>*x^<span class=\"number\">233</span> + <span class=\"number\">1164269554</span>*x^<span class=\"number\">232</span> + <span class=\"number\">765931664</span>*x^<span class=\"number\">231</span> + <span class=\"number\">89716985</span>*x^<span class=\"number\">230</span> + <span class=\"number\">639008878</span>*x^<span class=\"number\">229</span> + <span class=\"number\">716033538</span>*x^<span class=\"number\">228</span> + <span class=\"number\">186948569</span>*x^<span class=\"number\">227</span> + <span class=\"number\">870251868</span>*x^<span class=\"number\">226</span> + <span class=\"number\">383121640</span>*x^<span class=\"number\">225</span> + <span class=\"number\">604362204</span>*x^<span class=\"number\">224</span> + <span class=\"number\">405526662</span>*x^<span class=\"number\">223</span> + <span class=\"number\">127371887</span>*x^<span class=\"number\">222</span> + <span class=\"number\">543669202</span>*x^<span class=\"number\">221</span> + <span class=\"number\">823112915</span>*x^<span class=\"number\">220</span> + <span class=\"number\">523517382</span>*x^<span class=\"number\">219</span> + <span class=\"number\">791437322</span>*x^<span class=\"number\">218</span> + <span class=\"number\">1069279817</span>*x^<span class=\"number\">217</span> + <span class=\"number\">960628355</span>*x^<span class=\"number\">216</span> + <span class=\"number\">1012582276</span>*x^<span class=\"number\">215</span> + <span class=\"number\">1200088601</span>*x^<span class=\"number\">214</span> + <span class=\"number\">927011022</span>*x^<span class=\"number\">213</span> + <span class=\"number\">830570829</span>*x^<span class=\"number\">212</span> + <span class=\"number\">700668365</span>*x^<span class=\"number\">211</span> + <span class=\"number\">1205573850</span>*x^<span class=\"number\">210</span> + <span class=\"number\">276778781</span>*x^<span class=\"number\">209</span> + <span class=\"number\">786305215</span>*x^<span class=\"number\">208</span> + <span class=\"number\">928215922</span>*x^<span class=\"number\">207</span> + <span class=\"number\">154393796</span>*x^<span class=\"number\">206</span> + <span class=\"number\">169298902</span>*x^<span class=\"number\">205</span> + <span class=\"number\">177646296</span>*x^<span class=\"number\">204</span> + <span class=\"number\">173339370</span>*x^<span class=\"number\">203</span> + <span class=\"number\">287217637</span>*x^<span class=\"number\">202</span> + <span class=\"number\">1077403939</span>*x^<span class=\"number\">201</span> + <span class=\"number\">1004965535</span>*x^<span class=\"number\">200</span> + <span class=\"number\">677352462</span>*x^<span class=\"number\">199</span> + <span class=\"number\">545192340</span>*x^<span class=\"number\">198</span> + <span class=\"number\">464170452</span>*x^<span class=\"number\">197</span> + <span class=\"number\">381853900</span>*x^<span class=\"number\">196</span> + <span class=\"number\">205643848</span>*x^<span class=\"number\">195</span> + <span class=\"number\">973330672</span>*x^<span class=\"number\">194</span> + <span class=\"number\">1148733662</span>*x^<span class=\"number\">193</span> + <span class=\"number\">458436519</span>*x^<span class=\"number\">192</span> + <span class=\"number\">68604889</span>*x^<span class=\"number\">191</span> + <span class=\"number\">193530886</span>*x^<span class=\"number\">190</span> + <span class=\"number\">141661386</span>*x^<span class=\"number\">189</span> + <span class=\"number\">1117183144</span>*x^<span class=\"number\">188</span> + <span class=\"number\">153035244</span>*x^<span class=\"number\">187</span> + <span class=\"number\">830892599</span>*x^<span class=\"number\">186</span> + <span class=\"number\">795500906</span>*x^<span class=\"number\">185</span> + <span class=\"number\">67041425</span>*x^<span class=\"number\">184</span> + <span class=\"number\">617209634</span>*x^<span class=\"number\">183</span> + <span class=\"number\">180547177</span>*x^<span class=\"number\">182</span> + <span class=\"number\">1183445159</span>*x^<span class=\"number\">181</span> + <span class=\"number\">303603618</span>*x^<span class=\"number\">180</span> + <span class=\"number\">842724764</span>*x^<span class=\"number\">179</span> + <span class=\"number\">784982658</span>*x^<span class=\"number\">178</span> + <span class=\"number\">1199356684</span>*x^<span class=\"number\">177</span> + <span class=\"number\">321497016</span>*x^<span class=\"number\">176</span> + <span class=\"number\">513738925</span>*x^<span class=\"number\">175</span> + <span class=\"number\">465949450</span>*x^<span class=\"number\">174</span> + <span class=\"number\">981246204</span>*x^<span class=\"number\">173</span> + <span class=\"number\">814398377</span>*x^<span class=\"number\">172</span> + <span class=\"number\">950247970</span>*x^<span class=\"number\">171</span> + <span class=\"number\">720838080</span>*x^<span class=\"number\">170</span> + <span class=\"number\">399493165</span>*x^<span class=\"number\">169</span> + <span class=\"number\">735365971</span>*x^<span class=\"number\">168</span> + <span class=\"number\">109745845</span>*x^<span class=\"number\">167</span> + <span class=\"number\">897998838</span>*x^<span class=\"number\">166</span> + <span class=\"number\">547497972</span>*x^<span class=\"number\">165</span> + <span class=\"number\">174675208</span>*x^<span class=\"number\">164</span> + <span class=\"number\">716115074</span>*x^<span class=\"number\">163</span> + <span class=\"number\">237209800</span>*x^<span class=\"number\">162</span> + <span class=\"number\">186394653</span>*x^<span class=\"number\">161</span> + <span class=\"number\">876995839</span>*x^<span class=\"number\">160</span> + <span class=\"number\">1187252196</span>*x^<span class=\"number\">159</span> + <span class=\"number\">819282320</span>*x^<span class=\"number\">158</span> + <span class=\"number\">44596523</span>*x^<span class=\"number\">157</span> + <span class=\"number\">679033559</span>*x^<span class=\"number\">156</span> + <span class=\"number\">736746236</span>*x^<span class=\"number\">155</span> + <span class=\"number\">1184916922</span>*x^<span class=\"number\">154</span> + <span class=\"number\">451294643</span>*x^<span class=\"number\">153</span> + <span class=\"number\">443590366</span>*x^<span class=\"number\">152</span> + <span class=\"number\">304384335</span>*x^<span class=\"number\">151</span> + <span class=\"number\">1064695584</span>*x^<span class=\"number\">150</span> + <span class=\"number\">602535518</span>*x^<span class=\"number\">149</span> + <span class=\"number\">684486124</span>*x^<span class=\"number\">148</span> + <span class=\"number\">863476315</span>*x^<span class=\"number\">147</span> + <span class=\"number\">496170722</span>*x^<span class=\"number\">146</span> + <span class=\"number\">737062216</span>*x^<span class=\"number\">145</span> + <span class=\"number\">285799611</span>*x^<span class=\"number\">144</span> + <span class=\"number\">1085153158</span>*x^<span class=\"number\">143</span> + <span class=\"number\">247783563</span>*x^<span class=\"number\">142</span> + <span class=\"number\">1208043659</span>*x^<span class=\"number\">141</span> + <span class=\"number\">208776666</span>*x^<span class=\"number\">140</span> + <span class=\"number\">117730360</span>*x^<span class=\"number\">139</span> + <span class=\"number\">279620264</span>*x^<span class=\"number\">138</span> + <span class=\"number\">273045622</span>*x^<span class=\"number\">137</span> + <span class=\"number\">893971194</span>*x^<span class=\"number\">136</span> + <span class=\"number\">240743423</span>*x^<span class=\"number\">135</span> + <span class=\"number\">1143029271</span>*x^<span class=\"number\">134</span> + <span class=\"number\">326725356</span>*x^<span class=\"number\">133</span> + <span class=\"number\">294174585</span>*x^<span class=\"number\">132</span> + <span class=\"number\">672819095</span>*x^<span class=\"number\">131</span> + <span class=\"number\">138843366</span>*x^<span class=\"number\">130</span> + <span class=\"number\">1176670148</span>*x^<span class=\"number\">129</span> + <span class=\"number\">573825049</span>*x^<span class=\"number\">128</span> + <span class=\"number\">835249905</span>*x^<span class=\"number\">127</span> + <span class=\"number\">778468469</span>*x^<span class=\"number\">126</span> + <span class=\"number\">300257393</span>*x^<span class=\"number\">125</span> + <span class=\"number\">409352854</span>*x^<span class=\"number\">124</span> + <span class=\"number\">953527813</span>*x^<span class=\"number\">123</span> + <span class=\"number\">653640743</span>*x^<span class=\"number\">122</span> + <span class=\"number\">1210615840</span>*x^<span class=\"number\">121</span> + <span class=\"number\">596684403</span>*x^<span class=\"number\">120</span> + <span class=\"number\">46012813</span>*x^<span class=\"number\">119</span> + <span class=\"number\">510765516</span>*x^<span class=\"number\">118</span> + <span class=\"number\">1213476223</span>*x^<span class=\"number\">117</span> + <span class=\"number\">1132779740</span>*x^<span class=\"number\">116</span> + <span class=\"number\">769195645</span>*x^<span class=\"number\">115</span> + <span class=\"number\">963749389</span>*x^<span class=\"number\">114</span> + <span class=\"number\">843804183</span>*x^<span class=\"number\">113</span> + <span class=\"number\">109759209</span>*x^<span class=\"number\">112</span> + <span class=\"number\">493130294</span>*x^<span class=\"number\">111</span> + <span class=\"number\">1122857844</span>*x^<span class=\"number\">110</span> + <span class=\"number\">1130618881</span>*x^<span class=\"number\">109</span> + <span class=\"number\">648465049</span>*x^<span class=\"number\">108</span> + <span class=\"number\">364595574</span>*x^<span class=\"number\">107</span> + <span class=\"number\">410134064</span>*x^<span class=\"number\">106</span> + <span class=\"number\">597836905</span>*x^<span class=\"number\">105</span> + <span class=\"number\">831243271</span>*x^<span class=\"number\">104</span> + <span class=\"number\">226275998</span>*x^<span class=\"number\">103</span> + <span class=\"number\">686704033</span>*x^<span class=\"number\">102</span> + <span class=\"number\">662011231</span>*x^<span class=\"number\">101</span> + <span class=\"number\">112226051</span>*x^<span class=\"number\">100</span> + <span class=\"number\">623946037</span>*x^<span class=\"number\">99</span> + <span class=\"number\">469742204</span>*x^<span class=\"number\">98</span> + <span class=\"number\">369854172</span>*x^<span class=\"number\">97</span> + <span class=\"number\">731154062</span>*x^<span class=\"number\">96</span> + <span class=\"number\">352916654</span>*x^<span class=\"number\">95</span> + <span class=\"number\">45991298</span>*x^<span class=\"number\">94</span> + <span class=\"number\">614913911</span>*x^<span class=\"number\">93</span> + <span class=\"number\">632337602</span>*x^<span class=\"number\">92</span> + <span class=\"number\">327529986</span>*x^<span class=\"number\">91</span> + <span class=\"number\">111251878</span>*x^<span class=\"number\">90</span> + <span class=\"number\">657089210</span>*x^<span class=\"number\">89</span> + <span class=\"number\">499853920</span>*x^<span class=\"number\">88</span> + <span class=\"number\">966818975</span>*x^<span class=\"number\">87</span> + <span class=\"number\">454584975</span>*x^<span class=\"number\">86</span> + <span class=\"number\">116582431</span>*x^<span class=\"number\">85</span> + <span class=\"number\">619242494</span>*x^<span class=\"number\">84</span> + <span class=\"number\">455382561</span>*x^<span class=\"number\">83</span> + <span class=\"number\">246350547</span>*x^<span class=\"number\">82</span> + <span class=\"number\">495191129</span>*x^<span class=\"number\">81</span> + <span class=\"number\">900852972</span>*x^<span class=\"number\">80</span> + <span class=\"number\">264825752</span>*x^<span class=\"number\">79</span> + <span class=\"number\">426813960</span>*x^<span class=\"number\">78</span> + <span class=\"number\">478124215</span>*x^<span class=\"number\">77</span> + <span class=\"number\">1080567657</span>*x^<span class=\"number\">76</span> + <span class=\"number\">858353771</span>*x^<span class=\"number\">75</span> + <span class=\"number\">215115660</span>*x^<span class=\"number\">74</span> + <span class=\"number\">963682245</span>*x^<span class=\"number\">73</span> + <span class=\"number\">964445096</span>*x^<span class=\"number\">72</span> + <span class=\"number\">73603206</span>*x^<span class=\"number\">71</span> + <span class=\"number\">734630202</span>*x^<span class=\"number\">70</span> + <span class=\"number\">199652522</span>*x^<span class=\"number\">69</span> + <span class=\"number\">520021635</span>*x^<span class=\"number\">68</span> + <span class=\"number\">763256200</span>*x^<span class=\"number\">67</span> + <span class=\"number\">861482624</span>*x^<span class=\"number\">66</span> + <span class=\"number\">890485659</span>*x^<span class=\"number\">65</span> + <span class=\"number\">523362913</span>*x^<span class=\"number\">64</span> + <span class=\"number\">785087110</span>*x^<span class=\"number\">63</span> + <span class=\"number\">381314881</span>*x^<span class=\"number\">62</span> + <span class=\"number\">843850504</span>*x^<span class=\"number\">61</span> + <span class=\"number\">61951613</span>*x^<span class=\"number\">60</span> + <span class=\"number\">119100925</span>*x^<span class=\"number\">59</span> + <span class=\"number\">531827488</span>*x^<span class=\"number\">58</span> + <span class=\"number\">199818669</span>*x^<span class=\"number\">57</span> + <span class=\"number\">592207491</span>*x^<span class=\"number\">56</span> + <span class=\"number\">354682041</span>*x^<span class=\"number\">55</span> + <span class=\"number\">1015447358</span>*x^<span class=\"number\">54</span> + <span class=\"number\">328324806</span>*x^<span class=\"number\">53</span> + <span class=\"number\">24880841</span>*x^<span class=\"number\">52</span> + <span class=\"number\">516663598</span>*x^<span class=\"number\">51</span> + <span class=\"number\">716706066</span>*x^<span class=\"number\">50</span> + <span class=\"number\">1042483154</span>*x^<span class=\"number\">49</span> + <span class=\"number\">331433641</span>*x^<span class=\"number\">48</span> + <span class=\"number\">929901382</span>*x^<span class=\"number\">47</span> + <span class=\"number\">502140671</span>*x^<span class=\"number\">46</span> + <span class=\"number\">48123362</span>*x^<span class=\"number\">45</span> + <span class=\"number\">1112586174</span>*x^<span class=\"number\">44</span> + <span class=\"number\">14618102</span>*x^<span class=\"number\">43</span> + <span class=\"number\">764832169</span>*x^<span class=\"number\">42</span> + <span class=\"number\">446768463</span>*x^<span class=\"number\">41</span> + <span class=\"number\">920421919</span>*x^<span class=\"number\">40</span> + <span class=\"number\">491851586</span>*x^<span class=\"number\">39</span> + <span class=\"number\">24718814</span>*x^<span class=\"number\">38</span> + <span class=\"number\">83091454</span>*x^<span class=\"number\">37</span> + <span class=\"number\">155770396</span>*x^<span class=\"number\">36</span> + <span class=\"number\">12824441</span>*x^<span class=\"number\">35</span> + <span class=\"number\">954371888</span>*x^<span class=\"number\">34</span> + <span class=\"number\">318592841</span>*x^<span class=\"number\">33</span> + <span class=\"number\">788251579</span>*x^<span class=\"number\">32</span> + <span class=\"number\">246435934</span>*x^<span class=\"number\">31</span> + <span class=\"number\">387083299</span>*x^<span class=\"number\">30</span> + <span class=\"number\">395226231</span>*x^<span class=\"number\">29</span> + <span class=\"number\">646811732</span>*x^<span class=\"number\">28</span> + <span class=\"number\">1131418388</span>*x^<span class=\"number\">27</span> + <span class=\"number\">1135116504</span>*x^<span class=\"number\">26</span> + <span class=\"number\">986902782</span>*x^<span class=\"number\">25</span> + <span class=\"number\">323457413</span>*x^<span class=\"number\">24</span> + <span class=\"number\">521885110</span>*x^<span class=\"number\">23</span> + <span class=\"number\">234655676</span>*x^<span class=\"number\">22</span> + <span class=\"number\">965166497</span>*x^<span class=\"number\">21</span> + <span class=\"number\">755967054</span>*x^<span class=\"number\">20</span> + <span class=\"number\">574743395</span>*x^<span class=\"number\">19</span> + <span class=\"number\">1175664410</span>*x^<span class=\"number\">18</span> + <span class=\"number\">117322371</span>*x^<span class=\"number\">17</span> + <span class=\"number\">794664856</span>*x^<span class=\"number\">16</span> + <span class=\"number\">570463</span>*x^<span class=\"number\">15</span> + <span class=\"number\">1148572518</span>*x^<span class=\"number\">14</span> + <span class=\"number\">439320220</span>*x^<span class=\"number\">13</span> + <span class=\"number\">815953366</span>*x^<span class=\"number\">12</span> + <span class=\"number\">389050726</span>*x^<span class=\"number\">11</span> + <span class=\"number\">1167287391</span>*x^<span class=\"number\">10</span> + <span class=\"number\">397052468</span>*x^<span class=\"number\">9</span> + <span class=\"number\">275572458</span>*x^<span class=\"number\">8</span> + <span class=\"number\">548665509</span>*x^<span class=\"number\">7</span> + <span class=\"number\">1202175986</span>*x^<span class=\"number\">6</span> + <span class=\"number\">518662014</span>*x^<span class=\"number\">5</span> + <span class=\"number\">1084425257</span>*x^<span class=\"number\">4</span> + <span class=\"number\">7854568</span>*x^<span class=\"number\">3</span> + <span class=\"number\">274607457</span>*x^<span class=\"number\">2</span> + <span class=\"number\">162444786</span>*x + <span class=\"number\">410560230</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps = [x - <span class=\"number\">1</span>,x + <span class=\"number\">1</span>,x^<span class=\"number\">2</span> + <span class=\"number\">1</span>,x^<span class=\"number\">4</span> + <span class=\"number\">1</span>,x^<span class=\"number\">8</span> + <span class=\"number\">1</span>,x^<span class=\"number\">16</span> + <span class=\"number\">1</span>,x^<span class=\"number\">32</span> + <span class=\"number\">1</span>,x^<span class=\"number\">64</span> + <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">flatter</span>(<span class=\"params\">M</span>):</span><br><span class=\"line\">    <span class=\"comment\"># compile https://github.com/keeganryan/flatter and put it in $PATH</span></span><br><span class=\"line\">    z = <span class=\"string\">&quot;[[&quot;</span> + <span class=\"string\">&quot;]\\n[&quot;</span>.join(<span class=\"string\">&quot; &quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, row)) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> M) + <span class=\"string\">&quot;]]&quot;</span></span><br><span class=\"line\">    ret = check_output([<span class=\"string\">&quot;flatter&quot;</span>], <span class=\"built_in\">input</span>=z.encode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> matrix(M.nrows(), M.ncols(), <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, findall(<span class=\"string\">b&quot;-?\\\\d+&quot;</span>, ret)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">poly, a, b, slen=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"comment\"># solve for a*s+e=b (mod poly)</span></span><br><span class=\"line\">    <span class=\"comment\"># where s and e are small</span></span><br><span class=\"line\">    <span class=\"comment\"># and len(s) = slen</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> mat, mat2</span><br><span class=\"line\">    n = poly.degree()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> slen <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        slen = n</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Try solving with deg(poly) = <span class=\"subst\">&#123;n&#125;</span>&quot;</span>)</span><br><span class=\"line\">    t0 = time()</span><br><span class=\"line\">    main_block = matrix([vector(a * x**i % poly) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)])</span><br><span class=\"line\">    approx = <span class=\"number\">512</span> // n  <span class=\"comment\"># approximation for the average of target vector</span></span><br><span class=\"line\">    mat = block_matrix(</span><br><span class=\"line\">        ZZ,</span><br><span class=\"line\">        [</span><br><span class=\"line\">            [<span class=\"number\">1</span>, -main_block, <span class=\"number\">0</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span>, q, <span class=\"number\">0</span>],</span><br><span class=\"line\">            <span class=\"comment\"># kannan embedding</span></span><br><span class=\"line\">            [</span><br><span class=\"line\">                <span class=\"number\">0</span>,</span><br><span class=\"line\">                matrix(vector(b % poly)),</span><br><span class=\"line\">                matrix([[approx]]),</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    )</span><br><span class=\"line\">    mat[:, slen:n] *= q  <span class=\"comment\"># force zero</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Lattice size = <span class=\"subst\">&#123;mat.dimensions()&#125;</span>&quot;</span>)</span><br><span class=\"line\">    mat2 = flatter(mat)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;mat.nrows()&#125;</span>x<span class=\"subst\">&#123;mat.ncols()&#125;</span> lattice reduced in <span class=\"subst\">&#123;time()-t0&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ret <span class=\"keyword\">in</span> mat2:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ret[-<span class=\"number\">1</span>] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            ret = -ret</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ret[-<span class=\"number\">1</span>] == approx:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(ret)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> F(<span class=\"built_in\">list</span>(ret[:n]))</span><br><span class=\"line\"></span><br><span class=\"line\">rs = [solve(p, a, b) <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> ps]</span><br><span class=\"line\">L = lcm(ps[:-<span class=\"number\">1</span>])  <span class=\"comment\"># deg(L) = 256</span></span><br><span class=\"line\">s_mod_L = crt(rs, ps)  <span class=\"comment\"># this is s (mod L)</span></span><br><span class=\"line\">e_mod_L = (b - a * s_mod_L) % L</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---------------&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s_mod_L)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(e_mod_L)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">q = <span class=\"number\">1219077173</span></span><br><span class=\"line\">P.&lt;x&gt; = PolynomialRing(Zmod(q))</span><br><span class=\"line\">A = <span class=\"number\">114</span>*x^<span class=\"number\">63</span> + <span class=\"number\">49</span>*x^<span class=\"number\">62</span> + <span class=\"number\">104</span>*x^<span class=\"number\">61</span> + <span class=\"number\">56</span>*x^<span class=\"number\">60</span> + <span class=\"number\">84</span>*x^<span class=\"number\">59</span> + <span class=\"number\">49</span>*x^<span class=\"number\">58</span> + <span class=\"number\">60</span>*x^<span class=\"number\">57</span> + <span class=\"number\">37</span>*x^<span class=\"number\">56</span> + <span class=\"number\">36</span>*x^<span class=\"number\">55</span> + <span class=\"number\">55</span>*x^<span class=\"number\">54</span> + <span class=\"number\">106</span>*x^<span class=\"number\">53</span> + <span class=\"number\">40</span>*x^<span class=\"number\">52</span> + <span class=\"number\">111</span>*x^<span class=\"number\">51</span> + <span class=\"number\">61</span>*x^<span class=\"number\">50</span> + <span class=\"number\">111</span>*x^<span class=\"number\">49</span> + <span class=\"number\">68</span>*x^<span class=\"number\">48</span> + <span class=\"number\">111</span>*x^<span class=\"number\">47</span> + <span class=\"number\">125</span>*x^<span class=\"number\">46</span> + <span class=\"number\">81</span>*x^<span class=\"number\">45</span> + <span class=\"number\">68</span>*x^<span class=\"number\">44</span> + <span class=\"number\">35</span>*x^<span class=\"number\">43</span> + <span class=\"number\">53</span>*x^<span class=\"number\">42</span> + <span class=\"number\">94</span>*x^<span class=\"number\">41</span> + <span class=\"number\">62</span>*x^<span class=\"number\">40</span> + <span class=\"number\">74</span>*x^<span class=\"number\">39</span> + <span class=\"number\">60</span>*x^<span class=\"number\">38</span> + <span class=\"number\">33</span>*x^<span class=\"number\">37</span> + <span class=\"number\">111</span>*x^<span class=\"number\">36</span> + <span class=\"number\">67</span>*x^<span class=\"number\">35</span> + <span class=\"number\">64</span>*x^<span class=\"number\">34</span> + <span class=\"number\">75</span>*x^<span class=\"number\">33</span> + <span class=\"number\">65</span>*x^<span class=\"number\">32</span> + <span class=\"number\">33</span>*x^<span class=\"number\">31</span> + <span class=\"number\">121</span>*x^<span class=\"number\">30</span> + <span class=\"number\">108</span>*x^<span class=\"number\">29</span> + <span class=\"number\">111</span>*x^<span class=\"number\">28</span> + <span class=\"number\">80</span>*x^<span class=\"number\">27</span> + <span class=\"number\">95</span>*x^<span class=\"number\">26</span> + <span class=\"number\">99</span>*x^<span class=\"number\">25</span> + <span class=\"number\">49</span>*x^<span class=\"number\">24</span> + <span class=\"number\">109</span>*x^<span class=\"number\">23</span> + <span class=\"number\">111</span>*x^<span class=\"number\">22</span> + <span class=\"number\">116</span>*x^<span class=\"number\">21</span> + <span class=\"number\">79</span>*x^<span class=\"number\">20</span> + <span class=\"number\">108</span>*x^<span class=\"number\">19</span> + <span class=\"number\">99</span>*x^<span class=\"number\">18</span> + <span class=\"number\">121</span>*x^<span class=\"number\">17</span> + <span class=\"number\">67</span>*x^<span class=\"number\">16</span> + <span class=\"number\">95</span>*x^<span class=\"number\">15</span> + <span class=\"number\">119</span>*x^<span class=\"number\">14</span> + <span class=\"number\">48</span>*x^<span class=\"number\">13</span> + <span class=\"number\">110</span>*x^<span class=\"number\">12</span> + <span class=\"number\">75</span>*x^<span class=\"number\">11</span> + <span class=\"number\">95</span>*x^<span class=\"number\">10</span> + <span class=\"number\">89</span>*x^<span class=\"number\">9</span> + <span class=\"number\">49</span>*x^<span class=\"number\">8</span> + <span class=\"number\">49</span>*x^<span class=\"number\">7</span> + <span class=\"number\">52</span>*x^<span class=\"number\">6</span> + <span class=\"number\">64</span>*x^<span class=\"number\">5</span> + <span class=\"number\">82</span>*x^<span class=\"number\">4</span> + <span class=\"number\">95</span>*x^<span class=\"number\">3</span> + <span class=\"number\">117</span>*x^<span class=\"number\">2</span> + <span class=\"number\">48</span>*x + <span class=\"number\">89</span></span><br><span class=\"line\">AA = A.coefficient()</span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(AA)):</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(AA[i])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://n0b8wz8yo3e.feishu.cn/space/api/box/stream/download/asynccode/?code=OGQwMDU4YWZlYjM2YzllYTZkYWY0MmE2ODU3M2RmY2ZfNTZZemdSa1lnYnBLWHlmYWkxSVVpcXZDbDV4YUJ0d3JfVG9rZW46Wkw3VWJkYjZDb3VtSDV4cmxrZGNvVXFWbkliXzE3MDcyMDY1MjE6MTcwNzIxMDEyMV9WNA\" alt=\"img\" /></p>\n<p><img data-src=\"https://n0b8wz8yo3e.feishu.cn/space/api/box/stream/download/asynccode/?code=OGYzNDVlNzUwNTZiMTM1ZTJiNzEyYjliMjJlOTgyOTZfbUZmY0N5V0kwbWpWa0V6SDUwWGVHVGZyOGdqNHdkVHBfVG9rZW46Sjk0a2J1V0dkb3U3cWF4WDVEYWN5RDA0blBlXzE3MDcyMDY1MjE6MTcwNzIxMDEyMV9WNA\" alt=\"img\" /></p>\n<h2 id=\"can_you_guess_me\"><a class=\"anchor\" href=\"#can_you_guess_me\">#</a> <strong>can_you_guess_me</strong></h2>\n<p>造格解决，求出 t，转换为 hnp 问题。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\">T = <span class=\"number\">2</span>**<span class=\"number\">48</span></span><br><span class=\"line\">E = <span class=\"number\">2</span>**<span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\">q = <span class=\"number\">313199526393254794805899275326380083313</span></span><br><span class=\"line\">a = [<span class=\"number\">258948702106389340127909287396807150259</span>, <span class=\"number\">130878573261697415793888397911168583971</span>, <span class=\"number\">287085364108707601156242002650192970665</span>, <span class=\"number\">172240654236516299340495055728541554805</span>, <span class=\"number\">206056586779420225992168537876290239524</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">m = matrix(ZZ,<span class=\"number\">6</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    m[i,-<span class=\"number\">1</span>] = a[i]</span><br><span class=\"line\">    m[i,i] = <span class=\"number\">1</span></span><br><span class=\"line\">m[-<span class=\"number\">1</span>,-<span class=\"number\">1</span>] = q</span><br><span class=\"line\">M = m.LLL()</span><br><span class=\"line\"></span><br><span class=\"line\">T_ = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    T_1 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        T_1.append(M[i,j])</span><br><span class=\"line\">    T_.append(T_1)</span><br><span class=\"line\"><span class=\"comment\"># print(T_)</span></span><br><span class=\"line\">result1=matrix(ZZ,T_[:-<span class=\"number\">2</span>]).right_kernel()</span><br><span class=\"line\">t = result1.basis()</span><br><span class=\"line\"><span class=\"comment\"># print(t)</span></span><br><span class=\"line\"></span><br><span class=\"line\">t = [<span class=\"number\">70461467654746</span>, <span class=\"number\">7976473815457</span>, <span class=\"number\">179142956465832</span>, <span class=\"number\">176554799971356</span>, <span class=\"number\">145182873667321</span>]</span><br><span class=\"line\">bound = <span class=\"number\">2</span> ^ <span class=\"number\">32</span></span><br><span class=\"line\">HNP = matrix(QQ,<span class=\"number\">7</span>,<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    HNP[i,i] = q</span><br><span class=\"line\">    HNP[-<span class=\"number\">2</span>,i] = t[i]</span><br><span class=\"line\">    HNP[-<span class=\"number\">1</span>,i] = -a[i]</span><br><span class=\"line\">HNP[-<span class=\"number\">2</span>,-<span class=\"number\">2</span>] = bound/q</span><br><span class=\"line\">HNP[-<span class=\"number\">1</span>,-<span class=\"number\">1</span>] = bound</span><br><span class=\"line\">m_final = HNP.LLL()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(m_final)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> m_final:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(line[-<span class=\"number\">1</span>] == bound):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\"><span class=\"comment\"># for i in range(7):</span></span><br><span class=\"line\"><span class=\"comment\">#     print(int(m_final[i,-2]*q)//2^128 % q)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(m_final*HNP^(-1))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">258948702106389340127909287396807150259</span>, <span class=\"number\">130878573261697415793888397911168583971</span>, <span class=\"number\">287085364108707601156242002650192970665</span>, <span class=\"number\">172240654236516299340495055728541554805</span>, <span class=\"number\">206056586779420225992168537876290239524</span>]</span><br><span class=\"line\">t = [<span class=\"number\">70461467654746</span>, <span class=\"number\">7976473815457</span>, <span class=\"number\">179142956465832</span>, <span class=\"number\">176554799971356</span>, <span class=\"number\">145182873667321</span>]</span><br><span class=\"line\">e = [<span class=\"number\">1207385170</span>, <span class=\"number\">2227664800</span>, <span class=\"number\">194948058</span>, <span class=\"number\">2380502097</span>, <span class=\"number\">893798212</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"built_in\">int</span>(<span class=\"number\">61832802753575197703139019131565944821482782720</span>/<span class=\"number\">313199526393254794805899275326380083313</span> * q /bound)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(flag))</span><br><span class=\"line\"><span class=\"keyword\">assert</span>((t[<span class=\"number\">1</span>] * flag - e[<span class=\"number\">1</span>])%q == a[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://n0b8wz8yo3e.feishu.cn/space/api/box/stream/download/asynccode/?code=NjI5YWIxZjY0YWJhNzMwZmRiY2ExMmM1OWMwNGUwNGVfM01yVFFCdTFxd0JXYVZBcG5sU0pYMUxRT1dDY2V4ZkdfVG9rZW46Q09aRGJWSlM5b24xNXp4WmVJdWNoOExHbkpBXzE3MDcyMDY1MjE6MTcwNzIxMDEyMV9WNA\" alt=\"img\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://justgo00.github.io/2024/01/13/HNP/",
            "url": "https://justgo00.github.io/2024/01/13/HNP/",
            "title": "HNP问题",
            "date_published": "2024-01-13T04:33:59.110Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>格密码是一类备受关注的抗量子计算攻击的公钥密码体制。而格理论也使许多现代公钥密码 RSA、DSA 等体系受到影响。这篇文章主要从两道 CTF 题目来学习格密码中的 HNP (Hidden number problem）。</p>\n<h2 id=\"lattice\"><a class=\"anchor\" href=\"#lattice\">#</a> Lattice</h2>\n<p>首先谈谈个人对 Lattice 的理解叭。个人觉得，Latiice 就是由若干线性无关的向量组成的一个向量空间，在这个空间中，向量彼此之间可以进行相应的加、减运算。向量也可以乘以某个系数，但这个系数仅限于整数，因而形成了布满整个空间的格点。在格中的计算问题主要包括两种，即 SVP (the Shortest Vector Problem of lattice) 和 CVP (the Closest Vector  Problem)，然后个人认为，CVP 可以给 Latiice 加上一个维度后变成 SVP，继而可以用 LLL 算法来进行规约从而找到最短向量。</p>\n<h2 id=\"xctf2020-高校战役-nhp\"><a class=\"anchor\" href=\"#xctf2020-高校战役-nhp\">#</a> XCTF2020 - 高校战役 - NHP</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWdhLm56L2ZpbGUvZWZBelJhYkMjWnhYdFViY0h3QUE3anBjVTBINlY3ckFNUmZpU19yYm9IOUg5Wk45UzItVQ==\">题目附件</span></p>\n<h3 id=\"题目信息\"><a class=\"anchor\" href=\"#题目信息\">#</a> 题目信息</h3>\n<p>题目用的是 DSA 公钥密码签名系统。</p>\n<p>题目提供签名函数：用户以用户名注册，服务端返回签名，<strong>并提供所用临时密钥的 bit 长度</strong></p>\n<p>我们需要以 admin 的身份登陆来获取 flag，但是服务端不会给 admin 签名</p>\n<h3 id=\"解题流程\"><a class=\"anchor\" href=\"#解题流程\">#</a> 解题流程</h3>\n<p>根据题目流程，显然，我们要利用临时密钥的 bit 长度来获取私钥，从而获得 admin 的签名</p>\n<p>其中，我们知道的信息全局公钥 p, q, g，服务端公钥 y , 每轮签名使用的 r, s, 以及我们可控的 H (x)，x 即为用户名，Hash 函数这里用的是 sha256</p>\n<h4 id=\"step1-公式转化\"><a class=\"anchor\" href=\"#step1-公式转化\">#</a> step1 - 公式转化</h4>\n<p>由 DSA 签名中各参数的关系</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/yomndMflri8wUZt.png\" alt=\"img\" /></p>\n<p>可得每轮临时密钥与签名、明文的关系</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/H2LJSVgjyd9waON.png\" alt=\"img\" /></p>\n<p>其中 ki 就是每次使用的临时密钥</p>\n<p>化简后的式子中的 Ai,Bi 均可由已知信息计算</p>\n<h4 id=\"step2-构造lattice\"><a class=\"anchor\" href=\"#step2-构造lattice\">#</a> step2 - 构造 Lattice</h4>\n<p>对于上式中的 ki，我们仅仅知道它的 bit_ength，bit_ength 泄露了什么信息呢？</p>\n<p>当我们知道一个数的 bit_ength 时，我们能确定这个数的大小范围，</p>\n<p>比如一个数的 bit_ength 是 500 时，我们能确定这个数大小落在 (2<sup>499)-1 与 (2</sup>500)-1 之间</p>\n<p>所以我们知道这个数的 MSB 位为 2^499</p>\n<p>这等价于，我们知道了临时密钥的一个大概的值，我们设其为 K</p>\n<p>然后我们构造 Lattice</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/dkr61AXCW7EPzcR.png\" alt=\"img\" /></p>\n<p>然后这里就会存在一个向量<br />\n<img data-src=\"https://i.loli.net/2020/05/09/XFETnacORf3gwSm.png\" alt=\"img\" /></p>\n<p>使得</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/ykhUuYQRz6Lq8GZ.png\" alt=\"img\" /></p>\n<p>其中向量 v 中的 x 即为我们的私钥，</p>\n<h4 id=\"step3-lll\"><a class=\"anchor\" href=\"#step3-lll\">#</a> step3-LLL</h4>\n<p>解决格密码的问题 LLL 算法的运用总是必不可少的，可是这里我们该如何利用 LLL 算法去找到向量 vk 呢？</p>\n<p>如果我们的 vk 的长度在格中很小，我们利用 LLL 就很可能将其找出。所以，我们需要与服务端交互，然后收集当 ki 的 bit_length 比较小的情况时的相关数据。比如：我们知道 q 的 bit_length 为 128，那我们可以找 bit_legnth 为 122 的 ki，然后我们还需要一定的数据量，这样能提高利用 LLL 算法找到这个短向量的概率，并且，上述格中 K/q, K 的构造也是为了让 vk 中的每一项的长度都差不多，这样也有利于找到 vk，参考这一篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob2xvY2lyY3VpdC5naXRodWIuaW8vMjAxOS8wMS8wOC91bm9mZmljaWFsLmh0bWw=\">文章</span>中的</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/7NJvL2DSsXwHEnr.png\" alt=\"img\" /></p>\n<h2 id=\"npuctf2020-babylcg\"><a class=\"anchor\" href=\"#npuctf2020-babylcg\">#</a> NPUCTF2020-babyLCG</h2>\n<p>题目附件可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9idXVvai5jbi9jaGFsbGVuZ2VzIyU1Qk5QVUNURjIwMjAlNURiYWJ5TENH\"> BUUOJ</span> 下载</p>\n<h3 id=\"题目流程\"><a class=\"anchor\" href=\"#题目流程\">#</a> 题目流程</h3>\n<ol>\n<li>初始化一个 LCG 加密类，用到随机参数 a, b, m, seed，其中 a, b, m，均在附件给出</li>\n<li>生成 20 个 128 位的随机数，但是只给出每个数的高 64 位</li>\n<li>再生成三个随机数，用 AES 加密加密 flag，key 由前两个随机数组成，分别取第一个随机数和第二个随机数的高 64 位拼起来，iv 由第三个随机数组成</li>\n</ol>\n<h3 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h3>\n<p>从题目流程来看，我们目的只有一个，恢复 seed。</p>\n<h4 id=\"step1-公式转化-2\"><a class=\"anchor\" href=\"#step1-公式转化-2\">#</a> step1 - 公式转化</h4>\n<p>LCG 生成随机数的公式为：<img data-src=\"https://i.loli.net/2020/05/09/9YZKClW4tPdzmbS.png\" alt=\"img\" /></p>\n<p>但是这一题，我们只知道 s1 到 s20 的高 64 位，所以我们将 si 分为 h、l 高低位两部分，其中 hi 已知。所以有</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/2jVZ7n8dbECkimQ.png\" alt=\"img\" /></p>\n<p>这里，我们通过公式的变形，可以将原来式子<img data-src=\"https://i.loli.net/2020/05/09/9YZKClW4tPdzmbS.png\" alt=\"img\" /></p>\n<p>中 s {i+1} 和 s {i} 的关系转变为 l {i+1} 和 l {i} 的关系。当然，原系数 a、b 的意义也发生了对应转变。</p>\n<p>这里给出生成新 A 和 B 的脚本</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b=<span class=\"number\">153582801876235638173762045261195852087</span></span><br><span class=\"line\">a=<span class=\"number\">107763262682494809191803026213015101802</span></span><br><span class=\"line\">m=<span class=\"number\">226649634126248141841388712969771891297</span></span><br><span class=\"line\"></span><br><span class=\"line\">h = [<span class=\"number\">0</span>,<span class=\"number\">7800489346663478448</span>,<span class=\"number\">11267068470666042741</span>,<span class=\"number\">5820429484185778982</span>,<span class=\"number\">6151953690371151688</span>,<span class=\"number\">548598048162918265</span>,<span class=\"number\">1586400863715808041</span>,<span class=\"number\">7464677042285115264</span>,<span class=\"number\">4702115170280353188</span>,<span class=\"number\">5123967912274624410</span>,<span class=\"number\">8517471683845309964</span>,<span class=\"number\">2106353633794059980</span>,<span class=\"number\">11042210261466318284</span>,<span class=\"number\">4280340333946566776</span>,<span class=\"number\">6859855443227901284</span>,<span class=\"number\">3149000387344084971</span>,<span class=\"number\">7055653494757088867</span>,<span class=\"number\">5378774397517873605</span>,<span class=\"number\">8265548624197463024</span>,<span class=\"number\">2898083382910841577</span>,<span class=\"number\">4927088585601943730</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(h)):</span><br><span class=\"line\">    h[i] &lt;&lt;= <span class=\"number\">64</span></span><br><span class=\"line\">A = [<span class=\"number\">1</span>]</span><br><span class=\"line\">B = [<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(h)-<span class=\"number\">1</span>):</span><br><span class=\"line\">    A.append(a*A[i-<span class=\"number\">1</span>] % m)</span><br><span class=\"line\">    B.append((a*B[i-<span class=\"number\">1</span>]+a*h[i]+b-h[i+<span class=\"number\">1</span>]) % m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A[<span class=\"number\">1</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(B[<span class=\"number\">1</span>:])</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"step2-构造lattice-2\"><a class=\"anchor\" href=\"#step2-构造lattice-2\">#</a> step2 - 构造 Lattice</h4>\n<p>现在我们二十条与 l 相关的方程组了。即</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/3fDiQKOonJuUzrA.png\" alt=\"img\" /></p>\n<p>且对于 l 我们真的一无所知么？我们其实知道 l 是小于 2^64 的，即 l 最大为 64bit。这样与前面一道题就很类似了。</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/bRTmoz5J8pvPK2x.png\" alt=\"img\" /></p>\n<p>其中 l1 即为 s1 的低位，拼上其高位，在利用 a, b, m 就能会恢复 seed 了</p>\n<h4 id=\"step3-lll-2\"><a class=\"anchor\" href=\"#step3-lll-2\">#</a> step3-LLL</h4>\n<p>这里我们的 vl 向量每一位都只有约 64bit，显然，它是整个格中比较短的向量了，且我们一共有 19 组数据，那么直接对这个 Lattice M 运用 LLL 算法就可以找到 vl 了。（格中参数 2^{64} 的选取道理与上面一致）</p>\n<p>完整 exp：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">#sage</span></span><br><span class=\"line\"><span class=\"string\">b=153582801876235638173762045261195852087</span></span><br><span class=\"line\"><span class=\"string\">a=107763262682494809191803026213015101802</span></span><br><span class=\"line\"><span class=\"string\">m=226649634126248141841388712969771891297</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">h = [0,7800489346663478448,11267068470666042741,5820429484185778982,6151953690371151688,548598048162918265,1586400863715808041,7464677042285115264,4702115170280353188,5123967912274624410,8517471683845309964,2106353633794059980,11042210261466318284,4280340333946566776,6859855443227901284,3149000387344084971,7055653494757088867,5378774397517873605,8265548624197463024,2898083382910841577,4927088585601943730]</span></span><br><span class=\"line\"><span class=\"string\">for i in range(len(h)):</span></span><br><span class=\"line\"><span class=\"string\">    h[i] &lt;&lt;= 64</span></span><br><span class=\"line\"><span class=\"string\">A = [1]</span></span><br><span class=\"line\"><span class=\"string\">B = [0]</span></span><br><span class=\"line\"><span class=\"string\">for i in range(1, len(h)-1):</span></span><br><span class=\"line\"><span class=\"string\">    A.append(a*A[i-1] % m)</span></span><br><span class=\"line\"><span class=\"string\">    B.append((a*B[i-1]+a*h[i]+b-h[i+1]) % m)</span></span><br><span class=\"line\"><span class=\"string\">A = A[1:]</span></span><br><span class=\"line\"><span class=\"string\">B = B[1:]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">M = matrix(ZZ, 21, 21)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">for i in range(19):</span></span><br><span class=\"line\"><span class=\"string\">    M[i, i] = m</span></span><br><span class=\"line\"><span class=\"string\">    M[19, i] = A[i]</span></span><br><span class=\"line\"><span class=\"string\">    M[20, i] = B[i]</span></span><br><span class=\"line\"><span class=\"string\">    M[i, 19] = M[i, 20] = 0</span></span><br><span class=\"line\"><span class=\"string\">M[19, 19] =  1</span></span><br><span class=\"line\"><span class=\"string\">M[20, 20] = 2^64</span></span><br><span class=\"line\"><span class=\"string\">M[19, 20]= 0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#print(B)</span></span><br><span class=\"line\"><span class=\"string\">vl = M.LLL()[0]</span></span><br><span class=\"line\"><span class=\"string\">l1 = vl[-2]</span></span><br><span class=\"line\"><span class=\"string\">h1 = h[1]</span></span><br><span class=\"line\"><span class=\"string\">s1 = l1+h1</span></span><br><span class=\"line\"><span class=\"string\">#s1 = a*seed+b %m</span></span><br><span class=\"line\"><span class=\"string\">seed = ((s1 - b)*inverse_mod(a,m))%m</span></span><br><span class=\"line\"><span class=\"string\">print(seed)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LCG</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, bit_length</span>):</span><br><span class=\"line\">        b = <span class=\"number\">153582801876235638173762045261195852087</span></span><br><span class=\"line\">        a = <span class=\"number\">107763262682494809191803026213015101802</span></span><br><span class=\"line\">        m = <span class=\"number\">226649634126248141841388712969771891297</span></span><br><span class=\"line\">        seed = <span class=\"number\">73991202721494681711496408225724067994</span></span><br><span class=\"line\">        self._key = &#123;<span class=\"string\">&#x27;a&#x27;</span>:a, <span class=\"string\">&#x27;b&#x27;</span>:b, <span class=\"string\">&#x27;m&#x27;</span>:m&#125;</span><br><span class=\"line\">        self._state = seed</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">next</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self._state = (self._key[<span class=\"string\">&#x27;a&#x27;</span>] * self._state + self._key[<span class=\"string\">&#x27;b&#x27;</span>]) % self._key[<span class=\"string\">&#x27;m&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">export_key</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._key</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen_lcg</span>():</span><br><span class=\"line\">    rand_iter = LCG(<span class=\"number\">128</span>)</span><br><span class=\"line\">    key = rand_iter.export_key()</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"built_in\">str</span>(key))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rand_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_data</span>(<span class=\"params\">rand_iter</span>):</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;old&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        f.write(<span class=\"built_in\">str</span>(rand_iter.<span class=\"built_in\">next</span>() &gt;&gt; <span class=\"number\">64</span>) + <span class=\"string\">&quot;n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rand_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">rand_iter</span>):</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;ct&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">    key = rand_iter.<span class=\"built_in\">next</span>() &gt;&gt; <span class=\"number\">64</span></span><br><span class=\"line\">    key = (key &lt;&lt; <span class=\"number\">64</span>) + (rand_iter.<span class=\"built_in\">next</span>() &gt;&gt; <span class=\"number\">64</span>)</span><br><span class=\"line\">    key = long_to_bytes(key).ljust(<span class=\"number\">16</span>, <span class=\"string\">b&#x27;x00&#x27;</span>)</span><br><span class=\"line\">    iv = long_to_bytes(rand_iter.<span class=\"built_in\">next</span>()).ljust(<span class=\"number\">16</span>, <span class=\"string\">b&#x27;x00&#x27;</span>)</span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class=\"line\">    pt = flag + (<span class=\"number\">16</span> - <span class=\"built_in\">len</span>(flag) % <span class=\"number\">16</span>) * <span class=\"built_in\">chr</span>(<span class=\"number\">16</span> - <span class=\"built_in\">len</span>(flag) % <span class=\"number\">16</span>)</span><br><span class=\"line\">    ct = cipher.encrypt(pt.encode())</span><br><span class=\"line\">    f.write(ct)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">rand_iter</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;ct&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        flag = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    key = rand_iter.<span class=\"built_in\">next</span>() &gt;&gt; <span class=\"number\">64</span></span><br><span class=\"line\">    key = (key &lt;&lt; <span class=\"number\">64</span>) + (rand_iter.<span class=\"built_in\">next</span>() &gt;&gt; <span class=\"number\">64</span>)</span><br><span class=\"line\">    key = long_to_bytes(key).ljust(<span class=\"number\">16</span>, <span class=\"string\">b&#x27;x00&#x27;</span>)</span><br><span class=\"line\">    iv = long_to_bytes(rand_iter.<span class=\"built_in\">next</span>()).ljust(<span class=\"number\">16</span>, <span class=\"string\">b&#x27;x00&#x27;</span>)</span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class=\"line\">    ct = cipher.decrypt(flag)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ct)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    rand_iter = gen_lcg()</span><br><span class=\"line\">    rand_iter = leak_data(rand_iter)</span><br><span class=\"line\">    decrypt(rand_iter)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://justgo00.github.io/2024/01/12/%E4%B8%89%E7%A7%8D%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/",
            "url": "https://justgo00.github.io/2024/01/12/%E4%B8%89%E7%A7%8D%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/",
            "title": "ECC常见格式变换",
            "date_published": "2024-01-12T14:31:06.671Z",
            "content_html": "<h3 id=\"维尔斯特拉斯曲线\"><a class=\"anchor\" href=\"#维尔斯特拉斯曲线\">#</a> 维尔斯特拉斯曲线：</h3>\n<p>椭圆曲线的一般形式可表示为：</p>\n<p>E:y^2 = x^3 + A*x + B</p>\n<p>A,B 属于 Fp,4<em>A^3 + 27</em>B^2 != 0, 一般称上式为维尔斯特拉斯形式的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNiVBNCVBRCVFNSU5QyU4NiVFNiU5QiVCMiVFNyVCQSVCRiVFNiU5NiVCOSVFNyVBOCU4QiZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYW5zd2VyJTIyJTJDJTIyc291cmNlSWQlMjIlM0EyNTE0Mjc5NzgzJTdE\">椭圆曲线方程</span>.</p>\n<h3 id=\"蒙哥马利曲线\"><a class=\"anchor\" href=\"#蒙哥马利曲线\">#</a> 蒙哥马利曲线:</h3>\n<p>蒙哥马利形式的椭圆曲线方程定义为：</p>\n<p>K<em>t^2 = s^3  + J</em>s^2 + s</p>\n<p>其中 K，J 属于 Fp，B (A^2 - 4) != 0。</p>\n<h3 id=\"扭曲爱德华曲线\"><a class=\"anchor\" href=\"#扭曲爱德华曲线\">#</a> 扭曲爱德华曲线：</h3>\n<p>扭曲爱德华形式的椭圆曲线方程定义为：</p>\n<p>a<em>v^2 + w^2 = 1 + d</em>v<sup>2*w</sup>2</p>\n<p>其中 a,d != 0,a != d。</p>\n<h2 id=\"椭圆曲线间的转换\"><a class=\"anchor\" href=\"#椭圆曲线间的转换\">#</a> 椭圆曲线间的转换：</h2>\n<p>维尔斯特拉斯曲线、蒙哥马利曲线、扭曲爱德华曲线这三类椭圆曲线之间可以相互转换。</p>\n<h3 id=\"蒙哥马利曲线-维尔斯特拉斯曲线\"><a class=\"anchor\" href=\"#蒙哥马利曲线-维尔斯特拉斯曲线\">#</a> 蒙哥马利曲线 &lt;-&gt; 维尔斯特拉斯曲线</h3>\n<p>任何椭圆曲线都可以写为维尔斯特拉斯形式。反之，当满足特定条件时，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3NlYXJjaD9xPSVFNyVCQiVCNCVFNSVCMCU5NCVFNiU5NiVBRiVFNyU4OSVCOSVFNiU4QiU4OSVFNiU5NiVBRiVFNiVBNCVBRCVFNSU5QyU4NiVFNiU5QiVCMiVFNyVCQSVCRiZhbXA7c2VhcmNoX3NvdXJjZT1FbnRpdHkmYW1wO2h5YnJpZF9zZWFyY2hfc291cmNlPUVudGl0eSZhbXA7aHlicmlkX3NlYXJjaF9leHRyYT0lN0IlMjJzb3VyY2VUeXBlJTIyJTNBJTIyYW5zd2VyJTIyJTJDJTIyc291cmNlSWQlMjIlM0EyNTE0Mjc5NzgzJTdE\">维尔斯特拉斯椭圆曲线</span>可以转换为蒙哥马利椭圆曲线。具体转换条件参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9udGdvbWVyeV9jdXJ2ZQ==\">《Montgomery Curve5.png)》</span>的 Equivalence with Weierstrass curves 部分。</p>\n<p>![屏幕截图 2023-08-27 224205](F:\\ 资料 \\crypto 文本 \\ECC 椭圆曲线 \\ 屏幕截图 2023-08-27 224205.png)</p>\n<h3 id=\"扭曲爱德华曲线-蒙哥马利曲线\"><a class=\"anchor\" href=\"#扭曲爱德华曲线-蒙哥马利曲线\">#</a> 扭曲爱德华曲线 &lt;-&gt; 蒙哥马利曲线</h3>\n<p>所有扭曲爱德华曲线都与蒙哥马利曲线双向有理等价（Birationally Equivalent），反之亦然。所谓双向有理等价，可以理解为除了个别点外，扭曲爱德华曲线的点和蒙哥马利曲线的点存在相互映射关系。</p>\n<p><strong>2022 NCTF spurecc</strong></p>\n<p>题目：</p>\n<p><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 题目</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> INF, flag</span><br><span class=\"line\"><span class=\"keyword\">assert</span> flag[:<span class=\"number\">5</span>] == <span class=\"string\">b&#x27;nctf&#123;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">super_ecc</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.a =<span class=\"number\">73101304688827564515346974949973801514688319206271902046500036921488731301311</span></span><br><span class=\"line\">        self.c =<span class=\"number\">78293161515104296317366169782119919020288033620228629011270781387408756505563</span></span><br><span class=\"line\">        self.d =<span class=\"number\">37207943854782934242920295594440274620695938273948375125575487686242348905415</span></span><br><span class=\"line\">        self.p =<span class=\"number\">101194790049284589034264952247851014979689350430642214419992564316981817280629</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self, P, Q</span>):</span><br><span class=\"line\">        (x1, y1) = P</span><br><span class=\"line\">        (x2, y2) = Q</span><br><span class=\"line\">        x3 = (x1 * y2 + y1 * x2) * inverse(self.c * (<span class=\"number\">1</span> +self.d * x1 * x2 * y1 * y2), self.p) % self.p</span><br><span class=\"line\">        y3 = (y1 * y2 - self.a * x1 * x2) * inverse(self.c* (<span class=\"number\">1</span> - self.d * x1 * x2 * y1 * y2), self.p) % self.p</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (x3, y3)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">self, x, P</span>):</span><br><span class=\"line\">        Q = INF</span><br><span class=\"line\">        x = x % self.p</span><br><span class=\"line\">        <span class=\"keyword\">while</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                Q = self.add(Q, P)</span><br><span class=\"line\">                P = self.add(P, P)</span><br><span class=\"line\">                x = x &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> Q</span><br><span class=\"line\">flag = bytes_to_long(flag[<span class=\"number\">5</span>:-<span class=\"number\">1</span>])</span><br><span class=\"line\">ecc = super_ecc()</span><br><span class=\"line\">G =(<span class=\"number\">30539694658216287049186009602647603628954716157157860526895528661673536165645</span>,<span class=\"number\">64972626416868540980868991814580825204126662282378873382506584276702563849986</span>)</span><br><span class=\"line\">S = ecc.mul(flag, G)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(S)</span><br><span class=\"line\"><span class=\"comment\">#(98194560294138607903211673286210561363390596541458961277934545796708736630623,58504021112693314176230785309962217759011765879155504422231569879170659690008)</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></p>\n<p>wp：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Twist_Edwards_to_Montgomery</span>(<span class=\"params\">a,d,G,p</span>):</span><br><span class=\"line\">    A = (<span class=\"number\">2</span>*(a+d))*inverse_mod(a-d,p) % p</span><br><span class=\"line\">    B = <span class=\"number\">4</span> * inverse_mod(a-d,p) % p</span><br><span class=\"line\">    u = (<span class=\"number\">1</span>+G[<span class=\"number\">1</span>]) * inverse_mod(<span class=\"number\">1</span>-G[<span class=\"number\">1</span>],p) % p</span><br><span class=\"line\">    v = ((<span class=\"number\">1</span>+G[<span class=\"number\">1</span>]) * inverse_mod((<span class=\"number\">1</span>-G[<span class=\"number\">1</span>])*G[<span class=\"number\">0</span>], p)) % p</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(A,B,(u,v))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Twist_Montgomery_to_Weierstrass</span>(<span class=\"params\">A,B,G,p</span>):</span><br><span class=\"line\">    t = ((<span class=\"number\">3</span> * G[<span class=\"number\">0</span>] + A) * inverse_mod(<span class=\"number\">3</span>*B, p))%p</span><br><span class=\"line\">    v = (G[<span class=\"number\">1</span>] * inverse_mod(B, p))%p</span><br><span class=\"line\">    a = ((<span class=\"number\">3</span>-A^<span class=\"number\">2</span>) * inverse_mod(<span class=\"number\">3</span>*B^<span class=\"number\">2</span>, p))%p</span><br><span class=\"line\">    b = ((<span class=\"number\">2</span>*A^<span class=\"number\">3</span>-<span class=\"number\">9</span>*A) * inverse_mod(<span class=\"number\">27</span>*B^<span class=\"number\">3</span>, p))%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a,b,(t,v))</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">73101304688827564515346974949973801514688319206271902046500036921488731301311</span></span><br><span class=\"line\">c = <span class=\"number\">78293161515104296317366169782119919020288033620228629011270781387408756505563</span></span><br><span class=\"line\">d = <span class=\"number\">37207943854782934242920295594440274620695938273948375125575487686242348905415</span></span><br><span class=\"line\">p = <span class=\"number\">101194790049284589034264952247851014979689350430642214419992564316981817280629</span></span><br><span class=\"line\">G = (<span class=\"number\">30539694658216287049186009602647603628954716157157860526895528661673536165645</span>,<span class=\"number\">64972626416868540980868991814580825204126662282378873382506584276702563849986</span>)</span><br><span class=\"line\">Q = (<span class=\"number\">98194560294138607903211673286210561363390596541458961277934545796708736630623</span>,<span class=\"number\">58504021112693314176230785309962217759011765879155504422231569879170659690008</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">G_ = (G[<span class=\"number\">0</span>]*inverse_mod(c,p)%p,G[<span class=\"number\">1</span>]*inverse_mod(c,p)%p)</span><br><span class=\"line\">Q_ = (Q[<span class=\"number\">0</span>]*inverse_mod(c,p)%p,Q[<span class=\"number\">1</span>]*inverse_mod(c,p)%p)</span><br><span class=\"line\">d_ = d * c^<span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">A_,B_,G1 = Twist_Edwards_to_Montgomery(a,d_,G_,p)</span><br><span class=\"line\">a_,b_,G1 = Twist_Montgomery_to_Weierstrass(A_,B_,G1,p)</span><br><span class=\"line\"></span><br><span class=\"line\">A,B,Q1 = Twist_Edwards_to_Montgomery(a, d_, Q_, p)</span><br><span class=\"line\">a_1,b_1,Q1 = Twist_Montgomery_to_Weierstrass(A, B, Q1, p)</span><br><span class=\"line\"><span class=\"comment\"># print(G1,a_,b_)</span></span><br><span class=\"line\">E = EllipticCurve(GF(p),[a_,b_])</span><br><span class=\"line\">G1 = E(G1)</span><br><span class=\"line\">Q1 = E(Q1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(G1,Q1)</span><br><span class=\"line\">x = G1.order()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(factor(G1.order())[:-<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">fac_,rc = [],[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> factor(x)[:-<span class=\"number\">2</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,j)</span><br><span class=\"line\">    fac = <span class=\"built_in\">int</span>(i)^<span class=\"built_in\">int</span>(j)</span><br><span class=\"line\"><span class=\"comment\">#     print(fac)</span></span><br><span class=\"line\">    k = <span class=\"built_in\">int</span>(x) // fac</span><br><span class=\"line\"><span class=\"comment\">#     print(k)</span></span><br><span class=\"line\">    fac_.append(fac)</span><br><span class=\"line\">    dis = discrete_log(k*Q1,k*G1,operation = <span class=\"string\">&quot;+&quot;</span>)</span><br><span class=\"line\">    rc.append(dis)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fac_,rc)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;_____&quot;</span>)</span><br><span class=\"line\">m = crt(rc,fac_)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\">m = <span class=\"number\">1558115275100082829946</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://justgo00.github.io/2023/12/25/%E5%AE%89%E6%B4%B5%E6%9D%AF2023/",
            "url": "https://justgo00.github.io/2023/12/25/%E5%AE%89%E6%B4%B5%E6%9D%AF2023/",
            "title": "2023安洵杯-Crypto",
            "date_published": "2023-12-25T03:31:36.779Z",
            "content_html": "<h2 id=\"010101\"><a class=\"anchor\" href=\"#010101\">#</a> 010101</h2>\n<p>爆破，1024*1024 次，前 1024 对应修改前 1024 的 1bit，后一段将前 1024bit 所对应同位置的后 1024 的 0bit 修改：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&#x27;124.71.177.14&#x27;</span>,<span class=\"number\">10001</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;SHA256(XXXX + &#x27;</span>)</span><br><span class=\"line\">m_known = sh.recvuntil(<span class=\"string\">b&#x27;)&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">c_known = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Ascii = ascii_letters + digits</span><br><span class=\"line\">m_unknown = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i0 <span class=\"keyword\">in</span> tqdm(Ascii):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i1,i2,i3 <span class=\"keyword\">in</span> itertools.product(Ascii,Ascii,Ascii):</span><br><span class=\"line\">        m = i0.encode() + i1.encode() + i2.encode() + i3.encode() + m_known</span><br><span class=\"line\">        c_solve = sha256(m).hexdigest()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c_solve.encode() == c_known:</span><br><span class=\"line\">            m_unknown = m[:<span class=\"number\">4</span>]</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(m[:<span class=\"number\">4</span>])</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> m_unknown != <span class=\"string\">b&#x27;&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">sh.sendline(m_unknown)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;Press 1 to get ciphertext\\n&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">n = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">p = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">c = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">n,p_known,c = <span class=\"built_in\">int</span>(n),<span class=\"built_in\">int</span>(p,<span class=\"number\">2</span>),<span class=\"built_in\">int</span>(c)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n,p_known,c)</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"number\">0x10001</span></span><br><span class=\"line\">n = <span class=\"number\">885983193330755862005421247616105018942989165564963248083196682778021687404725116205758532359230072109355057113176745993086046874992925681698732927956823144030544013403426664483828711784255207117812283782681837126423783679562863518337176395284749780073960412125208393952124525159646274444665217290896126787684170805448442565664555299539711666174943969471006825812258358756824745037401137555298526929882292766111029300490063121373524346238063114172433615938645354409686896313314580870973495548679138895315769534586187306771908569870343586877965672172819609879499657150938722936944485993346872733207214842687595917538485861238806852747145196430318007990471683014094631056234990870642680506519838006418170006983170469428819529386928504313299730939890682958013318191665792174138119060525587618164675121894917626758509163927589509930935590342185009956501961781001064927114705461308725171114291836176969552208263672853013041884147111644068155653447312399470048809365358421891632003573766793772352523595268457863625033163582237082672224767638995946368013643923412110800009794579999793304374903021993490429741889439689166365301181273060863406348289054202480738054429706154124888813147212613948318674809000118429191483614325482418697249686101</span></span><br><span class=\"line\">p_known = <span class=\"number\">27891442645341471288170167216869935613920976137887903714313638802373006773267565599597204373102523757582428451329858211065310139216678459999734807018922017770060342702550735543090801248386258005345518262143850572941350241016988378819690890844218261015415182311461752769583929809807049921985214679177749792217513351089220995239090088571179761822479553794957519709643176122743020402215768885756118676348026660960511688983890880515870145420044585582165469826852127713925014399205933331554164478946203701557458374273244827503769991306663425004640455624211909357330253463008915366448637642808264987962486894003590879922041</span></span><br><span class=\"line\">c = <span class=\"number\">585916945391914465115368819351183359526081377461622585041225666478547897954029350225215418441222608050191715981095658092352275373749701502850381217372771658130509389954639107164299187894202113533621889807067721079089833596056885977558635329364744149038296978066724078873266864282028305897202414695133286240204104453243146969561040569389842916667285536168938123895394035293131279220072587276720004388170496602617541194685508969662744840432770817566840117877172279330120731008106275207810586452935984788123659380202281255276079278864811851119660051615361241155206094818377753866987816079644506943531078103222458539480072218990226958339498588480585214108416830046393851200733516087801274551858537895962724967372863511751246954538846463631380334711400606890713243926153933570277830033910144086079076324194174249280583468477993446622039305710423098095332955373087159925072199054523679138339358536491961551107111839655380049809459883791190501195474617558590483712376958624790659126870216556072003004513759145118433460033394481622350881549992815614207757572142551506120859079610478414940856328923594079098496490363200474436684000424815011846049048890875566414602576298241173455275350978217308349078346435909878052426129101179058245263600719</span></span><br><span class=\"line\">p1_known = <span class=\"built_in\">bin</span>(p_known)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">p1 = p1_known[:<span class=\"number\">1024</span>]</span><br><span class=\"line\">p2 = p1_known[<span class=\"number\">1024</span>:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(p1),<span class=\"built_in\">len</span>(p2))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> GCD(n,p_known) == <span class=\"number\">1</span>:</span><br><span class=\"line\">    p = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i1 <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">1024</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i2 <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1024</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p1[i1] == <span class=\"string\">&#x27;0&#x27;</span> <span class=\"keyword\">and</span> p1[i2] == <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">                P1 = (<span class=\"built_in\">int</span>(p1,<span class=\"number\">2</span>)&lt;&lt;<span class=\"number\">1024</span>) + <span class=\"built_in\">int</span>(p2,<span class=\"number\">2</span>) + <span class=\"number\">2</span>**(<span class=\"number\">2047</span> - i1) - <span class=\"number\">2</span>**(<span class=\"number\">1023</span> - i2)</span><br><span class=\"line\">                P2 = (<span class=\"built_in\">int</span>(p1,<span class=\"number\">2</span>)&lt;&lt;<span class=\"number\">1024</span>) + <span class=\"built_in\">int</span>(p2,<span class=\"number\">2</span>) + <span class=\"number\">2</span>**(<span class=\"number\">2047</span> - i1)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> GCD(n,P1) != <span class=\"number\">1</span>:</span><br><span class=\"line\">                    p = GCD(n,P1)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> GCD(n,P2) != <span class=\"number\">1</span>:</span><br><span class=\"line\">                    p = GCD(n,P2)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p = GCD(n,p_known)</span><br><span class=\"line\"></span><br><span class=\"line\">p = <span class=\"number\">27891442645341471288170167216869935613920976137887903714313638802373006773267565599597204373102523757582428451329858211065310139216678459999734807018922017770060342702550735543090801248386258005345518262143850572941350241016988381484121532678304425988276706116667650655091065110083480083677976382501413068597749642222518078714081408231112934118417548389150479280450192606559111455609884194333273079988435178895449202349279801593481805628636255775746819599262717656325368815400568015035479118603375807392104141506679622057326955381876697854105339628185292192129738578646170759229660295272111570930988796263602074568569</span></span><br><span class=\"line\">q = n//p</span><br><span class=\"line\">d = inverse(e,(p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(<span class=\"built_in\">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"poa\"><a class=\"anchor\" href=\"#poa\">#</a> POA</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNrbWQuaW8vQExpYW5neXVoby9yMTVOeXN5WmkjTGFiLVBPQQ==\">https://hackmd.io/@Liangyuho/r15NysyZi#Lab-POA</span></p>\n<p>asserts 有问题：可以通过构造最后一个字符来使其满足 num 的判断条件过即可。</p>\n<p>Padding Oracle Attack：由于最后一直是 b'\\x04'*4 将其更改为 b'\\x0i'*i 即可爆破除此之外最后一位，判定是 True 即通过验证：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># context.log_level = &#x27;Debug&#x27;</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&#x27;124.71.177.14&#x27;</span>,<span class=\"number\">10010</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;SHA256(XXXX + &#x27;</span>)</span><br><span class=\"line\">m_known = sh.recvuntil(<span class=\"string\">b&#x27;)&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">c_known = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Ascii = ascii_letters + digits</span><br><span class=\"line\">m_unknown = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i0 <span class=\"keyword\">in</span> tqdm(Ascii):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i1,i2,i3 <span class=\"keyword\">in</span> itertools.product(Ascii,Ascii,Ascii):</span><br><span class=\"line\">        m = i0.encode() + i1.encode() + i2.encode() + i3.encode() + m_known</span><br><span class=\"line\">        c_solve = sha256(m).hexdigest()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c_solve.encode() == c_known:</span><br><span class=\"line\">            m_unknown = m[:<span class=\"number\">4</span>]</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(m[:<span class=\"number\">4</span>])</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> m_unknown != <span class=\"string\">b&#x27;&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">sh.sendline(m_unknown)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;Welcome to AES System, please choose the following options:\\n1. encrypt the flag\\n2. decrypt the flag\\n&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;This is your flag: &#x27;</span>)</span><br><span class=\"line\">Cipher = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">IV = <span class=\"built_in\">bytes</span>.fromhex(Cipher[:<span class=\"number\">32</span>].decode())</span><br><span class=\"line\">Cipher1 = <span class=\"built_in\">bytes</span>.fromhex(Cipher[<span class=\"number\">32</span>:].decode())</span><br><span class=\"line\"></span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;Please enter ciphertext:\\n&#x27;</span>)</span><br><span class=\"line\">sh.sendline(Cipher)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">m = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>,<span class=\"number\">15</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">32</span>,<span class=\"number\">128</span>)):</span><br><span class=\"line\">        I = (i&lt;&lt;<span class=\"number\">24</span>) + (i&lt;&lt;<span class=\"number\">16</span>) + (i&lt;&lt;<span class=\"number\">8</span>) + i</span><br><span class=\"line\">        num = <span class=\"built_in\">len</span>(m)</span><br><span class=\"line\">        K = long_to_bytes(bytes_to_long(m[::-<span class=\"number\">1</span>])^bytes_to_long(IV[-<span class=\"number\">4</span>-num:-<span class=\"number\">4</span>])^bytes_to_long(long_to_bytes(i)*num))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> bytes_to_long(K) != <span class=\"number\">0</span>:</span><br><span class=\"line\">            iv = IV[:<span class=\"number\">16</span>-i] + long_to_bytes(IV[-i]^j^i) + K + long_to_bytes(bytes_to_long(IV[-<span class=\"number\">4</span>:])^bytes_to_long(<span class=\"string\">b&#x27;\\x04&#x27;</span>*<span class=\"number\">4</span>)^I)</span><br><span class=\"line\">            cipher = <span class=\"built_in\">hex</span>(bytes_to_long(iv + Cipher1))[<span class=\"number\">2</span>:]</span><br><span class=\"line\">            sh.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">            sh.recvuntil(<span class=\"string\">b&#x27;Please enter ciphertext:\\n&#x27;</span>)</span><br><span class=\"line\">            sh.sendline(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;cipher&#125;</span>&#x27;</span>.encode())</span><br><span class=\"line\">            Asser = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> Asser == <span class=\"string\">b&#x27;True&#x27;</span>:</span><br><span class=\"line\">                m += long_to_bytes(j)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            iv = IV[:<span class=\"number\">16</span> - i] + long_to_bytes(IV[-i] ^ j ^ i) + long_to_bytes(bytes_to_long(IV[-<span class=\"number\">4</span>:]) ^ bytes_to_long(<span class=\"string\">b&#x27;\\x04&#x27;</span> * <span class=\"number\">4</span>) ^ I)</span><br><span class=\"line\">            cipher = <span class=\"built_in\">hex</span>(bytes_to_long(iv + Cipher1))[<span class=\"number\">2</span>:]</span><br><span class=\"line\">            sh.sendline(<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">            sh.recvuntil(<span class=\"string\">b&#x27;Please enter ciphertext:\\n&#x27;</span>)</span><br><span class=\"line\">            sh.sendline(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;cipher&#125;</span>&#x27;</span>.encode())</span><br><span class=\"line\">            Asser = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> Asser == <span class=\"string\">b&#x27;True&#x27;</span>:</span><br><span class=\"line\">                m += long_to_bytes(j)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(m[::-<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"rabin\"><a class=\"anchor\" href=\"#rabin\">#</a> Rabin</h2>\n<p>在 10 范围内爆破 x，求解出 r 的值，<br />\n借鉴：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppaHVvY2MvYXJ0aWNsZS9kZXRhaWxzLzEyMDY1MTEzNQ==\">https://blog.csdn.net/zihuocc/article/details/120651135</span><br />\n 已知</p>\n<p><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pinv = gmpy2.invert(p, q)</span><br><span class=\"line\">qinv = gmpy2.invert(q, p)</span><br></pre></td></tr></table></figure></p>\n<p>问题：<br />\n构造一元二次方程求解得到 p 和 q，m1 分别求出 mod p,q,r 的值进行 crt，m2rsa 正常求解即可：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;Debug&#x27;</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&#x27;124.71.177.14&#x27;</span>,<span class=\"number\">10100</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;SHA256(XXXX + &#x27;</span>)</span><br><span class=\"line\">m_known = sh.recvuntil(<span class=\"string\">b&#x27;)&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">c_known = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Ascii = ascii_letters + digits</span><br><span class=\"line\">m_unknown = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i0 <span class=\"keyword\">in</span> tqdm(Ascii):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i1,i2,i3 <span class=\"keyword\">in</span> itertools.product(Ascii,Ascii,Ascii):</span><br><span class=\"line\">        m = i0.encode() + i1.encode() + i2.encode() + i3.encode() + m_known</span><br><span class=\"line\">        c_solve = sha256(m).hexdigest()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c_solve.encode() == c_known:</span><br><span class=\"line\">            m_unknown = m[:<span class=\"number\">4</span>]</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(m[:<span class=\"number\">4</span>])</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> m_unknown != <span class=\"string\">b&#x27;&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;Give Me XXXX:\\n&#x27;</span>)</span><br><span class=\"line\">sh.sendline(m_unknown)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&#x27;Press 1 to get ciphertext\\n&#x27;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">n = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">inv_p = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">inv_q = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">c1 = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">c2 = sh.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(n, c1, c2, inv_p, inv_q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 艹不知道为啥，这交互慢的要命…… 至少20min &lt;T.T&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">183987587143083305750638864741407863923066099782864154580267469149728994880657570133628593815340703423130808072042283432235668162110304727032469349818428594850114032836721059649060586457507042662464379681225799719547376778879892377161137617888550330618273821996921933536968406356415014636320792411076595369790832682535290391998215505392562535334689950656071247615403386833974357610616482330477454659815690886537108032914432160993101358865904833275712353054327326082632477505857103365761111509150252273473575155750128383303603084251849472529054003507006328264974832315264066273127150422692348254339443982364191180087180878485663255197479064278456976511234765342274507459896194694227553128298951687077339240323218992215408248085353278374922175066931250462259712424321315238980442891083421664345230471303294574871528133081474391282040653438383124563281407745319250784879700295814386412611424520183046275481807985491628553004177755979602501534168740985961147231942480826645219388936912242078688559343573107</span></span><br><span class=\"line\">inv_p = <span class=\"number\">127845044471279367677718324154714190170411442951976335879181929992579724348172384278151756616370397982157599479281137995696110012050983742181098969952031972352103281622783571648831313121189442432245831329344239077026067240880549019768085314848246412852799787951830235096482328679240841938011206165609815383491</span></span><br><span class=\"line\">inv_q = <span class=\"number\">2134373308686127869824012920235663188613836975539988801351778115016060917918972248018441011896101405651729965838553782056992946820419360577389886792055529644385773031492696792977553831288740769701281352083380822549712188033433160242452493149607916520995731405718697382060898409529236207473785500502200361995</span></span><br><span class=\"line\">c1 = <span class=\"number\">59901508964890767021171064398264307908936667350161073279089572310868586950599325727805284516926810489086383282029992082115158114279180593835803169701700942810053018629391738905143703930934086913540982273330443236667746538429732701951809523675304750766736937339763877920029656639780631165844287334187602517898241652921947025493910278257763965771345399218628063212049751993126278442241517126206052118901633504354294196601208564515049277909100347471128584245711888353326687448071412582110424351004920378098328523186295600506618754473033470916355851161411204287135529246232724954362903970944285164859503600818302414209685312167204874428095742390465315760971742279760806823364290637281424568825384593296024230459803143984388541835729326499813066762351708329039198239543188649090477464774351842794226813051061524394157031736431437884050496738728928793644527786757199418914055660494694838735359548623173125038401059008672520427656237796747351721788913217323573522405881738683656730997049128483061085936306267</span></span><br><span class=\"line\">c2 = <span class=\"number\">179139046654217220267267763170248527291049190771802159312733390169571903419133127994426314437316714067990567034080192347653132778316582308221292709704800341059415996304851127207839455586643342656519755777964647860451812841911015248069977267210769968163405707647326502269670462891547054964649530880714013097648355896486034646098850981194098393898791365398165706500787675724118734066847473986499496657848092712981556248030527366087443210423648206436634453535154635193577487859761483910377159921278744232739720660932490244112183435943864574647183327743848943530356519752413021239555719349391028411827915618134456090175589206584795280179251114140549128305447902934165468228580020439478001174641014338747282923580111767489328282308659642552306499462341437479067017284398385452782415399117250916606469104057428182837608003122525658668944970985312055309068750680818935453018191854446066701896066315466697341446593453102861278573178429195822662101991686888371894290311298811217641259505006941685399020732833177</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">10</span>)):</span><br><span class=\"line\">    r = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        r = r * x</span><br><span class=\"line\">        <span class=\"keyword\">if</span> r.bit_length() &gt; <span class=\"number\">1024</span> <span class=\"keyword\">and</span> isPrime(r - <span class=\"number\">1</span>):</span><br><span class=\"line\">            r = r - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> GCD(n,r) != <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r,x)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(GCD(n,r))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  12%|█▎        | 1/8 [00:00&lt;00:01,  4.14it/s]10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613954281007791383566248323464908139906605677320762924129509389220345773183349661583550472959420547689811211693677147548478866962501384438260291732348885311160828538416585028255604666224831890918801847068222203140521026698435488732958028878050869736186900714720710555703168729087 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613954281007791383566248323464908139906605677320762924129509389220345773183349661583550472959420547689811211693677147548478866962501384438260291732348885311160828538416585028255604666224831890918801847068222203140521026698435488732958028878050869736186900714720710555703168729087</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  38%|███▊      | 3/8 [00:05&lt;00:08,  1.66s/it]10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613954281007791383566248323464908139906605677320762924129509389220345773183349661583550472959420547689811211693677147548478866962501384438260291732348885311160828538416585028255604666224831890918801847068222203140521026698435488732958028878050869736186900714720710555703168729087 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613954281007791383566248323464908139906605677320762924129509389220345773183349661583550472959420547689811211693677147548478866962501384438260291732348885311160828538416585028255604666224831890918801847068222203140521026698435488732958028878050869736186900714720710555703168729087</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  88%|████████▊ | 7/8 [00:10&lt;00:00,  1.03it/s]10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613954281007791383566248323464908139906605677320762924129509389220345773183349661583550472959420547689811211693677147548478866962501384438260291732348885311160828538416585028255604666224831890918801847068222203140521026698435488732958028878050869736186900714720710555703168729087 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613954281007791383566248323464908139906605677320762924129509389220345773183349661583550472959420547689811211693677147548478866962501384438260291732348885311160828538416585028255604666224831890918801847068222203140521026698435488732958028878050869736186900714720710555703168729087</span></span><br><span class=\"line\"></span><br><span class=\"line\">e1,e2,s = <span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">#合理猜测</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = <span class=\"number\">10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613954281007791383566248323464908139906605677320762924129509389220345773183349661583550472959420547689811211693677147548478866962501384438260291732348885311160828538416585028255604666224831890918801847068222203140521026698435488732958028878050869736186900714720710555703168729087</span></span><br><span class=\"line\">p_q = n//r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(p_q)</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = sympy.var(<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">f = inv_p*x**<span class=\"number\">2</span> + (<span class=\"number\">2</span>*inv_q*inv_p-<span class=\"number\">1</span>-p_q)*x + inv_q*(inv_p*inv_q-<span class=\"number\">1</span>)</span><br><span class=\"line\">X = (sympy.solve(f,x))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(X)</span></span><br><span class=\"line\"></span><br><span class=\"line\">k1 = X[<span class=\"number\">1</span>]</span><br><span class=\"line\">p = inv_q + k1</span><br><span class=\"line\">q = p_q//p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#解m1 sage</span></span><br><span class=\"line\">m11 = <span class=\"built_in\">pow</span>(c1,(p+<span class=\"number\">1</span>)//<span class=\"number\">4</span>,p)</span><br><span class=\"line\">m12 = <span class=\"built_in\">pow</span>(c1,(q+<span class=\"number\">1</span>)//<span class=\"number\">4</span>,q)</span><br><span class=\"line\">m13 = <span class=\"built_in\">pow</span>(c1,(r+<span class=\"number\">1</span>)//<span class=\"number\">4</span>,r)</span><br><span class=\"line\"></span><br><span class=\"line\">M1 = [m11,-m11%p]</span><br><span class=\"line\">M2 = [m12,-m12%q]</span><br><span class=\"line\">M3 = [m13,-m13%r]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i1,i2,i3 <span class=\"keyword\">in</span> itertools.product(M1,M2,M3):</span><br><span class=\"line\">    m = crt([<span class=\"built_in\">int</span>(i1),<span class=\"built_in\">int</span>(i2),<span class=\"built_in\">int</span>(i3)],[<span class=\"built_in\">int</span>(p),<span class=\"built_in\">int</span>(q),<span class=\"built_in\">int</span>(r)])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(long_to_bytes(m))</span><br><span class=\"line\"><span class=\"string\">b&#x27;LuMyRtUKLszlNiuFRZwFjidsLoVPqZAJIQcNplTuKzeReuPjqhegTtacYxqOUDwLzREtwIpHOrBgKgVkVtXcmvqPFrbUHdiOiLqfRRIsVpgupfaVkMRBylQFqPfEYtLsIEuFyonBxKGJbdzkjeQpFpEJLkxakEBisZAtKNGzwrhXzFvfHEQWGzBnnauFjtwbIWmUOpAxZxEGsMgRoKEWcOWIcruyXlbvyvfjPwjcGE D0g3&#123;82309bce-9db6-53&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解m2</span></span><br><span class=\"line\"></span><br><span class=\"line\">phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)*(r-<span class=\"number\">1</span>)</span><br><span class=\"line\">d2 = inverse(e2,phi)</span><br><span class=\"line\">m2 = long_to_bytes(<span class=\"built_in\">pow</span>(c2,<span class=\"built_in\">int</span>(d2),n))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># b&#x27;40-a9e4-a67a9ba15345&#125; zmMzsCTfnAmrQKiOZmvpNILNLhvZWPBuGCEnrQqJcgAbycwdrLEbwcOvVmFRzypqTpAHOMwfARAPqhyLAzXeStUteYcVZoCpUKYwGMiFnGqGkVPnpWEeYTbjhJBjMqiyAwwftBSKTiUyPdqrQfRxVgOIodsaMfLwNsUmFavGiuYPIldOFoKkpnRfagABtOtyWFOLEXGZJadWiqEHppPTHovYLfNFtnTJtFnzqzGqiD&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">&#x27;D0g3&#123;82309bce-9db6-5340-a9e4-a67a9ba15345&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://justgo00.github.io/2023/12/25/LUC_RSA/",
            "url": "https://justgo00.github.io/2023/12/25/LUC_RSA/",
            "title": "LUC_RSA",
            "date_published": "2023-12-25T03:21:34.887Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWF0aC51LWJvcmRlYXV4LmZyL35nY2FzdGFnbi9wdWJsaS9jcnlwdG9fcXVhZC5wZGY=\">https://www.math.u-bordeaux.fr/~gcastagn/publi/crypto_quad.pdf</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVzZWFyY2hnYXRlLm5ldC9wdWJsaWNhdGlvbi8yNjYyMzAzMF9BX05ld19Db21wdXRhdGlvbl9BbGdvcml0aG1fZm9yX2FfQ3J5cHRvc3lzdGVtX0Jhc2VkX29uX0x1Y2FzX0Z1bmN0aW9ucw==\">https://www.researchgate.net/publication/26623030_A_New_Computation_Algorithm_for_a_Cryptosystem_Based_on_Lucas_Functions</span></p>\n<p>最近通过 qwb 了解到了这个新东西，顺手进一步加深了对于 LUCAS 序列的理解。</p>\n<h2 id=\"典型例题\"><a class=\"anchor\" href=\"#典型例题\">#</a> 典型例题</h2>\n<h3 id=\"umass-ctf-2021-weird-rsa\"><a class=\"anchor\" href=\"#umass-ctf-2021-weird-rsa\">#</a> UMass CTF 2021 - Weird RSA</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> isPrime</span><br><span class=\"line\"></span><br><span class=\"line\">m, Q = <span class=\"string\">&quot;&quot;&quot;REDACTED&quot;&quot;&quot;</span>, <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">genPrimes</span>(<span class=\"params\">size</span>):</span><br><span class=\"line\">    base = random.getrandbits(size // <span class=\"number\">2</span>) &lt;&lt; size // <span class=\"number\">2</span></span><br><span class=\"line\">    base = base | (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1023</span>) | (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1022</span>) | <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        temp = base | random.getrandbits(size // <span class=\"number\">4</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isPrime(temp):</span><br><span class=\"line\">            p = temp</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        temp = base | random.getrandbits(size // <span class=\"number\">4</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isPrime(temp):</span><br><span class=\"line\">            q = temp</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (p, q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pow</span>(<span class=\"params\">m, e, n</span>):     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> v(e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">v</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (m*v(n-<span class=\"number\">1</span>) - Q*v(n-<span class=\"number\">2</span>)) % N</span><br><span class=\"line\"></span><br><span class=\"line\">p, q = genPrimes(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">N = p * q</span><br><span class=\"line\">e = <span class=\"number\">0x10001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;N:&quot;</span>, N)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;c:&quot;</span>, <span class=\"built_in\">pow</span>(m, e, N))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">N: 18378141703504870053256589621469911325593449136456168833252297256858537217774550712713558376586907139191035169090694633962713086351032581652760861668116820553602617805166170038411635411122411322217633088733925562474573155702958062785336418656834129389796123636312497589092777440651253803216182746548802100609496930688436148522617770670087143010376380205698834648595913982981670535389045333406092868158446779681106756879563374434867509327405933798082589697167457848396375382835193219251999626538126258606572805220878283429607438382521692951006432650132816122705167004219371235964716616826653226062550260270958038670427</span></span><br><span class=\"line\"><span class=\"string\">c: 14470740653145070679700019966554818534890999807830802232451906444910279478539396448114592242906623394239703347815141824698585119347592990685923384931479024856262941313458084648914561375377956072245149926143782368239175037299219241806241533201175001088200209202522586119648246842120571566051381821899459346757935757111233323915022287370687524912870425787594648397524189694991735372527387329346198018567010117587531474035014342584491831714256980975368294579192077738910916486139823489975038981139084864837358039928972730135031064241393391678984872799573965150169368237298603189344477806873779325227557835790957023000991</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"luc-rsa-solution\"><a class=\"anchor\" href=\"#luc-rsa-solution\">#</a> LUC-RSA Solution</h4>\n<p>So how does it work? Well to encrypt (as we’ve seen) we calculate the e-th order Lucas sequence with P=m and Q=1. Then, to decrypt we calculate  the d-th order Lucas sequence with P=c and Q=1. Huh, sounds quite neat.  Our next step is to find the private exponent d, however there’s a  catch. We cannot use our familiar</p>\n<p>那么它是如何工作的呢？好吧，为了加密（正如我们所看到的），我们计算 P=m 和 Q=1 的第 e 阶卢卡斯序列。然后，为了解密，我们计算 P=c 和 Q=1 的第 d  阶卢卡斯序列。呵呵，听起来很整洁。我们的下一步是找到私有指数 d，但有一个问题。我们不能使用我们熟悉的</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = ~e % phi(N),</span><br></pre></td></tr></table></figure></p>\n<p>instead we use 取而代之的是，我们使用</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = ~e % LCM( (p +- 1), (q +- 1) ).</span><br></pre></td></tr></table></figure></p>\n<p>Now we end up with four possible decryption keys. We could easily try them all out, but we can also find the proper form from</p>\n<p>现在我们最终得到了四个可能的解密密钥。我们可以很容易地尝试它们，但我们也可以从中找到合适的形式</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = ~e % LCM( (p - LS(D/p)), (q - LS(D/q)) )</span><br></pre></td></tr></table></figure></p>\n<p>where LS is the Legendre symbol and D = C^2 - 4 the discriminant  (abc-formula, anyone?). Finally, just to speed things up, we implement a more efficient encryption function (provided by the chall’s author:  Soul). Now we can go and get ourselves a nice flag 😃.</p>\n<p>其中 LS 是勒让德符号，D = C^2 - 4 是判别式（abc 公式，有人吗？最后，为了加快速度，我们实现了一个更有效的加密功能（由 chall 的作者 Soul 提供）。现在我们可以去给自己买一面漂亮的旗帜：) 了。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> long_to_bytes</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Increase the Python recursion limit</span></span><br><span class=\"line\">sys.setrecursionlimit(<span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RSA Parameters</span></span><br><span class=\"line\">N = <span class=\"number\">18378141703504870053256589621469911325593449136456168833252297256858537217774550712713558376586907139191035169090694633962713086351032581652760861668116820553602617805166170038411635411122411322217633088733925562474573155702958062785336418656834129389796123636312497589092777440651253803216182746548802100609496930688436148522617770670087143010376380205698834648595913982981670535389045333406092868158446779681106756879563374434867509327405933798082589697167457848396375382835193219251999626538126258606572805220878283429607438382521692951006432650132816122705167004219371235964716616826653226062550260270958038670427</span></span><br><span class=\"line\">C = <span class=\"number\">14470740653145070679700019966554818534890999807830802232451906444910279478539396448114592242906623394239703347815141824698585119347592990685923384931479024856262941313458084648914561375377956072245149926143782368239175037299219241806241533201175001088200209202522586119648246842120571566051381821899459346757935757111233323915022287370687524912870425787594648397524189694991735372527387329346198018567010117587531474035014342584491831714256980975368294579192077738910916486139823489975038981139084864837358039928972730135031064241393391678984872799573965150169368237298603189344477806873779325227557835790957023000991</span></span><br><span class=\"line\">E = <span class=\"number\">0x10001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># I used Fermat&#x27;s factorisation method to get p and q using SAGE</span></span><br><span class=\"line\">P = <span class=\"number\">135566004969921829046861317679102794894163252891621004552763069255612086965641424719754859767153782381891044077537624735662301899417143962916558791489710971298124937969427903581890089403413545652984524659790357002447801666607195021452029447206533810446315939039775701027454771450154054624400219767469987538497</span></span><br><span class=\"line\">Q = <span class=\"number\">135566004969921829046861317679102794894163252891621004552763069255612086965641424719754859767153782381891044077537624735662301899417143962916558791489710971298124937969427903581890089403413545652984524659790357002447801666607195021441224446867180097273643121640903324702747770969633717818870639347019154977691</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LUCRSA Cryptosystem (based on second order Lucas sequence (!))</span></span><br><span class=\"line\"><span class=\"comment\"># See https://www.researchgate.net/publication/26623030_A_New_Computation_Algorithm_for_a_Cryptosystem_Based_on_Lucas_Functions</span></span><br><span class=\"line\">D = C**<span class=\"number\">2</span> - <span class=\"number\">4</span></span><br><span class=\"line\">LS_P = gmpy2.legendre(D,P)</span><br><span class=\"line\">LS_Q = gmpy2.legendre(D,Q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get that decryption bread</span></span><br><span class=\"line\">d = gmpy2.invert(E, gmpy2.lcm(P-LS_P, Q-LS_Q))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you can, prevent v_dict&#123;&#125; from initialising again as it&#x27;ll save you time for future computations :)</span></span><br><span class=\"line\">v_dict = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Function I got from Soul, what a nice guy!</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">v</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> v_dict.keys():</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v_dict[n]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">0</span>):</span><br><span class=\"line\">        ret = (<span class=\"built_in\">pow</span>(v(n // <span class=\"number\">2</span>), <span class=\"number\">2</span>, N) - <span class=\"number\">2</span> * <span class=\"built_in\">pow</span>(Q, n, N)) % N</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ret = (m * <span class=\"built_in\">pow</span>(v(n // <span class=\"number\">2</span>), <span class=\"number\">2</span>, N) - Q * v(n // <span class=\"number\">2</span>) * v((n // <span class=\"number\">2</span>) - <span class=\"number\">1</span>) - m * <span class=\"built_in\">pow</span>(Q, n, N)) % N</span><br><span class=\"line\">    v_dict[n] = ret</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\">m = C; Q = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Capturing the flag...&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">flag = v(d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Got it!&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"hfctf2022-rrssaahttpsctfnjupteducnarchives740rrssaa\"><a class=\"anchor\" href=\"#hfctf2022-rrssaahttpsctfnjupteducnarchives740rrssaa\">#</a> hfctf2022 RRSSAA（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYubmp1cHQuZWR1LmNuL2FyY2hpdmVzLzc0MCNSUlNTQUElRUYlQkMlODk=\">https://ctf.njupt.edu.cn/archives/740#RRSSAA）</span></h3>\n<p>n = p<sup>2*q</sup>2</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWF0aC51LWJvcmRlYXV4LmZyL35nY2FzdGFnbi9wdWJsaS9jcnlwdG9fcXVhZC5wZGY=\">https://www.math.u-bordeaux.fr/~gcastagn/publi/crypto_quad.pdf</span></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.rings.finite_rings.integer_mod <span class=\"keyword\">import</span> lucas</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> long_to_bytes</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.setrecursionlimit(<span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">N = <span class=\"number\">59969098213446598961510550233718258878862148298191323654672950330070587404726715299685997489142290693126366408044603303463518341243526241117556011994804902686998166238333549719269703453450958140262475942580009981324936992976252832887660977703209225426388975233018602730303262439218292062822981478737257836581</span></span><br><span class=\"line\">E = <span class=\"number\">970698965238639683403205181589498135440069660016843488485401994654202837058754446853559143754852628922125327583411039117445415303888796067576548626904070971514824878024057391507617988385537930417136322298476467215300995795105008488692961624917433064070351961856959734368784774555385603000155569897078026670993484466622344106374637350023474339105113172687604783395923403613555236693496567851779400707953027457705617050061193750124237055690801725151098972239120476113241310088089420901051617493693842562637896252448161948655455277146925913049354086353328749354876619287042077221173795354616472050669799421983520421287</span></span><br><span class=\"line\">C = <span class=\"number\">2757297249371055260112176788534868300821961060153993508569437878576838431569949051806118959108641317578931985550844206475198216543139472405873345269094341570473142756599117266569746703013099627523306340748466413993624965897996985230542275127290795414763432332819334757831671028121489964563214463689614865416498886490980692515184662350519034273510244222407505570929178897273048405431658365659592815446583970229985655015539079874797518564867199632672678818617933927005198847206019475149998468493858071672920824599672525667187482558622701227716212254925837398813278836428805193481064316937182435285668656233017810444672</span></span><br><span class=\"line\"></span><br><span class=\"line\">P = <span class=\"number\">7743971733771153102128801312798743998017713722732925283466018690899116898707556486947918196848489007935614742583856884731087798825462330340492923214926391</span></span><br><span class=\"line\">Q = <span class=\"number\">7743971733771153105036156209981171560215008954284943420880584133648389139833517283670475349302080701240378945438911146974137885250527042074631329729385091</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> P*Q == N</span><br><span class=\"line\">D = C**<span class=\"number\">2</span> - <span class=\"number\">4</span></span><br><span class=\"line\">LS_P = gmpy2.legendre(D,P)</span><br><span class=\"line\">LS_Q = gmpy2.legendre(D,Q)</span><br><span class=\"line\"></span><br><span class=\"line\">d = gmpy2.invert(E, gmpy2.lcm(P-LS_P, Q-LS_Q))</span><br><span class=\"line\">inv_q, inv_p = inverse_mod(P, Q), inverse_mod(Q, P)</span><br><span class=\"line\"></span><br><span class=\"line\">rp, rq = lucas(k=inverse_mod(E, P-LS_P), P=C, Q=<span class=\"number\">1</span>, n=P)[<span class=\"number\">0</span>], lucas(k=inverse_mod(E, Q-LS_Q), P=C, Q=<span class=\"number\">1</span>, n=Q)[<span class=\"number\">0</span>]</span><br><span class=\"line\">r = crt(<span class=\"built_in\">int</span>(rp),<span class=\"built_in\">int</span>(rq),P,Q)</span><br><span class=\"line\"></span><br><span class=\"line\">vp=lucas(k=E, P=r, Q=<span class=\"number\">1</span>, n=P*P)[<span class=\"number\">0</span>]</span><br><span class=\"line\">tmp_p = C * inverse_mod(<span class=\"built_in\">int</span>(vp),P*P) %(P*P)</span><br><span class=\"line\">tmp_p = <span class=\"built_in\">int</span>(tmp_p - <span class=\"number\">1</span>) // P</span><br><span class=\"line\">mp = <span class=\"built_in\">int</span>(tmp_p * inv_p % P)</span><br><span class=\"line\"></span><br><span class=\"line\">vq=lucas(k=E, P=r, Q=<span class=\"number\">1</span>, n=Q*Q)[<span class=\"number\">0</span>]</span><br><span class=\"line\">tmp_q = C * inverse_mod(<span class=\"built_in\">int</span>(vq), Q*Q)%(Q*Q)</span><br><span class=\"line\">tmp_q = <span class=\"built_in\">int</span>(tmp_q - <span class=\"number\">1</span>) // Q</span><br><span class=\"line\">mq = <span class=\"built_in\">int</span>(tmp_q * inv_q % Q)</span><br><span class=\"line\"></span><br><span class=\"line\">flag = crt(mp,mq,P,Q)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure></p>\n<p>官方板子：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> next_prime, iroot</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> getPrime, inverse, GCD, bytes_to_long, long_to_bytes</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">attack2</span>(<span class=\"params\">N, e, m, t, X, Y</span>):</span><br><span class=\"line\">    PR = PolynomialRing(QQ, <span class=\"string\">&#x27;x,y&#x27;</span>, <span class=\"number\">2</span>, order=<span class=\"string\">&#x27;lex&#x27;</span>)</span><br><span class=\"line\">    x, y = PR.gens()</span><br><span class=\"line\">    A = -(N-<span class=\"number\">1</span>)**<span class=\"number\">2</span></span><br><span class=\"line\">    F = x * y**<span class=\"number\">2</span> + A * x + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    G_polys = []</span><br><span class=\"line\">    <span class=\"comment\"># G_&#123;k,i_1,i_2&#125;(x,y) = x^&#123;i_1-k&#125;y_&#123;i_2-2k&#125;f(x,y)^&#123;k&#125;e^&#123;m-k&#125; </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i_1 <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k, m+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i_2 <span class=\"keyword\">in</span> [<span class=\"number\">2</span>*k, <span class=\"number\">2</span>*k + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                G_polys.append(x**(i_1-k) * y**(i_2-<span class=\"number\">2</span>*k) * F**k * e**(m-k))</span><br><span class=\"line\"></span><br><span class=\"line\">    H_polys = []</span><br><span class=\"line\">    <span class=\"comment\"># y_shift H_&#123;k,i_1,i_2&#125;(x,y) = y^&#123;i_2-2k&#125; f(x,y)^k e^&#123;m-k&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i_2 <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>*k+<span class=\"number\">2</span>, <span class=\"number\">2</span>*k+t+<span class=\"number\">1</span>):</span><br><span class=\"line\">            H_polys.append(y**(i_2-<span class=\"number\">2</span>*k) * F**k * e**(m-k))</span><br><span class=\"line\"></span><br><span class=\"line\">    polys = G_polys + H_polys</span><br><span class=\"line\">    monomials = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> poly <span class=\"keyword\">in</span> polys:</span><br><span class=\"line\">        monomials.append(poly.lm())</span><br><span class=\"line\">    </span><br><span class=\"line\">    dims1 = <span class=\"built_in\">len</span>(polys)</span><br><span class=\"line\">    dims2 = <span class=\"built_in\">len</span>(monomials)</span><br><span class=\"line\">    MM = matrix(QQ, dims1, dims2)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, poly <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(polys):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx_, monomial <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(monomials):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> monomial <span class=\"keyword\">in</span> poly.monomials():</span><br><span class=\"line\">                MM[idx, idx_] = poly.monomial_coefficient(monomial) * monomial(X, Y)</span><br><span class=\"line\">    B = MM.LLL()</span><br><span class=\"line\"></span><br><span class=\"line\">    found_polynomials = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> pol1_idx <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(B.nrows()):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pol2_idx <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(pol1_idx + <span class=\"number\">1</span>, B.nrows()):</span><br><span class=\"line\">            P = PolynomialRing(QQ, <span class=\"string\">&#x27;a,b&#x27;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">            a, b = P.gens()</span><br><span class=\"line\">            pol1 = pol2 = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> idx_, monomial <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(monomials):</span><br><span class=\"line\">                pol1 += monomial(a,b) * B[pol1_idx, idx_] / monomial(X, Y)</span><br><span class=\"line\">                pol2 += monomial(a,b) * B[pol2_idx, idx_] / monomial(X, Y)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># resultant</span></span><br><span class=\"line\">            rr = pol1.resultant(pol2)</span><br><span class=\"line\">            <span class=\"comment\"># are these good polynomials?</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> rr.is_zero() <span class=\"keyword\">or</span> rr.monomials() == [<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;found them, using vectors <span class=\"subst\">&#123;pol1_idx&#125;</span>, <span class=\"subst\">&#123;pol2_idx&#125;</span>&quot;</span>)</span><br><span class=\"line\">                found_polynomials = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> found_polynomials:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found_polynomials:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    PRq = PolynomialRing(QQ, <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">    z = PRq.gen()</span><br><span class=\"line\">    rr = rr(z, z)</span><br><span class=\"line\">    soly = rr.roots()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    ppol = pol1(z, soly)</span><br><span class=\"line\">    solx = ppol.roots()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solx, soly</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">seq</span>(<span class=\"params\">r, k, m</span>):</span><br><span class=\"line\">    v = vector(Zmod(m), [r, <span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> k &gt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">        M = Matrix(Zmod(m), [[r, -<span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">0</span>]])</span><br><span class=\"line\">        v = (M**(k-<span class=\"number\">1</span>)) * v</span><br><span class=\"line\">    ret = v[<span class=\"number\">0</span>] <span class=\"keyword\">if</span> k != <span class=\"number\">0</span> <span class=\"keyword\">else</span> v[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(ret)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">legendre_symbol</span>(<span class=\"params\">a, p</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Compute the Legendre symbol a|p using</span></span><br><span class=\"line\"><span class=\"string\">        Euler&#x27;s criterion. p is a prime, a is</span></span><br><span class=\"line\"><span class=\"string\">        relatively prime to p (if p divides</span></span><br><span class=\"line\"><span class=\"string\">        a, then a|p = 0)</span></span><br><span class=\"line\"><span class=\"string\">        Returns 1 if a has a square root modulo</span></span><br><span class=\"line\"><span class=\"string\">        p, -1 otherwise.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    ls = <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>,(p-<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span> <span class=\"keyword\">if</span> ls == p - <span class=\"number\">1</span> <span class=\"keyword\">else</span> ls</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">c, e, p, q</span>):</span><br><span class=\"line\">    d_p = &#123;<span class=\"number\">1</span>: <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, p-<span class=\"number\">1</span>)), -<span class=\"number\">1</span>: <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, p+<span class=\"number\">1</span>))&#125;</span><br><span class=\"line\">    d_q = &#123;<span class=\"number\">1</span>: <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, q-<span class=\"number\">1</span>)), -<span class=\"number\">1</span>: <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, q+<span class=\"number\">1</span>))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    inv_q = <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(p, -<span class=\"number\">1</span>, q))</span><br><span class=\"line\">    inv_p = <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(q, -<span class=\"number\">1</span>, p))</span><br><span class=\"line\"></span><br><span class=\"line\">    i_p = legendre_symbol(c**<span class=\"number\">2</span>-<span class=\"number\">4</span>, p)</span><br><span class=\"line\">    i_q = legendre_symbol(c**<span class=\"number\">2</span>-<span class=\"number\">4</span>, q)</span><br><span class=\"line\">    r_p = seq(c, d_p[i_p], p)</span><br><span class=\"line\">    r_q = seq(c, d_q[i_q], q)</span><br><span class=\"line\"></span><br><span class=\"line\">    r = CRT([r_p, r_q], [p, q])</span><br><span class=\"line\">    v_rp = seq(r, e, p**<span class=\"number\">2</span>)</span><br><span class=\"line\">    t_p = <span class=\"built_in\">int</span>((c * <span class=\"built_in\">pow</span>(v_rp, -<span class=\"number\">1</span>, p**<span class=\"number\">2</span>)) % p**<span class=\"number\">2</span>)</span><br><span class=\"line\">    s_p = (t_p - <span class=\"number\">1</span>) // p</span><br><span class=\"line\"></span><br><span class=\"line\">    v_rq = seq(r, e, q**<span class=\"number\">2</span>)</span><br><span class=\"line\">    t_q = <span class=\"built_in\">int</span>((c * <span class=\"built_in\">pow</span>(v_rq, -<span class=\"number\">1</span>, q**<span class=\"number\">2</span>)) % q**<span class=\"number\">2</span>)</span><br><span class=\"line\">    s_q = (t_q - <span class=\"number\">1</span>) // q</span><br><span class=\"line\"></span><br><span class=\"line\">    m_p = (s_p * inv_p) % p</span><br><span class=\"line\">    m_q = (s_q * inv_q) % q</span><br><span class=\"line\"></span><br><span class=\"line\">    m = CRT([m_p, m_q], [p, q])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    n = <span class=\"number\">59969098213446598961510550233718258878862148298191323654672950330070587404726715299685997489142290693126366408044603303463518341243526241117556011994804902686998166238333549719269703453450958140262475942580009981324936992976252832887660977703209225426388975233018602730303262439218292062822981478737257836581</span></span><br><span class=\"line\">    e = <span class=\"number\">970698965238639683403205181589498135440069660016843488485401994654202837058754446853559143754852628922125327583411039117445415303888796067576548626904070971514824878024057391507617988385537930417136322298476467215300995795105008488692961624917433064070351961856959734368784774555385603000155569897078026670993484466622344106374637350023474339105113172687604783395923403613555236693496567851779400707953027457705617050061193750124237055690801725151098972239120476113241310088089420901051617493693842562637896252448161948655455277146925913049354086353328749354876619287042077221173795354616472050669799421983520421287</span></span><br><span class=\"line\">    c = <span class=\"number\">2757297249371055260112176788534868300821961060153993508569437878576838431569949051806118959108641317578931985550844206475198216543139472405873345269094341570473142756599117266569746703013099627523306340748466413993624965897996985230542275127290795414763432332819334757831671028121489964563214463689614865416498886490980692515184662350519034273510244222407505570929178897273048405431658365659592815446583970229985655015539079874797518564867199632672678818617933927005198847206019475149998468493858071672920824599672525667187482558622701227716212254925837398813278836428805193481064316937182435285668656233017810444672</span></span><br><span class=\"line\"></span><br><span class=\"line\">    alpha = ZZ(e).nbits() / ZZ(n).nbits()</span><br><span class=\"line\">    beta = <span class=\"number\">0.44</span></span><br><span class=\"line\">    nbits = <span class=\"number\">1024</span></span><br><span class=\"line\">    delta = <span class=\"number\">0.63</span></span><br><span class=\"line\"></span><br><span class=\"line\">    X = <span class=\"number\">2</span> ** <span class=\"built_in\">int</span>(nbits*(alpha+delta-<span class=\"number\">2</span>)+<span class=\"number\">3</span>)</span><br><span class=\"line\">    Y = <span class=\"number\">2</span> ** <span class=\"built_in\">int</span>(nbits*beta+<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    x, y = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, attack2(n, e, <span class=\"number\">8</span>, <span class=\"number\">12</span>, X, Y))</span><br><span class=\"line\">    p_minus_q = y</span><br><span class=\"line\">    p_plus_q = iroot(p_minus_q**<span class=\"number\">2</span> + <span class=\"number\">4</span> * n, <span class=\"number\">2</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    p = (p_minus_q + p_plus_q) // <span class=\"number\">2</span></span><br><span class=\"line\">    q = n // p</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> p * q == n</span><br><span class=\"line\">    phi = (p**<span class=\"number\">2</span> - <span class=\"number\">1</span>) * (q**<span class=\"number\">2</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">    d = inverse(e, phi)</span><br><span class=\"line\">    m = decrypt(c, e, p, q)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://justgo00.github.io/2023/12/12/2023_%E9%B9%8F%E7%A8%8B%E6%9D%AF/",
            "url": "https://justgo00.github.io/2023/12/12/2023_%E9%B9%8F%E7%A8%8B%E6%9D%AF/",
            "title": "2023鹏程杯",
            "date_published": "2023-12-11T16:44:41.573Z",
            "content_html": "<h3 id=\"leakyrsa\"><a class=\"anchor\" href=\"#leakyrsa\">#</a> [LeakyRSA]</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\">from secret import flag</span><br><span class=\"line\"></span><br><span class=\"line\">nbits=512</span><br><span class=\"line\">p=getPrime(nbits)</span><br><span class=\"line\">q=getPrime(nbits)</span><br><span class=\"line\"></span><br><span class=\"line\">leakBits = 262</span><br><span class=\"line\">leak = (p ^ q)  &gt;&gt; (nbits - leakBits)</span><br><span class=\"line\"></span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">e=65537</span><br><span class=\"line\">m = bytes_to_long(flag)</span><br><span class=\"line\">c = pow(m,e,n)</span><br><span class=\"line\">print(p)</span><br><span class=\"line\">print(q)</span><br><span class=\"line\">print(&quot;n=%d&quot; %n)</span><br><span class=\"line\">print(&quot;c=%d&quot; %c)</span><br><span class=\"line\">print(&quot;leak=%d&quot; %leak)</span><br><span class=\"line\"># n=73822410148110759760164946405270228269255384237831275745269402590230495569279769799226813942899942423718229747478982630879557319063920515141217164980012063064986634632452289290326704640527699568662492105204165609614169349755365956569362139057327962393611139347462018186440108621311077722819578905265976612923      </span><br><span class=\"line\"># c=71808322808599218331233291542779486534747913572475630198802984648982830332628443972652322590637382696027943799004331488098592525306523343649935216419522329722152742610560398216737030893090641493326477786720839849938277402743820773957184083430369443325368720115515840174745825798187125454448297155036065857691      </span><br><span class=\"line\"># leak=2223117424030234543005449667053988296724455736030907136592525175314696509716321</span><br></pre></td></tr></table></figure></p>\n<p>除了基本参数，题目还给了 的高 262 比特。所以大致方向就是利用这个信息，以及 来恢复 的高位，然后再走一个 coppersmith 完成对 n 的分解。</p>\n<p>那么我们首先需要根据条件，对 自高位进行剪枝爆破。约束的条件总共有四条：</p>\n<p>其中比较 “强” 的是 ，每当我们选择一个 的比特，那么此时 的对应比特也能确定。  <code>xor(pnew,qnew) == leak[:2+i]</code></p>\n<p>另外一个我们这里稍微意会一下（就是不严格证明了），就是 高位相乘的结果，前面大约一半的数和 的高位是相同的。 <code>tmp&gt;&gt;(tmp.bit_length()-i//2)== n&gt;&gt;(n.bit_length()-i//2)</code></p>\n<p>当我们定下了当前 的高位，那么 低位全补 0，然后它们相乘的结果要小于 。  <code>(int(pnew.ljust(512,'0'),2)*int(qnew.ljust(512,'0'),2) &lt; n)</code></p>\n<p>当我们定下了当前 的高位，那么 低位全补 1，然后它们相乘的结果要大于 。 <code>(int(pnew.ljust(512,'1'),2)*int(qnew.ljust(512,'1'),2) &gt; n)</code></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\"></span><br><span class=\"line\">def xor(a,b):</span><br><span class=\"line\">    tmp = &quot;&quot;</span><br><span class=\"line\">    for i,j in zip(a,b):</span><br><span class=\"line\">        tmp+=str(ord(i)^ord(j))</span><br><span class=\"line\">    return tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">nbits = 512</span><br><span class=\"line\">leakBits = 262</span><br><span class=\"line\"></span><br><span class=\"line\">leak=2223117424030234543005449667053988296724455736030907136592525175314696509716321</span><br><span class=\"line\">leak = bin(leak)[2:].rjust(262,&#x27;0&#x27;)</span><br><span class=\"line\">n=73822410148110759760164946405270228269255384237831275745269402590230495569279769799226813942899942423718229747478982630879557319063920515141217164980012063064986634632452289290326704640527699568662492105204165609614169349755365956569362139057327962393611139347462018186440108621311077722819578905265976612923      </span><br><span class=\"line\"></span><br><span class=\"line\">p=&#x27;1&#x27;</span><br><span class=\"line\">q=&#x27;1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">P=[p]</span><br><span class=\"line\">Q=[q]</span><br><span class=\"line\">for i in range(261):</span><br><span class=\"line\">    PP=[]</span><br><span class=\"line\">    QQ=[]</span><br><span class=\"line\">    for a in &#x27;01&#x27;:</span><br><span class=\"line\">        for b in &#x27;01&#x27;:</span><br><span class=\"line\">            for pnew,qnew in zip(P,Q):</span><br><span class=\"line\">                pnew = pnew+a</span><br><span class=\"line\">                qnew = qnew+b</span><br><span class=\"line\">                tmp = int(pnew,2)*int(qnew,2)</span><br><span class=\"line\">                #print(tmp)</span><br><span class=\"line\">                if xor(pnew,qnew) == leak[:2+i] and  tmp&gt;&gt;(tmp.bit_length()-i//2)== n&gt;&gt;(n.bit_length()-i//2) and (int(pnew.ljust(512,&#x27;0&#x27;),2)*int(qnew.ljust(512,&#x27;0&#x27;),2) &lt; n)  and (int(pnew.ljust(512,&#x27;1&#x27;),2)*int(qnew.ljust(512,&#x27;1&#x27;),2) &gt; n) :</span><br><span class=\"line\">                    PP.append(pnew)</span><br><span class=\"line\">                    QQ.append(qnew)</span><br><span class=\"line\">    print(len(P))</span><br><span class=\"line\">    P = PP.copy()</span><br><span class=\"line\">    Q = QQ.copy()</span><br><span class=\"line\">print(P)</span><br><span class=\"line\"></span><br><span class=\"line\"># P = [&#x27;1000001000011100010101010110000111101011000100111100000111111100011001101101101110100111101010111011001100111101001100010011110010100000001100010100110110000110000100101000111110110000101100100010111111001101001000001001111101111010000011111000101010100100000010&#x27;, &#x27;1100111011010111101010100001110101111111100110111010101010011101100000101101010010101000010011001110110001011011011010000000100000111100111011101111100011110110111000000101100100101100100011111110011000101011011010100011001010101100111000100100110011001101000010&#x27;, &#x27;1000001000011100010101010110000111101011000100111100000111111100011001101101101110100111101010111011001100111101001100010011110010100000001100010100110110000110000100101000111110110000101100100010111111001101001000001001111101111010000011111000101100010000100010&#x27;, &#x27;1100111011010111101010100001110101111111100110111010101010011101100000101101010010101000010011001110110001011011011010000000100000111100111011101111100011110110111000000101100100101100100011111110011000101011011010100011001010101100111000100100110101111001100010&#x27;, &#x27;1000001000011100010101010110000111101011000100111100000111111100011001101101101110100111101010111011001100111101001100010011110010100000001100010100110110000110000100101000111110110000101100100010111111001101001000001001111101111010000011111000101100010000001010&#x27;, &#x27;1000001000011100010101010110000111101011000100111100000111111100011001101101101110100111101010111011001100111101001100010011110010100000001100010100110110000110000100101000111110110000101100100010111111001101001000001001111101111010000011111000101010100100000011&#x27;, &#x27;1100111011010111101010100001110101111111100110111010101010011101100000101101010010101000010011001110110001011011011010000000100000111100111011101111100011110110111000000101100100101100100011111110011000101011011010100011001010101100111000100100110011001101000011&#x27;, &#x27;1000001000011100010101010110000111101011000100111100000111111100011001101101101110100111101010111011001100111101001100010011110010100000001100010100110110000110000100101000111110110000101100100010111111001101001000001001111101111010000011111000101100010000100011&#x27;, &#x27;1100111011010111101010100001110101111111100110111010101010011101100000101101010010101000010011001110110001011011011010000000100000111100111011101111100011110110111000000101100100101100100011111110011000101011011010100011001010101100111000100100110101111001100011&#x27;, &#x27;1100111011010111101010100001110101111111100110111010101010011101100000101101010010101000010011001110110001011011011010000000100000111100111011101111100011110110111000000101100100101100100011111110011000101011011010100011001010101100111000100100110011001101101011&#x27;]</span><br></pre></td></tr></table></figure></p>\n<p>这里我们能够得到十个可能的 ，不过根据我们的代码， 是等价的，也就意味着其中有两个值是正确的。我们遍历其中的数，走一个 coppersmith 。由于这里泄露的比特不多，经过测试，如果想恢复 250 比特的低位，那么需要设置  <code>beta=0.47,epsilon=0.008</code> ，跑一次比较久。这里我选择再爆破 5 个比特，这样子可以设  <code>epsilon=0.02</code> ，跑起来要稍微快些。</p>\n<p>有结果了之后正常解一个 RSA 就可以了。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tqdm import *</span><br><span class=\"line\">R.&lt;x&gt; = Zmod(n)[]</span><br><span class=\"line\">for pbar in tqdm(P[::-1]):</span><br><span class=\"line\">    for i in range(32):</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp = int(pbar,2)&lt;&lt;5</span><br><span class=\"line\">        tmp+=i</span><br><span class=\"line\">        f = tmp*2**245 + x</span><br><span class=\"line\">        xx = f.monic().small_roots(X=2^245,beta=0.47,epsilon=0.02)</span><br><span class=\"line\">        if xx:</span><br><span class=\"line\">            p = f(xx[0])</span><br><span class=\"line\">            print(p)</span><br><span class=\"line\"># 6814449132912466352143200200256605077873329465758477832056090562012411200107156482645933890997787435093806046493913273252717701817613907418845774345791241</span><br><span class=\"line\"></span><br><span class=\"line\">c=71808322808599218331233291542779486534747913572475630198802984648982830332628443972652322590637382696027943799004331488098592525306523343649935216419522329722152742610560398216737030893090641493326477786720839849938277402743820773957184083430369443325368720115515840174745825798187125454448297155036065857691      </span><br><span class=\"line\">n=73822410148110759760164946405270228269255384237831275745269402590230495569279769799226813942899942423718229747478982630879557319063920515141217164980012063064986634632452289290326704640527699568662492105204165609614169349755365956569362139057327962393611139347462018186440108621311077722819578905265976612923      </span><br><span class=\"line\">p=6814449132912466352143200200256605077873329465758477832056090562012411200107156482645933890997787435093806046493913273252717701817613907418845774345791241</span><br><span class=\"line\">q=n//p</span><br><span class=\"line\">d = inverse(65537,(p-1)*(q-1))</span><br><span class=\"line\">print(long_to_bytes(pow(c,d,n)))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"neltharion_and_arthas\"><a class=\"anchor\" href=\"#neltharion_and_arthas\">#</a> [Neltharion_and_Arthas]</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import binascii</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">from flag import flag</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">from Crypto.Util import *</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">key1 = os.urandom(32)</span><br><span class=\"line\">key2 = b&#x27;tn*-ix6L*tCa*&#125;i*&#x27;</span><br><span class=\"line\">key_len = len(key2)</span><br><span class=\"line\">assert flag.startswith(b&#x27;flag&#123;&#x27;)</span><br><span class=\"line\">assert (flag[13] == 45 and flag[18] == 45 and flag[23] == 45 and flag[28] == 45)</span><br><span class=\"line\">flag1 = b&quot;2023: &quot;+flag[:13]+flag[14:18]+flag[19:23]</span><br><span class=\"line\">flag2 = &#x27;a3eae82b4c491e0e&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">h = binascii.unhexlify(hashlib.sha256(key2).hexdigest())[:11]</span><br><span class=\"line\">gift1 = b&#x27;***********************************************************************************************&#x27;</span><br><span class=\"line\">gift2 = b&#x27;I tell you this, for when my days have come to an end , you, shall be King.&#x27;+h</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def encrypt1(message, key):</span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CTR, counter=Counter.new(128))</span><br><span class=\"line\">    ciphertext = cipher.encrypt(message)</span><br><span class=\"line\">    return ciphertext.hex()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def encrypt2(message, key, iv):</span><br><span class=\"line\">    padding = bytes((key_len - len(message) % key_len) * &#x27;&amp;&#x27;, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">    message += padding</span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class=\"line\">    ciphertext = cipher.encrypt(message)</span><br><span class=\"line\">    return ciphertext.hex()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;enc_gift1 = &quot;+encrypt1(gift1, key1))</span><br><span class=\"line\">print(&quot;enc_flag = &quot;+encrypt1(flag1, key1))</span><br><span class=\"line\">print(&quot;enc_gift2 = &quot;+encrypt2(gift2, key2, flag2))</span><br><span class=\"line\"></span><br><span class=\"line\"># enc_gift1 = bad7dbcff968d7cdbf51da011fe94e176fc8e7528e4dd85d2d5fc20ba69cefb7bfd03152a2874705bd2d857ea75b3216a830215db74772d9b9e9c218271d562694d3642d2917972fdb8c7363d8125730a50824cd8dc7e34cd4fa54be427cca</span><br><span class=\"line\"># enc_flag = c1c78891e30cd4c0aa5ed65c17e8550429c4e640881f9f1d6a56df</span><br><span class=\"line\"># enc_gift2 = ********c********b**************4***5********3****6a*****a**2********c*8******7***********3***5***2********e*5*************a******5**c***74***********fee046b4d2918096cfa3b76d6622914395c7e28eef</span><br></pre></td></tr></table></figure></p>\n<p>这题目一眼看过去就知道要爆破了（烦人。）不过题目本身涉及的知识点并不难，稍微了解过 CTR 和 CBC 模式就能做了。</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/sz_mmbiz_png/XpBS9rnxDafibiaFomS2g8k55FLBIVjaJ4yMXwGYkIibVen7MfqGuXbonTI0zFRagGLYIrNTj57gH4x74Yo6GWKDw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p>首先是 flag 的第一部分，看到  <code>encrypt1</code>  函数，使用的是  CTR 模式，并且每一次的计数器都是从同一个位置开始。我们知道 CTR 模式是有点类似于流密码的，因此遭受不住已知明文攻击。而题目使用同样的 key1 对 gift1 和 flag1 分别进行了一次加密，因此只要我们能够知道 gift1 的内容，就能利用 gift1 和其对应密文来恢复 flag1 了。</p>\n<p>首先看到  <code>flag1 = b&quot;2023: &quot;+flag[:13]+flag[14:18]+flag[19:23]</code> ，而根据前面解出的 flag，我们知道这个比赛的 flag 都是  <code>flag&#123;&#125;</code>  的格式。于是相当于我们已经知道了 flag1 的 11 个字节的明文，即  <code>2023: flag&#123;</code> ，对应的，我们也能够恢复 11 字节的 gift1</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def xor(a,b):</span><br><span class=\"line\">    tmp = &quot;&quot;</span><br><span class=\"line\">    for i,j in zip(a,b):</span><br><span class=\"line\">        tmp+=chr(i^j)</span><br><span class=\"line\">    return tmp.encode(&#x27;latin1&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">enc_gift1 = &#x27;bad7dbcff968d7cdbf51da011fe94e176fc8e7528e4dd85d2d5fc20ba69cefb7bfd03152a2874705bd2d857ea75b3216a830215db74772d9b9e9c218271d562694d3642d2917972fdb8c7363d8125730a50824cd8dc7e34cd4fa54be427cca&#x27;</span><br><span class=\"line\">enc_flag = &#x27;c1c78891e30cd4c0aa5ed65c17e8550429c4e640881f9f1d6a56df&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">enc_flag=bytes.fromhex(enc_flag)</span><br><span class=\"line\">enc_gift1=bytes.fromhex(enc_gift1)[:len(enc_flag)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ans = (xor(b&quot;2023: flag&#123;&quot;,xor(enc_gift1,enc_flag)))</span><br><span class=\"line\">print(ans)</span><br></pre></td></tr></table></figure></p>\n<p>我们得到  <code>b'I am Deathw'</code></p>\n<p>拿着这个题目名字去百度搜，可以搜到一个暴雪的英雄，死亡之翼，因此这里应该是 Deathwing，再搜一下，就能够搜到原台词： <code>I am Deathwing, the destroyer, the end of all things,inevitable,indomitable,I am the cataclysm</code></p>\n<p>最后就可以用这个原台词恢复 flag1 了</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def xor(a,b):</span><br><span class=\"line\">    tmp = &quot;&quot;</span><br><span class=\"line\">    for i,j in zip(a,b):</span><br><span class=\"line\">        tmp+=chr(i^j)</span><br><span class=\"line\">    return tmp.encode(&#x27;latin1&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">enc_gift1 = &#x27;bad7dbcff968d7cdbf51da011fe94e176fc8e7528e4dd85d2d5fc20ba69cefb7bfd03152a2874705bd2d857ea75b3216a830215db74772d9b9e9c218271d562694d3642d2917972fdb8c7363d8125730a50824cd8dc7e34cd4fa54be427cca&#x27;</span><br><span class=\"line\">enc_flag = &#x27;c1c78891e30cd4c0aa5ed65c17e8550429c4e640881f9f1d6a56df&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">enc_flag=bytes.fromhex(enc_flag)</span><br><span class=\"line\">enc_gift1=bytes.fromhex(enc_gift1)[:len(enc_flag)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ans = (xor(b&quot;I am Deathwing, the destroyer, the end of all things,inevitable,indomitable,I am the cataclysm&quot;,xor(enc_gift1,enc_flag)))</span><br><span class=\"line\">print(ans)</span><br></pre></td></tr></table></figure></p>\n<p>得到 ： <code>b'2023: flag&#123;4ff732dd2b7445fd'</code></p>\n<p>然后看到  <code>encrypt2</code>  函数，</p>\n<p>使用的 CBC 模式，</p>\n<p>填充符号用的是  <code>&amp;</code> ，</p>\n<p>key2 也给出了绝大部分  <code>key2 = b'tn*-ix6L*tCa*&#125;i*'</code> ，</p>\n<p>gift2 为  <code>gift2 = b'I tell you this, for when my days have come to an end , you, shall be King.'+h</code> ，其中 h 是 key2 的 sha256 的前 11 个字节。因此我们知道 gift2 的绝大部分内容，以及其最终的字符串长度。测一下不难得到在加密时，<strong>gift2 后面会填充 10 个 &amp;，这是我们爆破 key2 的关键</strong>。</p>\n<p>最后 gift2 的密文是   <code>********c********b**************4***5********3****6a*****a**2********c*8******7***********3***5***2********e*5*************a******5**c***74***********fee046b4d2918096cfa3b76d6622914395c7e28eef</code> ，只有最后一组是完整的，倒数第二组只有最后 10 个字符也就是 5 个字节。</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/sz_mmbiz_png/XpBS9rnxDafibiaFomS2g8k55FLBIVjaJ4kOn13Ive5CUfpVa3XgpqMrskof2J4l1cObqdiccRgkoas1usAjICtXg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p>爆破方案就是，根据 CBC 模式，最后一组密文使用 AES 解密后，还要和前一组密文异或才能得到明文。那么这里，我们首先爆破密钥 key2，然后对最后一组密文进行解密，解密后的最后 5 个字节，和倒数第二组还 “幸存” 的 5 个字节进行异或，如果结果是 5 个  <code>&amp;</code>  字符的话，就说明爆破的密钥 key2 正确。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from string import printable</span><br><span class=\"line\">from tqdm import *</span><br><span class=\"line\">enc_gift2 = &quot;fee046b4d2918096cfa3b76d6622914395c7e28eef&quot;</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">def xor(a,b):</span><br><span class=\"line\">    tmp = &quot;&quot;</span><br><span class=\"line\">    for i,j in zip(a,b):</span><br><span class=\"line\">        tmp+=chr(i^j)</span><br><span class=\"line\">    return tmp.encode(&#x27;latin1&#x27;)</span><br><span class=\"line\">iv = bytes.fromhex(enc_gift2[:10])</span><br><span class=\"line\">cipher = bytes.fromhex(enc_gift2[-32:])</span><br><span class=\"line\">for i in tqdm(printable):</span><br><span class=\"line\">    for j in printable:</span><br><span class=\"line\">        for k in printable:</span><br><span class=\"line\">            for l in printable:</span><br><span class=\"line\">                key2 = &#x27;tn%s-ix6L%stCa%s&#125;i%s&#x27;%(i,j,k,l)</span><br><span class=\"line\">                dec = AES.new(key2.encode(), AES.MODE_ECB)</span><br><span class=\"line\">                m = dec.decrypt(cipher)</span><br><span class=\"line\">                m = xor(iv,m[-5:])</span><br><span class=\"line\">                if m == b&quot;&amp;&quot;*5:</span><br><span class=\"line\">                    print(key2)</span><br></pre></td></tr></table></figure></p>\n<p>最后我们得到  <code>key2 = b'tn5-ix6L#tCaG&#125;i6'</code></p>\n<p>不过由于这里 flag2 是用作于 AES 的 iv。想要恢复这个 iv 就要用 gift2 第一组明文的 AES 密文和通过 CBC 模式得到的密文进行异或（为了区分，我们分别叫它们 AES 密文 和 CBC 密文好了，其实就是差了一个异或的值）。由于我们已经知道 gift2 的第一组明文了，想要获取其 AES 密文 只需要用 key2 加密一下就好了。那么目前的问题就是如何获得其 CBC 密文，即获得 。而想要获得第一组的 CBC 密文，我们只需要获取第二组的 AES 密文和 CBC 密文，让他们异或一下就好了，而获取第二组的 CBC 密文......，因此问题就来到了最后一组。而最后一组的 CBC 密文我们是知道的，由于 key2 爆出来了，其 sha256 我们也能算，只需要 6 个字节，因为还有 10 个字节的填充符号  <code>&amp;</code> ，于是 AES 密文也有了，这样就能有前一组的 CBC 密文，有了前一组的 CBC 密文，就能有前前一组的密文了......</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">import binascii</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">def xor(a,b):</span><br><span class=\"line\">    tmp = &quot;&quot;</span><br><span class=\"line\">    for i,j in zip(a,b):</span><br><span class=\"line\">        tmp+=chr(i^j)</span><br><span class=\"line\">key2 = b&#x27;tn5-ix6L#tCaG&#125;i6&#x27;</span><br><span class=\"line\">enc_gift2 = &quot;918096cfa3b76d6622914395c7e28eef&quot;</span><br><span class=\"line\">h = binascii.unhexlify(hashlib.sha256(key2).hexdigest())[:11]</span><br><span class=\"line\">gift2 = b&#x27;I tell you this, for when my days have come to an end , you, shall be King.&#x27;+h</span><br><span class=\"line\">gift2 += b&#x27;&amp;&#x27;*10</span><br><span class=\"line\"></span><br><span class=\"line\">M = []</span><br><span class=\"line\">for i in range(0,len(gift2),16):</span><br><span class=\"line\">    M.append(gift2[i:i+16])</span><br><span class=\"line\">Minv = M[::-1]</span><br><span class=\"line\"></span><br><span class=\"line\">nowcipher = bytes.fromhex(enc_gift2)</span><br><span class=\"line\">for i in range(6):</span><br><span class=\"line\">    dec = AES.new(key2, AES.MODE_ECB)</span><br><span class=\"line\">    m = dec.decrypt(nowcipher)</span><br><span class=\"line\">    precipher = xor(Minv[i],m)</span><br><span class=\"line\">    nowcipher = precipher</span><br><span class=\"line\">print(precipher)</span><br></pre></td></tr></table></figure></p>\n<p>得到  <code>a3eae82b4c491e0e</code></p>\n<p>结合  <code>assert (flag[13] == 45 and flag[18] == 45 and flag[23] == 45 and flag[28] == 45)</code></p>\n<p>显然 flag 是一个 uuid，于是最终的 flag 为  <code>flag&#123;4ff732dd-2b74-45fd-a3ea-e82b4c491e0e&#125;</code></p>\n<h3 id=\"colorful_matrix\"><a class=\"anchor\" href=\"#colorful_matrix\">#</a> [colorful_matrix]</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">from Crypto.Util.Padding import pad</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\">import os</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">def xor(a, b):</span><br><span class=\"line\">    return bytes([a[i%len(a)] ^ b[i%len(b)] for i in range(max(len(a), len(b)))])</span><br><span class=\"line\">flag = b&#x27;flag&#123;xxxxxx&#125;&#x27;</span><br><span class=\"line\">key1 = hashlib.md5(os.urandom(16)).hexdigest().encode()</span><br><span class=\"line\">key2 = hashlib.md5(os.urandom(16)).hexdigest().encode()</span><br><span class=\"line\">num1 = 5</span><br><span class=\"line\">p = int(gmpy2.next_prime(bytes_to_long(key1 + os.urandom(64))))</span><br><span class=\"line\">ms = [random.getrandbits(256) for _ in range(num1)]</span><br><span class=\"line\">qs = [getPrime(1024) for _ in range(num1)]</span><br><span class=\"line\">ns = [p * qs[_] + ms[_] for _ in range(num1)]</span><br><span class=\"line\"></span><br><span class=\"line\">num2 = 37</span><br><span class=\"line\">x = bytes_to_long(key2 + os.urandom(32))</span><br><span class=\"line\">A = []</span><br><span class=\"line\">B = []</span><br><span class=\"line\">for i in range(num2):</span><br><span class=\"line\">    a = random.getrandbits(512)</span><br><span class=\"line\">    b = a * x % p</span><br><span class=\"line\">    gift = (2 ** 128 - 1) * 2 ** 400</span><br><span class=\"line\">    A.append(a)</span><br><span class=\"line\">    B.append((b &amp; gift) &gt;&gt; 400)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bh + bm + bl = a * x + kp</span><br><span class=\"line\">bh * 2^528 + bl = a * x - bm * 2^400 + kp</span><br><span class=\"line\">238          400</span><br><span class=\"line\"></span><br><span class=\"line\">iv = long_to_bytes(random.getrandbits(128))</span><br><span class=\"line\">key = xor(key1,key2)</span><br><span class=\"line\">aes = AES.new(key1,AES.MODE_CBC,iv)</span><br><span class=\"line\">enc = aes.encrypt(pad(flag,48))</span><br><span class=\"line\">print(f&#x27;ns = &#123;ns&#125;&#x27;)</span><br><span class=\"line\">print(f&#x27;A = &#123;A&#125;&#x27;)</span><br><span class=\"line\">print(f&#x27;B = &#123;B&#125;&#x27;)</span><br><span class=\"line\">print(f&#x27;enc = &#123;enc&#125;&#x27;)</span><br><span class=\"line\"># ns = [38630062416586710341458654419912504176237737247477839749085033080367529539859992076587411537805430366799412095876782912512744262957062106155418341531142309858429218208463637096843365217114990765965110566415965985105403996944993619708417839598461935470469097206342256014086162845948208599334925650727933097059538199199685364793545286980392966271769914201657672004082101110775504946586957241075964270454872257405872181588544468173017149763827540561921126826597515171761064800381983526515300315517818122598179574900255685121991744205071544970, 41522753602903133841910260331594875922287719226997542592715810409935551768308104573333760854332533376702631593490915962706512143045107096658851885513727202513616813054397657610854303071682604806070009002234312854968365250748142324994926715544722158698813288131533399544263105858513134170084625526223987620550110255872688155827773099232631041345207194483609514502522566888883736218471849075697433311580004701384847571029783514418685068903758509270527252444771313048094566344002411364378658592832008194309873599342916391769027015343562030852, 41542983120532762175372001624404625565366126179958909731196555044290633581761361918706298428954501507557598076910710787422049443564800530253137695341299743714514361560156305534490483794181933110893966453220306980682146624294992100948497284459992930850081254114996830645068636306625330524465991656430799359422407117440063911943625477783216502523414967017151717597372146324488526509879620785458016456593044828784565522423332830549325397893426472247197776412026158371655860380929692662547882654137064941217130915364306358205055760044763651406, 42853015443318352230776688785915441259875645365236808434164117288657978345098324019250085686482568413223085548506789311679316323466083886556772338612177680666217592255234589446979456714341877135596118517098603502394776049958587301113539552072352462301070489369653155854389890761241450743607560719433910573462283304103064437843063566946231984094581307498714742271881862348689297267558023093643893310002803310596286441071314219020032740336515363830250477649030557311461077069407775907176409762823453607196260454965048316567154365877848652918, 31152961872836435078296602982779340735140569916125711058616435902653202922218293684857125091648631460215120167354825278469413413558325850576700866199515219603448136082693185200558425103833947831228064760642508443585470729998592994719564254894176473779555436230174300038353978808432410463449170865897259181312953584408177790825688497584119467820716449210429423337019604137134889051973100340798405991782200038835066294194815913887924272593864934325496116821854183293510325217934617021428710898873475027666892706022106386340733691632884942848]</span><br><span class=\"line\"># A = [12789809461864875489953273982997537541385904671489556544122095227619591140533414669794423644619127980362623481580128258914287474542792728686579090501397390, 10463950513938701625808784986819665844287315724639315128677227520960105897990256530542006653611594269012930935073966767351788182657861624733138283749460454, 5253244650607533810967862436125419800679723144526973463211784033045021824966560017919956773745212139142517766154626849426827164032731516615725539069585525, 5644589184984504085855423002268477365020278981591337230721358313393863912025011466727192648804002734561676112555123877764178690726130713927642577324443238, 4231732567865883627242742552738439372803539125622706171540910152922080004603138662537022248675968288205781990968838888633816697065257733344028576518431020, 2483388920404524165854675814798022834892112957478917588986471421083048888193527751575039626887367465858751417977246719312923814782809309525841102293919541, 3252353812256192711411255830105475125944842449239880454539397067913664088094160819193268643401968970009466652179043139341471403913410402646923633696154454, 11575010486066232687430367040977113580882826853104996856464797182632266635060724100357205810604915010810884387573114266349621457564659060272935537811111850, 116107444921917032985259963199427176510900273385517435613848456370557161312731449337837406563733552524777525870560544042690403987311424820755256727586807, 5859050133610438843641532306693688255014116940390205022708310454673159702673207152462501010791971695002865650407033762568636006764435795015869726867643634, 5954075553161305677556950650395792531753502207483036473422070018485916621872566706504374038792527687442272405589975343003802956899043321092006127828986114, 4571747544457157571652286537158051402285727327066029382085461714597609990601683125994983291866807816649968826930652068427193317966970789937746419206862747, 7166507561570980603812241332170524724051295937096000768984168029904561160020043035660087151672164814332446644696618077835020463308343415953131944864257266, 4852042788460566411381271873349329096978244586097817622748766708426751073559942708861852208085367014057217116211249133109246735634468823924185525972777655, 11962941918999276757181090570698839032103646409734781047194175833198626142790676141060052011581957980660140931408560130449153056874213033784715711461403345, 10324508881746579337486319574059121005227580732153432145860775835052420139026016902518605634385512021513380467928195663920843022679549517463264144660593354, 13276257094435850052122403884510025189232513948002582716865201271569293297601525601586036713056700716929820641888489806178376555435219630186396004003438962, 6525051273399089095687950615197786094425890004112675057642687348101531212837185750558500720306108976630502328600886080197626115513445112562084719104488315, 12922888505610354933000354792496863801007995464403098763485264334670452387681468617068312646367483171083114539083453125614861357751571161533921864394641576, 9489726784141062031514945333087338495823600723655465328127755755022980083351477888038160719541864899912899592065620071698977397662002448273876711116012763, 10630316198843195148937849513165933809121991192035364160395429088101265852052098101114542104327663563661384303617672183366879116750889320604308038959012109, 12675564142993964272844760955973914547747654087592111324261755301551267959231076883765863344473167582531968290671984039948163579495803204811731286282708940, 11847724105274460405216443356582445218232627275228120716891711887600046501095390733716854871561352002320819466803698088448952127166615410820121973485089326, 5131676593756685549522564504727003861447389891839469018437277330988047271086971907217360711863971849879439418231726349935396008040776952541710218842744018, 8049060452950901277510497437779182190254362319091882684392717180429468875432078713802857488901441344429723298843967365750616860588029426099852763482179470, 2365060249260571713545479629411006471094806409182638354076861269679377537605360223984548798658469783472746989448405310909017645138161178501458084966625559, 7467521246204465304438401242342633361751371318557249418344587207503257890765643838557008735305668588521988487342275527781708126255070883848829062790678347, 5841608816993144092409175658260479687582056537041472535819914412630519543198558564258699185557903902095773598614097026740427138629173672250387442834578787, 3935779917509948624841228665498558015416911059417306651751360048412619176423173794541812556512582747588138532941031730797102738268660078594473168666677171, 1459083415233950534805962555425717865938763752937036513111696179351002303817986848490146888626704327653287774806488952733813718461674376764427084478395399, 6426876689549337938550615491086475536072547585103523407263007393570982327518298678278232288342601754164640081474537962710401178482959474762541185760732929, 5241364650650467046722868257809607948071188801137204831449976666385482519613365369974704486723941517654753205012497273820309153659423928739972270634209996, 6387483223002092292686097811446217867743566298067033295601210265979889577756648605354064672061975949925472022416479935990178719227937307079186916383092053, 170562164015232424518655058158727202269056868720093972639058422975773575660534168774299548952867348396798580779605954510297102765330549642318362861226163, 10004133230245713370426176448219282796530473722412487408402635996842671302539458739305597027107498342509248085998067976408732789438099488867425813748783724, 12325342879747412722323355648741345730921040452129462974449188258885453690169624888480720109964630270938743431623479816739889661554987977051169401841580388, 641543989928732942291347866597230552820621633110802944556141221591498546555080480758772801043509130524233886009444044150447511986129019395067102094826363]</span><br><span class=\"line\"># B = [108715652691370707411987210267535348806, 131676833696101475747102644851662113271, 122436706338521558335484593966234623745, 255864866572301552398412638474857375629, 81098761191414480003681301866161112100, 322322463176364397336266169283851913620, 198167679309202772183020662350938553923, 326360662842236388778385468938922853242, 241812832858991643670485138860832357660, 69768236619183466076110136290750715548, 32383134960394164339076842474280712870, 147747232748027508904245311745435517130, 25327826075608705748116808975774398964, 65295332681674581261444632606267440749, 236756211690281667988216748814564193312, 106435149910135092172124474857722935730, 270727089812520941022075406571244846193, 206881193220261276126028739930244917728, 131961838897694897398340205404861333362, 219211823942216355573832791993673934321, 150960424777134558142309786444952807101, 51112048255939343109218372373173385772, 182065623911902509203036774197184164110, 168420344895532090057957641972492853410, 301808673225362418769168353084541667053, 132272458662433671393247350648662880688, 495672626901999558635736361346563007, 182444159345379042372018248514964944782, 144584137563407779776361378564517880036, 338518705859818740467225748906995999694, 205885429741815676881969528495365151019, 233897982464483450790005953366237992668, 279307677123402840425362992920185630901, 133493426228159673166382443820069696429, 316624110847744871475435405969944304329, 187931604382397525131117897387179435812, 220019728924915067987393012581921164417]</span><br><span class=\"line\"># enc = b&#x27;cTmkMb\\xfc\\x05|\\x1d\\xc7\\x13\\xbaSe\\xe0\\xbd\\xc0\\xd9\\xa3\\x8cwo\\x82yN[B&amp;\\x80\\xd7KPwQ`\\x9c\\xbf&lt;y\\x8e\\x8a\\x97e\\xa074\\xb2&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">#c7-11ee-ae14-ac1203ab14da&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先看到</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = int(gmpy2.next_prime(bytes_to_long(key1 + os.urandom(64))))</span><br><span class=\"line\">ms = [random.getrandbits(256) for _ in range(num1)]</span><br><span class=\"line\">qs = [getPrime(1024) for _ in range(num1)]</span><br><span class=\"line\">ns = [p * qs[_] + ms[_] for _ in range(num1)]</span><br></pre></td></tr></table></figure></p>\n<p>是一个典型的 AGCD 的攻击场景，这里暂时就不细说了，感兴趣的读者可以看这篇文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJ0aW5yYWxicmVjaHQud29yZHByZXNzLmNvbS8yMDIwLzAzLzIxL3RoZS1hcHByb3hpbWF0ZS1nY2QtcHJvYmxlbS8=\">https://martinralbrecht.wordpress.com/2020/03/21/the-approximate-gcd-problem/</span></p>\n<p>用到的格子就是</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/sz_mmbiz_png/XpBS9rnxDafibiaFomS2g8k55FLBIVjaJ4CLpb2iaw0iassXAianogovjkdHwhYG3jZlAGtcYBhca1R7OYph3ONgJ0A/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ns = [38630062416586710341458654419912504176237737247477839749085033080367529539859992076587411537805430366799412095876782912512744262957062106155418341531142309858429218208463637096843365217114990765965110566415965985105403996944993619708417839598461935470469097206342256014086162845948208599334925650727933097059538199199685364793545286980392966271769914201657672004082101110775504946586957241075964270454872257405872181588544468173017149763827540561921126826597515171761064800381983526515300315517818122598179574900255685121991744205071544970, 41522753602903133841910260331594875922287719226997542592715810409935551768308104573333760854332533376702631593490915962706512143045107096658851885513727202513616813054397657610854303071682604806070009002234312854968365250748142324994926715544722158698813288131533399544263105858513134170084625526223987620550110255872688155827773099232631041345207194483609514502522566888883736218471849075697433311580004701384847571029783514418685068903758509270527252444771313048094566344002411364378658592832008194309873599342916391769027015343562030852, 41542983120532762175372001624404625565366126179958909731196555044290633581761361918706298428954501507557598076910710787422049443564800530253137695341299743714514361560156305534490483794181933110893966453220306980682146624294992100948497284459992930850081254114996830645068636306625330524465991656430799359422407117440063911943625477783216502523414967017151717597372146324488526509879620785458016456593044828784565522423332830549325397893426472247197776412026158371655860380929692662547882654137064941217130915364306358205055760044763651406, 42853015443318352230776688785915441259875645365236808434164117288657978345098324019250085686482568413223085548506789311679316323466083886556772338612177680666217592255234589446979456714341877135596118517098603502394776049958587301113539552072352462301070489369653155854389890761241450743607560719433910573462283304103064437843063566946231984094581307498714742271881862348689297267558023093643893310002803310596286441071314219020032740336515363830250477649030557311461077069407775907176409762823453607196260454965048316567154365877848652918, 31152961872836435078296602982779340735140569916125711058616435902653202922218293684857125091648631460215120167354825278469413413558325850576700866199515219603448136082693185200558425103833947831228064760642508443585470729998592994719564254894176473779555436230174300038353978808432410463449170865897259181312953584408177790825688497584119467820716449210429423337019604137134889051973100340798405991782200038835066294194815913887924272593864934325496116821854183293510325217934617021428710898873475027666892706022106386340733691632884942848]</span><br><span class=\"line\">x0,x1,x2,x3,x4 = ns</span><br><span class=\"line\"></span><br><span class=\"line\">B = matrix(ZZ,[[2^256,x1,x2,x3,x4],[0,-x0,0,0,0],[0,0,-x0,0,0],[0,0,0,-x0,0],[0,0,0,0,-x0]])</span><br><span class=\"line\">L = B.LLL()</span><br><span class=\"line\">ans= L[0][0] // 2^256</span><br><span class=\"line\"></span><br><span class=\"line\">p0 = abs(ans)</span><br><span class=\"line\">p = (x0 // p0)</span><br><span class=\"line\"></span><br><span class=\"line\"># p = 293423658885957174953198318664231534672400520068303593221989900395768107225130267646792968959460384248015583618158947268381852534151783869878808621629530642974652628810907251607210136313789978156955302211733219987661815438401343683</span><br><span class=\"line\">key1 = long_to_bytes(int(p))[:32]</span><br></pre></td></tr></table></figure></p>\n<p>有了 p 之后，我们就能够获取到 ms，而  <code>ms = [random.getrandbits(256) for _ in range(num1)]</code> ，</p>\n<p>另外下面还有一个</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in range(num2):</span><br><span class=\"line\">    a = random.getrandbits(512)</span><br></pre></td></tr></table></figure></p>\n<p>因此根据 ms 和 a，典型的 mt19937 预测随机数，就能搞到 iv，然后看到</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iv = long_to_bytes(random.getrandbits(128))</span><br><span class=\"line\">key = xor(key1,key2)</span><br><span class=\"line\">aes = AES.new(key1,AES.MODE_CBC,iv)</span><br><span class=\"line\">enc = aes.encrypt(pad(flag,48))</span><br></pre></td></tr></table></figure></p>\n<p>这里加密用的是 key1 而不是 key，（难崩）因此根本不需要管 key2，直接用 iv 和 key1 进行一个 AES 密文的解即可。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ns = [38630062416586710341458654419912504176237737247477839749085033080367529539859992076587411537805430366799412095876782912512744262957062106155418341531142309858429218208463637096843365217114990765965110566415965985105403996944993619708417839598461935470469097206342256014086162845948208599334925650727933097059538199199685364793545286980392966271769914201657672004082101110775504946586957241075964270454872257405872181588544468173017149763827540561921126826597515171761064800381983526515300315517818122598179574900255685121991744205071544970, 41522753602903133841910260331594875922287719226997542592715810409935551768308104573333760854332533376702631593490915962706512143045107096658851885513727202513616813054397657610854303071682604806070009002234312854968365250748142324994926715544722158698813288131533399544263105858513134170084625526223987620550110255872688155827773099232631041345207194483609514502522566888883736218471849075697433311580004701384847571029783514418685068903758509270527252444771313048094566344002411364378658592832008194309873599342916391769027015343562030852, 41542983120532762175372001624404625565366126179958909731196555044290633581761361918706298428954501507557598076910710787422049443564800530253137695341299743714514361560156305534490483794181933110893966453220306980682146624294992100948497284459992930850081254114996830645068636306625330524465991656430799359422407117440063911943625477783216502523414967017151717597372146324488526509879620785458016456593044828784565522423332830549325397893426472247197776412026158371655860380929692662547882654137064941217130915364306358205055760044763651406, 42853015443318352230776688785915441259875645365236808434164117288657978345098324019250085686482568413223085548506789311679316323466083886556772338612177680666217592255234589446979456714341877135596118517098603502394776049958587301113539552072352462301070489369653155854389890761241450743607560719433910573462283304103064437843063566946231984094581307498714742271881862348689297267558023093643893310002803310596286441071314219020032740336515363830250477649030557311461077069407775907176409762823453607196260454965048316567154365877848652918, 31152961872836435078296602982779340735140569916125711058616435902653202922218293684857125091648631460215120167354825278469413413558325850576700866199515219603448136082693185200558425103833947831228064760642508443585470729998592994719564254894176473779555436230174300038353978808432410463449170865897259181312953584408177790825688497584119467820716449210429423337019604137134889051973100340798405991782200038835066294194815913887924272593864934325496116821854183293510325217934617021428710898873475027666892706022106386340733691632884942848]</span><br><span class=\"line\">p = 293423658885957174953198318664231534672400520068303593221989900395768107225130267646792968959460384248015583618158947268381852534151783869878808621629530642974652628810907251607210136313789978156955302211733219987661815438401343683</span><br><span class=\"line\">ms = [i%p for i in ns]</span><br><span class=\"line\">x = []</span><br><span class=\"line\">for each in ms:</span><br><span class=\"line\">    tmp = each</span><br><span class=\"line\">    while tmp &gt;0:</span><br><span class=\"line\">        x.append(tmp%(2**32))</span><br><span class=\"line\">        tmp &gt;&gt;= 32</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">A = [12789809461864875489953273982997537541385904671489556544122095227619591140533414669794423644619127980362623481580128258914287474542792728686579090501397390, 10463950513938701625808784986819665844287315724639315128677227520960105897990256530542006653611594269012930935073966767351788182657861624733138283749460454, 5253244650607533810967862436125419800679723144526973463211784033045021824966560017919956773745212139142517766154626849426827164032731516615725539069585525, 5644589184984504085855423002268477365020278981591337230721358313393863912025011466727192648804002734561676112555123877764178690726130713927642577324443238, 4231732567865883627242742552738439372803539125622706171540910152922080004603138662537022248675968288205781990968838888633816697065257733344028576518431020, 2483388920404524165854675814798022834892112957478917588986471421083048888193527751575039626887367465858751417977246719312923814782809309525841102293919541, 3252353812256192711411255830105475125944842449239880454539397067913664088094160819193268643401968970009466652179043139341471403913410402646923633696154454, 11575010486066232687430367040977113580882826853104996856464797182632266635060724100357205810604915010810884387573114266349621457564659060272935537811111850, 116107444921917032985259963199427176510900273385517435613848456370557161312731449337837406563733552524777525870560544042690403987311424820755256727586807, 5859050133610438843641532306693688255014116940390205022708310454673159702673207152462501010791971695002865650407033762568636006764435795015869726867643634, 5954075553161305677556950650395792531753502207483036473422070018485916621872566706504374038792527687442272405589975343003802956899043321092006127828986114, 4571747544457157571652286537158051402285727327066029382085461714597609990601683125994983291866807816649968826930652068427193317966970789937746419206862747, 7166507561570980603812241332170524724051295937096000768984168029904561160020043035660087151672164814332446644696618077835020463308343415953131944864257266, 4852042788460566411381271873349329096978244586097817622748766708426751073559942708861852208085367014057217116211249133109246735634468823924185525972777655, 11962941918999276757181090570698839032103646409734781047194175833198626142790676141060052011581957980660140931408560130449153056874213033784715711461403345, 10324508881746579337486319574059121005227580732153432145860775835052420139026016902518605634385512021513380467928195663920843022679549517463264144660593354, 13276257094435850052122403884510025189232513948002582716865201271569293297601525601586036713056700716929820641888489806178376555435219630186396004003438962, 6525051273399089095687950615197786094425890004112675057642687348101531212837185750558500720306108976630502328600886080197626115513445112562084719104488315, 12922888505610354933000354792496863801007995464403098763485264334670452387681468617068312646367483171083114539083453125614861357751571161533921864394641576, 9489726784141062031514945333087338495823600723655465328127755755022980083351477888038160719541864899912899592065620071698977397662002448273876711116012763, 10630316198843195148937849513165933809121991192035364160395429088101265852052098101114542104327663563661384303617672183366879116750889320604308038959012109, 12675564142993964272844760955973914547747654087592111324261755301551267959231076883765863344473167582531968290671984039948163579495803204811731286282708940, 11847724105274460405216443356582445218232627275228120716891711887600046501095390733716854871561352002320819466803698088448952127166615410820121973485089326, 5131676593756685549522564504727003861447389891839469018437277330988047271086971907217360711863971849879439418231726349935396008040776952541710218842744018, 8049060452950901277510497437779182190254362319091882684392717180429468875432078713802857488901441344429723298843967365750616860588029426099852763482179470, 2365060249260571713545479629411006471094806409182638354076861269679377537605360223984548798658469783472746989448405310909017645138161178501458084966625559, 7467521246204465304438401242342633361751371318557249418344587207503257890765643838557008735305668588521988487342275527781708126255070883848829062790678347, 5841608816993144092409175658260479687582056537041472535819914412630519543198558564258699185557903902095773598614097026740427138629173672250387442834578787, 3935779917509948624841228665498558015416911059417306651751360048412619176423173794541812556512582747588138532941031730797102738268660078594473168666677171, 1459083415233950534805962555425717865938763752937036513111696179351002303817986848490146888626704327653287774806488952733813718461674376764427084478395399, 6426876689549337938550615491086475536072547585103523407263007393570982327518298678278232288342601754164640081474537962710401178482959474762541185760732929, 5241364650650467046722868257809607948071188801137204831449976666385482519613365369974704486723941517654753205012497273820309153659423928739972270634209996, 6387483223002092292686097811446217867743566298067033295601210265979889577756648605354064672061975949925472022416479935990178719227937307079186916383092053, 170562164015232424518655058158727202269056868720093972639058422975773575660534168774299548952867348396798580779605954510297102765330549642318362861226163, 10004133230245713370426176448219282796530473722412487408402635996842671302539458739305597027107498342509248085998067976408732789438099488867425813748783724, 12325342879747412722323355648741345730921040452129462974449188258885453690169624888480720109964630270938743431623479816739889661554987977051169401841580388, 641543989928732942291347866597230552820621633110802944556141221591498546555080480758772801043509130524233886009444044150447511986129019395067102094826363]</span><br><span class=\"line\"></span><br><span class=\"line\">for each in A:</span><br><span class=\"line\">    tmp = each</span><br><span class=\"line\">    while tmp &gt;0:</span><br><span class=\"line\">        x.append(tmp%(2**32))</span><br><span class=\"line\">        tmp &gt;&gt;= 32</span><br><span class=\"line\">print(len(x))</span><br><span class=\"line\">from MT19937_Crack import *</span><br><span class=\"line\">mtb = MT19937Recover()</span><br><span class=\"line\">result = mtb.go_on(x) </span><br><span class=\"line\">enc = b&#x27;cTmkMb\\xfc\\x05|\\x1d\\xc7\\x13\\xbaSe\\xe0\\xbd\\xc0\\xd9\\xa3\\x8cwo\\x82yN[B&amp;\\x80\\xd7KPwQ`\\x9c\\xbf&lt;y\\x8e\\x8a\\x97e\\xa074\\xb2&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import random</span><br><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">key1 = b&#x27;0b5e732a48fc8c6f5ac6366212d2bc59&#x27;</span><br><span class=\"line\">iv = long_to_bytes(result.getrandbits(128))</span><br><span class=\"line\">aes = AES.new(key1,AES.MODE_CBC,iv)</span><br><span class=\"line\">enc = aes.decrypt(enc)</span><br><span class=\"line\">print(enc)</span><br></pre></td></tr></table></figure></p>\n<p>得到 b'flag {86baa4ed-5ec7-11ee-ae14-ac1203ab14da}\\x06\\x06\\x06\\x06\\x06\\x06'</p>\n<p>当然，如果还是想要解出 key2 ，其实这就是 2022 年全国高校密码数学挑战赛的一个赛题，可以去看一下 @tover 的博客 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b3Zlci54eXovcC9ITlAtbm90ZS8jTGV2ZWwtMw==\">https://tover.xyz/p/HNP-note/#Level-3</span> ，写的挺详细了已经。</p>\n<h3 id=\"secretshare\"><a class=\"anchor\" href=\"#secretshare\">#</a> [SecretShare]</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random </span><br><span class=\"line\">from secret import flag, secret</span><br><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\"></span><br><span class=\"line\">n = 21</span><br><span class=\"line\">t = 21</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">A = [secret]</span><br><span class=\"line\">for i in range(n-1):</span><br><span class=\"line\">    A.append(random.getrandbits(1024))</span><br><span class=\"line\"></span><br><span class=\"line\">X = []</span><br><span class=\"line\">for i in range(n):</span><br><span class=\"line\">    X.append(random.getrandbits(1024))</span><br><span class=\"line\"></span><br><span class=\"line\">p = getPrime(1026)</span><br><span class=\"line\"></span><br><span class=\"line\">def f(x):</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    tmp = 1</span><br><span class=\"line\">    for i in range(n):</span><br><span class=\"line\">        res = (res + tmp * A[i]) % p </span><br><span class=\"line\">        tmp = tmp *x  % p</span><br><span class=\"line\">    return res % p</span><br><span class=\"line\"># res = a0+a1*x+a2*x^2+a3*x3+...+a20*x20</span><br><span class=\"line\"></span><br><span class=\"line\">R = []</span><br><span class=\"line\">for i in range(n):</span><br><span class=\"line\">    R.append(f(X[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">P = secret</span><br><span class=\"line\">Q = getPrime(1024)</span><br><span class=\"line\">N = P * Q</span><br><span class=\"line\">m = bytes_to_long(flag)</span><br><span class=\"line\">e = 65537</span><br><span class=\"line\">c = pow(m, e, N)</span><br><span class=\"line\">phi=(P - 1) * (Q - 1)</span><br><span class=\"line\">d = pow(e,-1,phi)</span><br><span class=\"line\">print(long_to_bytes(pow(c,d,N)))</span><br><span class=\"line\"></span><br><span class=\"line\">fi = open(&#x27;output.txt&#x27;,&#x27;w&#x27;)</span><br><span class=\"line\">for i in range(t-1):</span><br><span class=\"line\">    fi.write(str(X[i])+&#x27; &#x27;+str(R[i])+&#x27;\\n&#x27;)</span><br><span class=\"line\">print(&quot;leak = %d&quot;%R[-1])</span><br><span class=\"line\">print(&quot;p = %d&quot;%p)</span><br><span class=\"line\">print(&quot;c = %d&quot;%c)</span><br><span class=\"line\">print(&quot;N = %d&quot;%N)</span><br><span class=\"line\"></span><br><span class=\"line\"># leak = 158171468736013100218170873274656605219228738469715092751861925345310881653082508445746109167302799236685145510095499361526242392251594397820661050281094210672424887670015189702781308615421102937559185479455827148241690888934661637911906309379701856488858180027365752169466863585611322838180758159364570481257</span><br><span class=\"line\"># p = 667548632459029899397299221540978856425474915828934339291333387574324630349258515018972045406265448494845331262999241448002076917383740651362641947814545076390796789402373579283727117618532504865966299599663825771187433223531022829811594806917984414530614469374596457149431218829297339079019894262229453357029   </span><br><span class=\"line\"># c = 9658009093151541277762773618550582280013680172161026781649630205505443184765264518709081169475689440555639354980432557616120809346519461077355134139495745998317849357705381020225760061125236265304057301286196004542729553944161451832173970613915423841610378207266606500956362098150141825329354727367056070349148059780287916811442861961254066733726576151134458892613951223277692935141880749737598416235307087782001086096114978527447987308876878393763055893556123029990282534497668077854186604106027698257663251502775547705641708624619340185646943640576690633662704397191379303254341343433077302686466850600522990402912</span><br><span class=\"line\"># N = 11790604055677230214731474049594783873473779547159534481643303694816346271798870343160061559787963631020684982858033776446193418629055210874285696446209220404060653230407249409973790191858423402504530660556839353260629987853933304089439885784684686555554108157760445567974629355878575105480273451284714281430590737346099023372211403461861104391534461524711472734572409128196536805998116015230502045333769525693468193385557827209520108839913096017750428926467123493650506193757937746017474062985480713594474378324234033232933140389879312722642144536418253323908290256009510135710208223393009237664704631175216240376891</span><br></pre></td></tr></table></figure></p>\n<p>这道题就更简单了（可能又是出题失误，信息放出来多了），</p>\n<p>其中  <code>f(x)</code>  函数可以记为</p>\n<p>数组 A 和 X 都是由 21 个 1024 比特的数组成，其中 A 的后 20 个是  <code>random.getrandbits(1024)</code> ， 21 个 X 都是  <code>random.getrandbits(1024)</code></p>\n<p>1024/32*21=672，足足的了。直接就能往前把 20 个 a 全部恢复。这里又把 x 全部给出来了，对应的 r 也给了，P  就是</p>\n<p>那直接</p>\n<p>再解一下 RSA 就完活了。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(&quot;output.txt&quot;) as f:</span><br><span class=\"line\">        data = f.read().split(&quot;\\n&quot;)[:-1]</span><br><span class=\"line\">X=[]</span><br><span class=\"line\">R=[]</span><br><span class=\"line\">for each in data:</span><br><span class=\"line\">        tm = each.split(&quot; &quot;)</span><br><span class=\"line\">        X.append(int(tm[0]))</span><br><span class=\"line\">        R.append(int(tm[1]))</span><br><span class=\"line\">print(len(X))</span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\">for each in X:</span><br><span class=\"line\">        tmp = each</span><br><span class=\"line\">        while tmp &gt;0:</span><br><span class=\"line\">                x.append(tmp%(2**32))</span><br><span class=\"line\">                tmp &gt;&gt;= 32</span><br><span class=\"line\">print(len(x))</span><br><span class=\"line\">from MT19937_Crack import *</span><br><span class=\"line\">mtb = MT19937Recover()</span><br><span class=\"line\">result = mtb.go_back(x,608)</span><br><span class=\"line\"></span><br><span class=\"line\">def factory(res):</span><br><span class=\"line\">        ans=[]</span><br><span class=\"line\">        for i in range(0,len(res)//32):</span><br><span class=\"line\">                tmp = 0</span><br><span class=\"line\">                for j in range(32):</span><br><span class=\"line\">                        tmp+=res[32*i+j]&lt;&lt;(j*32)</span><br><span class=\"line\">                ans.append(tmp)</span><br><span class=\"line\">        return ans</span><br><span class=\"line\">A = factory(result)</span><br><span class=\"line\"></span><br><span class=\"line\">value = result+x</span><br><span class=\"line\">result = mtb.go_back(value,32)</span><br><span class=\"line\">A = factory(result)+A</span><br><span class=\"line\">print(len(A))</span><br><span class=\"line\"></span><br><span class=\"line\">x =  X[0]</span><br><span class=\"line\">res = R[0]</span><br><span class=\"line\">p = 667548632459029899397299221540978856425474915828934339291333387574324630349258515018972045406265448494845331262999241448002076917383740651362641947814545076390796789402373579283727117618532504865966299599663825771187433223531022829811594806917984414530614469374596457149431218829297339079019894262229453357029</span><br><span class=\"line\">for i in range(1,21):</span><br><span class=\"line\">        res = (res-A[i-1]*x**i)%p</span><br><span class=\"line\">N = 11790604055677230214731474049594783873473779547159534481643303694816346271798870343160061559787963631020684982858033776446193418629055210874285696446209220404060653230407249409973790191858423402504530660556839353260629987853933304089439885784684686555554108157760445567974629355878575105480273451284714281430590737346099023372211403461861104391534461524711472734572409128196536805998116015230502045333769525693468193385557827209520108839913096017750428926467123493650506193757937746017474062985480713594474378324234033232933140389879312722642144536418253323908290256009510135710208223393009237664704631175216240376891</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p=res</span><br><span class=\"line\">q=N//res</span><br><span class=\"line\">c = 9658009093151541277762773618550582280013680172161026781649630205505443184765264518709081169475689440555639354980432557616120809346519461077355134139495745998317849357705381020225760061125236265304057301286196004542729553944161451832173970613915423841610378207266606500956362098150141825329354727367056070349148059780287916811442861961254066733726576151134458892613951223277692935141880749737598416235307087782001086096114978527447987308876878393763055893556123029990282534497668077854186604106027698257663251502775547705641708624619340185646943640576690633662704397191379303254341343433077302686466850600522990402912</span><br><span class=\"line\"></span><br><span class=\"line\">e = 65537</span><br><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\">d = inverse(e,(p-1)*(q-1))</span><br><span class=\"line\">print(long_to_bytes(pow(c,d,p*q)))</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://justgo00.github.io/2023/12/11/hello-world/",
            "url": "https://justgo00.github.io/2023/12/11/hello-world/",
            "title": "Hello World",
            "date_published": "2023-12-11T05:15:22.063Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}